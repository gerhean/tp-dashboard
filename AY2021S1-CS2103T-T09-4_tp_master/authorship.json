[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "# Green Tea"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## The Revolutionary Language Learning Application"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-4/tp/actions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### About GreenTea"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "GreenTea is a desktop app for learning a new language, designed for users to **have fun** through quizzes while keeping"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "track of their **learning progress**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "GreenTea is designed for use with a **CLI** (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### Documentation Links"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/)"
      }
    ],
    "authorContributionMap": {
      "geoboom": 3,
      "IlyaRin": 15,
      "-": 3
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 8
    }
  },
  {
    "path": "bin/main/view/DarkTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Unused and deleted:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * grid pane, button, dialog pane, split pane,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * table view, tab pane, label, #tabs, text field, background,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * #tags and tagslabel"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * #filterField, personListPanel, personWebpage, result"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Darkest to brightest:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Dark Grey: #383838"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Pullman Green: #2B3E13 main color"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Dark moss green: 455A20 secondary color"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Dark olive green : #46651f even entry result"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Middle green yellow : #547925 odd entry result"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Brass : A5AF37  unused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Used in fxml*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 30%);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-color: derive(#2B3E13, 10%);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Used in the listing of entries*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#46651f, 20%);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#547925, 50%);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Right border for entry listings*/"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".deck-list {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0 15 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Menu bar styling*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 50%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #46651f, #f5f5f5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Scroll bar*/"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: #383838"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 50%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Command box text settings*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geoboom"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent #2B3E13 transparent #2B3E13;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-color: #2B3E13 #2B3E13 #ffffff #2B3E13;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Command box background colour*/"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geoboom"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent, #455A20, transparent, #455A20;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/*Command box red font for fail commands*/"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geoboom"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Used in EntryListCard.fxml but unsure why*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Tab styling */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tab  {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0 0 7 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-width: 5px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-style: hidden hidden solid hidden;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Header */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".header {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Start Panel */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".header-message {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 35px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".command-message {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 10 0 40 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Quiz Panel */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".question {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".answer-list {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background: derive(#2B3E13, 40%);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 40%);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".quiz-bottom-panel {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-padding: 40 20 0 20;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".progress-bar .bar{"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: linear-gradient(green, #F8E9C7);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Remove the white space between horizontal and vertical scroll bars in quiz mode */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Score Panel */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".help-message {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/* Start Panel */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".start-panel{"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 277
    }
  },
  {
    "path": "bin/main/view/DeckListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"deck-list\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cLabel text\u003d\"Decks\" styleClass\u003d\"header\" stylesheets\u003d\"DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"300\" maxWidth\u003d\"300\" minHeight\u003d\"45\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cInsets right\u003d\"15\" left\u003d\"23\"\u003e\u003c/Insets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/ListView\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 14
    }
  },
  {
    "path": "bin/main/view/EntryListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "-": 30
    }
  },
  {
    "path": "bin/main/view/EntryListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "-": 6
    }
  },
  {
    "path": "bin/main/view/Extensions.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-legend-item{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "   -fx-font-size: 1.6em;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     -fx-padding: 20px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-tick-label-fill: #FFFFFF;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 39
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 38
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Green Tea\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.3-internal\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cImage url\u003d\"/images/green_tea_icon.png\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"300\" maxWidth\u003d\"300\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              tabMinWidth\u003d\"150\" minWidth\u003d\"450\" minHeight\u003d\"360\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"start_panel\" text\u003d\"Start\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cStackPane fx:id\u003d\"startPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"entries_panel\" text\u003d\"Entries\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"quiz_panel\" text\u003d\"Quiz\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cStackPane fx:id\u003d\"quizPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"statistics_panel\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 75
    }
  },
  {
    "path": "bin/main/view/QuizPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"question-box\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"progressBar\" styleClass\u003d\"progress-bar\" minWidth\u003d\"300\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"question\" minWidth\u003d\"300\" minHeight\u003d\"350\" maxWidth\u003d\"400\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003cInsets left\u003d\"30\" right\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cScrollPane styleClass\u003d\"answer-list\" minHeight\u003d\"400\" maxHeight\u003d\"400\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            maxWidth\u003d\"450\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cLabel fx:id\u003d\"answerList\" StackPane.alignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                        \u003cInsets left\u003d\"20\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003cInsets right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalQuestions\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003cInsets left\u003d\"20\" right\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionsAnswered\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    \u003cInsets right\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionsLeft\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 48
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 8
    }
  },
  {
    "path": "bin/main/view/ScorePanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLabel fx:id\u003d\"scoreMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLabel fx:id\u003d\"finalScore\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLabel fx:id\u003d\"encouragementMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help-message\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 11
    }
  },
  {
    "path": "bin/main/view/StartPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cImageView fx:id\u003d\"greenTeaIcon\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"start-panel\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cLabel fx:id\u003d\"headerMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cLabel fx:id\u003d\"commandMessage\" styleClass\u003d\"command-message\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 13
    }
  },
  {
    "path": "bin/main/view/StatisticsPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx/11.0.3-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLineChart fx:id\u003d\"statisticsLineChart\" title\u003d\"Stat Chart\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cxAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cyAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cNumberAxis side\u003d\"LEFT\" fx:id\u003d\"yAxis\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cLabel fx:id\u003d\"lastLoginLabel\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 26
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 11
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.10\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "run{"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "gabrielsimbingyang": 7
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Vignesh Bhuvan"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/vigneshbhuvan-nus.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/vigneshbhuvan-nus)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Gabriel Sim"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/gabrielsimbingyang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/GabrielSimbingyang)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Melanie Ng"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/ilyarin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/IlyaRin)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Georgie Lee"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/geoboom.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/geoboom)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 17,
      "-": 27,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## Green Tea Developer Guide (v1.4)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [1.1 Purpose](#11-purpose)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [1.2 Audience](#12-audience)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [2. Setting up, getting started](#2-setting-up-getting-started)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [3. Design](#3-design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [3.1 Component Overview](#31-component-overview)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.2 Architecture Overview](#32-architecture-overview)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.3 Common classes](#33-common-classes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.4 UI component](#34-ui-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.5 Logic component](#35-logic-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.6 Model component](#36-model-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [3.7 Storage component](#37-storage-component)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [4.1 Deck Feature (Melanie)](#41-deck-feature-melanie)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      - [4.1.1 Overview](#411-overview)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      - [4.1.2 Commands Implemented](#412-commands-implemented)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      - [4.1.3 Select Deck](#413-select-deck)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [4.2 Flashcard System (Gabriel)](#42-flashcard-system-gabriel)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.2.1 Overview (Gabriel)](#421-overview-gabriel)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.2.2 Commands Implemented (Gabriel)](#422-commands-implemented-gabriel)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.2.3 Play Mode and Command Mode (Gabriel)](#423-play-mode-and-command-mode-gabriel)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.2.4 Answer Command and Stop Command (Gabriel)](#424-answer-command-and-stop-command-gabriel)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.2.5 Leitner and QuizAttempt (Georgie)](#425-leitner-and-quizattempt-georgie)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [4.3 Statistics (Georgie)](#43-statistics-georgie)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.3.1 Overview](#431-overview)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.3.2 QuizAttempt and QuestionAttempt](#432-quizattempt-and-questionattempt)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      - [4.3.3 Statistics Manager](#433-statistics-manager)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [5. Documentation, logging, testing, configuration, dev-ops](#5-documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [6. Appendix: Requirements](#6-appendix-requirements)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [6.1 Product scope](#61-product-scope)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [6.2 User stories](#62-user-stories)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [6.3 Use cases](#63-use-cases)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [6.4 Non-Functional Requirements](#64-non-functional-requirements)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [6.5 Glossary](#65-glossary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [7. Appendix: Instructions for manual testing](#7-appendix-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [7.1 Launch and shutdown](#71-launch-and-shutdown)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.2 Getting Help](#72-getting-help)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.3 Creating a Deck](#73-creating-a-deck)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.4 Removing a Deck](#74-removing-a-deck)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.5 Creating an Entry](#75-creating-an-entry)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.6 Editing an Entry](#76-editing-an-entry)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.7 Playing and Stopping a Quiz](#77-playing-and-stopping-a-quiz)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.8 Viewing Statistics](#78-viewing-statistics)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [7.9 Saving Data](#79-saving-data)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Green Tea is a flashcard application, designed for users who want to practice their language skills and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "keep track of their learning progress."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 1.1 Purpose"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This document details the architecture, design decisions and implementations for the flashcard application, Green Tea."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 1.2 Audience"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The intended audience of this document are the developers and testers of Green Tea."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 2. Setting up, getting started"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This section details the various components of the application. It covers the internal structure of each component and"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "how the components work together with one another."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 3.1 Component Overview"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The components of the application are Main, Commons, UI, Logic, Model and Storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003c\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 1.Architecture Diagram \u003c/p\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "The **_Component Overview Diagram_** above shows the high-level design of the application."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "It is responsible for:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- At app launch: Initializes the components in the correct sequence and connects them up with each other."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[**`Commons`**](#33-common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- [**`UI`**](#34-ui-component): The UI (User Interface) of the App."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- [**`Logic`**](#35-logic-component): The command executor."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- [**`Model`**](#36-model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- [**`Storage`**](#37-storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 2. Example Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 3.2 Architecture Overview"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The _Sequence Diagram_ below (Figure 3) shows how the components interact with one another when the user issues the command `remove 1`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![Sequence Diagram of Various Components](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 3. Sequence Diagram of Various Components"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The sections below give more details about each component."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 3.3 Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Common classes are classes used by multiple components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "They can be found in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Common classes include:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- `Index`: Represents a zero or one based index. Using `Index` removes the need for a component to know what base other"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  components are using for their index. Can be converted to an integer (int)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- `Messages`: Stores messages to be displayed to the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- `GuiSettings`: Contains the GUI settings."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- `LogsCenter`: Writes messages to the console and a log file. Records the state of the program as the app is running."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 3.4 UI component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `UI` component is the portion of the application which is visible to the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `UI` consists of a `MainWindow` that is made up of various parts (E.g `CommandBox`, `ResultDisplay`, `DeckListPanel`, `StatusBarFooter`)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The structure diagram of the `UI` component is shown below in Figure 4."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 4. UI component class relationship diagram \u003c/p\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Role of the `Ui` component:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Receives the user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Listens for changes to `Model` data so that the `Ui` can be updated with the modified data."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `Ui` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`MainWindow.fxml` - Houses the rest of the fxml (commandBox,HelpWindow, etc) in the VBox. Contains the code for the actual menu bar"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`CommandBox.fxml` - Takes in the user input and passes it to `MainWindow` which will pass the input to `Logic`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`DeckListPanel.fxml` - Houses a ListView\u003cDeck\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`EntryListPanel.fxml` - Houses a ListView\u003cEntry\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`EntryListCard.fxml`- Contains the word and translation data of each entry. Note that it is not housed by MainWindow.fxml"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`QuizPanel.fxml` - Displays quiz information to the user"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`ScorePanel.fxml` - Displays quiz score to the user only after a quiz has ended"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`StartPanel.fxml` - Displays green tea icon and some sample commands to the user"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`StatisticsPanel.fxml` - Displays the statistics of past quizzes to the user"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`HelpWindow.fxml` - Displays label and copy url button"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`ResultDisplay.fxml` - Prints results to user"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`StatusBarFooter.fxml` - Returns the path of the file retrieved"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`MainWindow.fxml` contains a **tabPanel** which switches between 4 panels depending on the command given by the user."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Commands update a class called `CurrentView.java` in `Model`. Based on the current view, the tab panel will be updated accordingly"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Panel which shows upon _starting the application_ is `StartPanel.fxml`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Panel which shows upon _selecting a deck_ is `EntryListPanel.fxml`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Panel which shows upon _starting a quiz game_ is `QuizPanel.fxml`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Panel which shows upon _giving stats command_ is `StatisticsPanel.fxml`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 3.5 Logic component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `Logic` component is the bridge between the `UI` and `Model` components. It is in charge of deciding what to do with the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "user input received from the `UI`. This component consists of the `Statistics`, `Parser` and the `Command` package."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The class diagram of the `Logic` component is shown below in Figure 5."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 5. Logic Component Class Diagram"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Role of the `Logic` component:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `Logic` receives the user command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `Logic Manager` can either be in `Play Mode` or in `Command Mode`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Uses the `PlayModeParser` or the `CommandModeParser` class to parse the user command depending on the mode it is in."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Creates a `Command` object which is passed and executed by `LogicManager`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Executing the command can affect the `Model` (e.g. adding a deck)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Returns the result of the command execution as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Initialises the `StatisticsManager` on startup via `LogicManager` and maintains the `Statistics`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Any changes from executing a `Command` object is recorded in `Statistics` by `Statistics Manager`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of the `Parser` package:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Derives the command word and the arguments of the user input"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Throws a `ParserException` if the command word or argument are not correctly written"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of the `Statistics` package:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Maintains the `Statistics` of the all the decks in memory"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- More explained under [Implementations - Statistics](#43-statistics-georgie)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of the `Command` package:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Contains the instructions for `Model`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Throws a `CommandException` if an error occurs between execution and obtaining `CommandResult`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 6. Sequence Diagram of Logic Component for \"Remove 1\" Command"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 3.6 Model component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `Model` component is in charge of changing the data within the application."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This includes information about decks, entries and statistics."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `Model` component consists of the `Play`, `Deck` and `View` package. The `Play` package consists of the `Scoring` package,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`Leitner` object and the `Score` object. The `Deck` package consists of the `Entry` package, the `Deck` object and"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "all other similar object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "All these information on the `Model` component is visually expressed in the class diagram below."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 7. Model Component Class Diagram"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The diagram below will give more details about the word bank section of the model component."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Role of `Model` component:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Stores a `CurrentView` object that represents the current tab view on the UI."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Stores a `WordBank` component that maintains all the current `Entry` and `Deck` data."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Stores a `FilteredList\u003cDeck\u003e` object that maintains the current list of `Deck` in memory for error checking purposes."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Creates and maintains a `Leitner` object and a `QuizAttempt` object using a selected deck from `FilteredList\u003cDeck\u003e` if"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  a `PlayCommand` object is executed by `Logic`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of `WordBank` component"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Maintains all the current `Entry` and `Deck` data."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Stores a `FilteredList\u003cEntry\u003e` object that maintains the current list of `Entry` in memory."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Exposes an unmodifiable `ObservableList\u003cDeck\u003e` and `ObservableList\u003cEntry\u003e`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  that can be \u0027observed\u0027. E.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of `Leitner` object:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Shuffles a given `Deck` by decomposing it into a list of `Translations` and a list of `Word` called questions and answers respectively."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- Returns each `Translation` (question)) and `Word` (answer) when called by `ModelManager`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- More explained under [Implementations - Flashcard](#42-flashcard-system-gabriel)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Role of `QuizAttempt` object:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Maintains the list of current `Score` and `QuestionAttempt` of the quiz."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- More explained under [Implementations - Flashcard](#42-flashcard-system-gabriel)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 3.7 Storage component"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `Storage` component handles the reading and writing of data from a data file. By storing the data,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "the application will be able to load the data from the previous session back to the user when the user opens"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "the application."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The class diagram of the `Storage` component is shown below."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cp align\u003d\"center\"\u003e Figure 8. Storage Component Class Diagram"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- Saves`UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- Saves the word bank data (mainly Decks and QuizAttempts) in json format and read it back"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "From Figure 8, it can be observed that `JsonSerializableWordBankStorage` consists of a list of `JsonAdaptedDeck` objects."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "`JsonSerializableWordBankStorage` can be then serialized in order to convert data from json files into GreenTea\u0027s model. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Data from GreenTea\u0027s model can also be converted into json files through the reverse of this process. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "`StorageManager` manages the process of saving and reading data"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "All the data is eventually stored in `wordbank.json` in the `data` folder. When the application is restarted,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "the data from `wordbank.json` is read and converted into GreenTea\u0027s model. "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":information_source: **Note:** An alternative (arguably, a more OOP) model is given below in Figure 9."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "In this model, the `Deck` and `Entry` data is separated from the `QuizAttempt` data. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "This allows for better management of data and for example could allow users to share `Deck` data with other users without sharing their `QuizData`. "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![BetterModelClassDiagram](images/StorageClassDiagramMoreOOP.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 9 More OOP Storage Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This section describes some noteworthy details on how and why certain features are implemented."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 4.1 Deck Feature (Melanie)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "#### 4.1.1 Overview"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This feature allows the user to create multiple lists of entries called decks."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The user can have different decks for different languages or multiple decks for the same language."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Deck 1: Japanese"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Deck 2: Spanish Food"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Deck 3: Spanish Animals"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Users will be able to `add` decks, `delete` decks and `select` decks."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "###### Aspect: One long list of entries or deck system"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- **Alternative 1 (current choice)**: Deck system"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - Pros: Users are better able to organize their entries into groups."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Commands such as `find` and `list` to filter entries are no longer needed."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Allows [flashcard system](#42-flashcard-system-gabriel) to be implemented more easily."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Higher level of abstraction."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - Cons: Harder to implement, more code and commands required"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- **Alternative 2**: One long list of entries"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - Pros: Easier implementation, less code required."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - Cons: Harder for users to navigate and find the entry that they are looking for."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "#### 4.1.2 Commands Implemented"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Three commands are used in order to support having a deck system - New Deck Command, Remove Deck Command and Select Command"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `new \u003cDECK\u003e` - Adds a new deck to the word bank."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `remove \u003cINDEX\u003e` - Removes the deck at the specified index."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `select \u003cINDEX\u003e` - Selects the deck at the specified index."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Each of these three commands require the use of the `UI`, `Logic` and `Model` components."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "For example, when a deck is added, the `model` must be updated with a new deck list containing the added deck. The"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "`UI` must also reflect the added deck to be shown to the user."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `Storage` component is needed for commands `new` and `remove`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "#### 4.1.3 Select Deck"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "This feature requires the user to select a deck (using `select \u003cindex\u003e`) in order to change the contents of the deck."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Only after selecting a deck, can some other commands (E.g `add`, `delete`, `edit`, `/play`) be performed."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":information_source: **Note:** The implementation of this feature requires the GUI to be updated whenever a deck is selected. This is done by using the"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "UI, Logic and Model components."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- The selected deck is retrieved from `FilteredList\u003cDeck\u003e` in the model component."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- These entries in the selected deck replaces the current entries in the `UniqueEntryList` object of WordBank causing the GUI to change accordingly."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- This approach is used for other commands that changes the GUI such as `add \u003centry\u003e` and `clear` command"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "###### Aspect: Command format to select a deck"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Alternative 1 (current choice)**: `select \u003cdeck_index\u003e` Select a deck before any entry level command can be given."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  E.g. `select 1` followed by `delete 1`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Pros: Easier for a user to make continuous changes to the same deck"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Allows following features to be implemented more easily"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Cons: Users have to give an additional command"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Alternative 2**: `delete \u003cdeck_index\u003e \u003centry_index\u003e` Entry level commands specify a deck. E.g `delete 1 1`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Pros: Single command for users to execute"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Cons: May cause confusion to the users."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Utimately, we decided that user navigability was more important than the extra `select` command needed. This is because"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Green Tea is designed to be a simple and easy system for new users to use."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![SelectActivityDiagram](images/SelectActivityDiagram.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 10 \u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![AddEntry](images/AddEntryActivityDiagram.png)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 11 \u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![AddEntrySequenceDiagram](images/AddEntrySequenceDiagram.png)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 12 \u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![SelectDeckSequenceDiagram](images/SelectDeckSequenceDiagram.png)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 13 \u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 4.2 Flashcard System (Gabriel)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.2.1 Overview (Gabriel)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `Flashcard System` is a feature that allows the user to quiz themselves on a selected deck\u0027s entries."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The user can quiz themselves after ensuring a deck is already selected using a `SelectCommand` and then"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "invoking a `PlayCommand`. This feature will also keep track and update the score of the quiz."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "This section will explain:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- How the application separates the play mode commands from the command mode commands."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- How the play mode commands work."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- How scoring is calculated and saved in `Storage` based on each quiz."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "##### Design Considerations:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "###### Aspect: Type of flashcard system"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- **Alternative 1 (current choice)** : Leitner System"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - Pros: The Letiner system is a proven quizzing system that increases the user\u0027s rate of learning by"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    using spaced repetition. Questions are sorted based on the user\u0027s ability to answer them. Correctly"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    answered questions are put at the end of the question queue and incorrectly answered"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    flashcards are placed at the front."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - Cons: More difficult to implement"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- **Alternative 2** : Random shuffling system"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - Pros: Easier to implement"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - Cons: Users may not learn as effectively"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.2.2 Commands Implemented (Gabriel)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `SelectCommand` follows the format: `select \u003cindex\u003e`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `PlayCommand` follows the format: `/play`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Three commands are used in order to support the Flashcard system - PlayCommand, StopCommand and AnswerCommand"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `/play` - Starts a new Flashcard game / quiz."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `/stop` - Stops the current Flashcard game/ quiz."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `[Any Answer]` - Answers the current question in the Flashcard game / quiz. This input does not have a specific structure or command."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Each of these three commands require the use of the `UI`, `Logic` and `Model` components."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "For example, when a deck is played, the `model` must be updated with a shuffled deck containing the shuffled entries. The"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`UI` must also reflect the added deck to be shown to the user."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.2.3 Play Mode and Command Mode (Gabriel)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `Logic` component is responsible for receiving, parsing and executing the user command. In addition to this,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "the `Logic Manager` maintains a private `boolean` field known as `isPlayMode` that is originally set to `false`."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "If `isPlayMode` is set to `true`, `Logic Manager` will be in Play Mode and will parse all incoming input through the `PlayModeParser`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "If `isPlayMode` is set to `false`, `Logic Manager` will be in Command Mode and will parse all incoming input through the `CommandModeParser`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":information_source: **Note:** In Play Mode, all commands are treated as valid unless the command word is `/play`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The figure below is an activity diagram that provides a generalized overview on the behavior of `Logic Manager` when a user"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "enters any command."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![GeneralizedCommand](images/GeneralizedCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 14 Generalized Command Activity Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The left rake symbol in the above figure can refer to any Play Mode command such as [the answer command](#424-answer-command-and-stop-command-gabriel) (besides the `PlayCommand`)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "while the right rake symbol can refer to any Command Mode command such as [the select command](#413-select-deck)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "To switch `Logic Manager` into Play Mode, the user can enter a `PlayCommand`. Below is a sequence diagram for the `PlayCommand`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![AnswerCommandSequenceDiagram](images/AnswerCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 15 Play Command Sequence Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "From the above diagram, entering `/play` will result in the follow steps:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 1: User enters `/play`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 2. The input is saved as a `String` and passed into `Logic Manager`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 3. The boolean field `isPlayMode` in `Logic Manager` becomes `true`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 4. `Logic Manager` passes the `String` to `PlayModeParser`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 5. A `PlayCommandParser` is created."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 6. The `String` is passed from `PlayModeParser` to `PlayCommandParser` to parse."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 7. `PlayCommandParser` creates a new `PlayCommand` object stored as a variable `args`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 8. `args` is then pass back to `Logic Manager` via `PlayCommandParser` and `PlayModeParser`. `PlayCommandParser`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "is then deleted."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 9. `Logic Manager` executes the `args` command."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 10. The `args` command invokes `newGame()` in `Model`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 11. `Model` creates a new [`Leitner` object and `QuizAttempt` object](#425-leitner-and-quizattempt-georgie)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 12. The `args` command also invokes the `Model` object to set the current view  to `QUIZ_VIEW`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 13. A `CommandResult` object is created and returned to `Logic Manager` to signify the end of the command execution."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `CommandResult` displays the command success message to the user via the GUI to signify the end of the command execution."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The activity diagram below summarizes the high level behavior of `LogicManager` and `Model` when the user enters a `PlayCommand`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![PlayCommand](images/PlayActivityDiagram.png)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 16 Play Command Activity Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.2.4 Answer Command and Stop Command (Gabriel)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "When in Play Mode, `Logic Manager` will only handle two commands. They are the `StopCommand` and the `AnswerCommand`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "In this implementation, all inputs that do not match the format for the `StopCommand` are treated as inputs"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "to the `AnswerCommand`."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Below is the corresponding sequence diagram for the \u0027AnswerCommand\u0027. The sequence diagram for the `StopCommand` is trivial"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "as seen in Figure 17."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![PlayCommandSequenceDiagram](images/PlayCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 17 Answer Command Sequence Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "From the above diagram, entering an answer in Play Mode will result in the follow steps:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 1: User enters `Sample Answer`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 2. The input is saved as a `String` and passed into `Logic Manager`."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 3. `Logic Manager` passes the `String` to `PlayModeParser`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 4. A `AnswerCommandParser` is created."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 5. The `String` is passed from `PlayModeParser` to `AnswerCommandParser` for parsing."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 6. `AnswerCommandParser` creates a new `AnswerCommand` object stored as a variable `answer`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 7. `answer` is then pass back to `Logic Manager` via `AnswerCommandParser` and `PlayModeParser`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`AnswerCommandParser` is then deleted."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 8. `Logic Manager` executes the `answer` command."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 9. The `answer` command invokes `playGame(answer)` in `Model`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 10. Depending on the correctness of the `answer`, Model will update the score via `updateScore()`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 11a. If the [`Leitner` object](#425-leitner-and-quizattempt-georgie) stored in `Model` has more than one question left, `Model`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "will update the next question via `updateQuestion()`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "A `CommandResult` object is created storing the `answer` and returned to `Logic Manager` to signify the end of the command execution."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `CommandResult` displays the answer details to the user via the GUI to signify the end of the command execution."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Step 11b. Else, the current question is the final question that is answered in the quiz."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "A `CommandResult` object is created and returned to `Logic Manager` storing the `playerScore` and the `maxScore` of the quiz as `Strings`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The `CommandResult` displays the score to the user via the GUI to signify the end of the command execution."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The two figures below are the activity diagram that describes the high level behavior of `LogicManager` and `Model` when the user"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "enters a answer in Play Mode."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Note that Figure 17 mainly capture the states of the \u0027StopCommand\u0027 while Figure 18"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "captures the states of the \u0027AnswerCommand\u0027."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":information_source: **Note:** both figures are connected by the rake symbol."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![AnswerCommandOne](images/AnswerCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 18 Answer Command Activity Diagram One\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![AnswerCommandTwo](images/AnswerCommandActivityDiagramTwo.png)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 19 Answer Command Activity Diagram Two\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.2.5 Leitner and QuizAttempt (Georgie)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "geoboom"
        },
        "content": "The Leitner system is a system to randomize the questions presented to a user based on their most recent past attempt of the quiz if any, otherwise random shuffle is executed. `Leitner` is a class that encapsulates this logic. It is constructed with `Deck` as the only parameter and stores the next question list to be presented to the player in its internal `entryList` object, retrieved via `leitner.getEntries()`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "geoboom"
        },
        "content": "How it works is as follows (this is in `ModelManager`):"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "geoboom"
        },
        "content": "```java"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "geoboom"
        },
        "content": "// construct the Leitner object, passing in the deck"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Leitner leitner \u003d new Leitner(deck);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "geoboom"
        },
        "content": "// shuffle and store results of shuffle in leitner\u0027s internal entryList"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "geoboom"
        },
        "content": "leitner.doTheLeitner();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "geoboom"
        },
        "content": "// get the entries (questions) to show the player"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "geoboom"
        },
        "content": "// the order of the questions in the entry follows that of the Leitner system described above"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Entry entries \u003d leitner.getEntries();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "geoboom"
        },
        "content": "```"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Later, a series of `leitner.addGuess(guess)` is called until the end of the quiz to reflect \"answering a question\". Leitner will create a new `QuestionAttempt` for each of these guesses and store all the `QuestionAttempt`s in a list. This list of `QuestionAttempt` is stored in a `QuizAttempt` in the `Deck` and is used in generating the next order of questions to show the user."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 4.3 Statistics (Georgie)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.3.1 Overview"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "geoboom"
        },
        "content": "We needed to track quiz-specific and app-wide data. Quiz-specific data refers to data that reflects the complete attempt/playthrough of a particular quiz which we call a `QuizAttempt`. In particular, `QuizAttempt` is a list of `QuestionAttempt`s, where each `QuestionAttempt` consists of the user\u0027s answer, the correct answer, and the total score received for that question out of `1.0`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "geoboom"
        },
        "content": "App-wide data on the other hand refers events like logins and logouts, time last logged in, average time spent on app, number of quizzes taken in total, etc. We disembarked working on this feature in favor of other features such as Leitner as we found it to not value-add to the user that much. Nonetheless, we decided to include it as it might be interesting from an engineering standpoint."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.3.2 QuizAttempt and QuestionAttempt"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Each `Deck` consists of a list of `QuizAttempt`s. Each `QuizAttempt` object encapsulates a given entire playthrough of the `Deck`."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "geoboom"
        },
        "content": "It contains:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- list of `QuestionAttempt`s;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- duration of the quiz;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- time the quiz was taken at;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- total score;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- and `Scoring`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Apart from `Scoring`, the rest of the attributes are computed on the fly as a new `QuestionAttempt` is added to the `QuizAttempt`. `Scoring` is just an interface that has an abstract method `computeScore` which takes in two strings and returns a `double` between `0.0` and `1.0`, depending on how it is implemented e.g. `BinaryScoring` will give `1.0` if the strings are same, and `0.0` if not; `EditDistanceScoring` will score based on the edit distance between the two strings."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "geoboom"
        },
        "content": "As a new `QuestionAttempt` is added, `Scoring` will compute the score for that question based on the answer the user gave and the correct answer."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "geoboom"
        },
        "content": "To make `Deck` as cohesive as possible, a `Deck` consist of a list of `QuizAttempt`. This way, when `Deck` is persisted to disk, we also persist the list of `QuizAttempt` for that deck together with it. Also, `QuizAttempt` is only ever used together with `Deck` so it made sense to store list of `QuizAttempt`s as an attribute of `Deck`."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#### 4.3.3 Statistics Manager"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "geoboom"
        },
        "content": "I wrote the `StatisticsManager` singleton class to encapsulate all app-related event logs. Whenever the `StatisticsManager` class is created, a `LOGIN` event is appended to its internal event log. Whenever `cleanup()` is called on `StatisticsManager`, a `LOGOUT` event is called. Each event also has an associated timestamp. Through the log of events, statistics like average time spent on app, last login time, etc can be computed on demand."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "geoboom"
        },
        "content": "An instance of `StatisticsManager` is instantiated in the constructor of `LogicManager` and destroyed when `cleanup()` is called on `LogicManager`. It makes the most sense to call these lifecycle operations in these parts of `LogicManager` as they parallel the opening and closing lifecycle of the app."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 5. Documentation, logging, testing, configuration, dev-ops"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 6. Appendix: Requirements"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 6.1 Product scope"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "A person that:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- wants to learn and practice a language"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- wants to remember the meaning and spelling of words in a new language"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- prefers question based testing to learn a language"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- prefer desktop apps over other types of apps"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- is able to type fast"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- prefers typing to using a mouse"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Value proposition**: helps users learn a language better through a flashcard system and allows users to track their"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "leaning progress"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 6.2 User stories"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​  | I want to …​                              | So that I can…​                                                |"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| -------- | -------- | ----------------------------------------- | -------------------------------------------------------------- |"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "| `* * *`  | new user | see usage instructions                    | refer to instructions when I forget how to use the application |"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "| `* * *`  | user     | add a Word-Meaning pair                   | populate the list with words and their translations            |"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | delete a Word-Meaning pair                | delete an unwanted entry                                       |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | edit a Word-Meaning pair                  | edit an entry                                                  |"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | access a Dictionary of Word-Meaning pairs | refresh my understanding of the words                          |"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | create a question                         | test my understanding of a word                                |"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | create an open-ended question             | test my spelling and understanding of the word                 |"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | delete a question                         | delete an unwanted entry                                       |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | edit a question                           | delete an unwanted entry                                       |"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | access the list of questions              | view all the questions                                         |"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | create a quiz from the pool of questions  | attempt the questions                                          |"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user     | submit the quiz                           | see my results                                                 |"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user     | view statistics of the quiz               | gauge my strengths and weaknesses                              |"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "| `* *`    | user     | view past quiz scores                     | know how I performed for each quiz                             |"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user     | test my spelling                          | learn how to spell the words correctly                         |"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 6.3 Use cases"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "(For all use cases below, the **System** is `GreenTea` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 1: View help**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests help"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2.  GreenTea returns a message explaining how to access the help page with the link to the Official UserGuide"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 2: Add a new entry**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to add a new entry"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea add the new entry"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- 1a. The entry is invalid"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - 1a1. GreenTea shows an error message"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- 1b. The entry is valid."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 3: List all entries**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to see the list of entries"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea shows a list of entries"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 4: Edit an entry**"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to edit an entry with updated fields via the given index"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea updates entry with new fields"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- 1a. User gives an invalid index"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - 1a1. GreenTea returns an error message"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 5: Delete an entry**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to list entries"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea shows a list of entries"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "3.  User requests to delete a specific entry in the list via the given index"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4.  GreenTea deletes the entry"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- 3a. The given input does not match the format"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - 3a1. GreenTea shows an error message"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- 3b. The given index is invalid."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - 3b1. GreenTea shows an error message."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**Use case 6: Clear decks**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "1.  User requests to clear decks"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "2.  GreenTea clears all decks"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Use case 7: Play a Quiz**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. User requests to play a quiz for a particular deck"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. GreenTea starts the quiz"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. User answers each question and completes the quiz"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4. GreenTea provides the score and results of the quiz, and saves the results"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Use case 8: Stop a Quiz**"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. User requests to play a quiz for a particular deck"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. GreenTea starts the quiz"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. User stops the quiz"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4. GreenTea stops the quiz and does not save the results"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Use case 9: View Statistics**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. User requests to view statistics of quizzes played so far for a particular deck, or across all decks"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. GreenTea displays the statistics accordingly"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- 9a. The given index is invalid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - 9a1. GreenTea shows an error message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Use case 10: Exit**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to exit program"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea exits"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 6.4 Non-Functional Requirements"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "1.  Green Tea should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "2.  Green Tea should be able to hold up to 1000 entries in a deck without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "4.  Green Tea should have a user interface that is intuitive enough for new users to navigate easily."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "5.  Any interface between a user and the system should have a maximum response time of 2 seconds."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "6.  Green Tea should be free to download and use."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "7.  Green Tea should be able to function without internet connection."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "8.  Any reused code should be acknowledged in the README."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 6.5 Glossary"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- **Deck**: A collection of entries"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- **Entry**: A word and its translation"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- **Word bank**: A collection of decks"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## 7. Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "testers are expected to do more *exploratory* testing to understand the app better."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "### 7.1 Launch and shutdown"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Initial launch"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have GreenTea.jar downloaded and copied into an empty folder"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Double-click the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "   Expected: Shows the GUI with a set of sample decks. The window size may not be optimum."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Saving window preferences"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.2 Getting Help"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Displays a guide for all commands."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Launch GreenTea succesfully."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test case: `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: A help window pops up and provides a link to the Official UserGuide"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.3 Creating a Deck"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Creating a deck while all decks are displayed"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Launch GreenTea successfully"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test Case: `new Japanese Animals`\u003cbr\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Expected: an empty Deck named Japanese Animals created and displayed in the DeckList panel. Status message to say \"New deck added: Japanese Animals\""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Other incorrect commands:"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `new` without providing the name of the deck"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `Japanese Animals` without providing the key word `new`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.4 Removing a deck"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Removing a deck while all decks are displayed"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Multiple decks in the list."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1.  Test case: `remove 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Expected: First deck is removed from the list. Status message shown to confirm that the deck has been deleted."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2.  Test case: `select 1` then `remove 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Expected: First deck is removed from the list. Status message shown to confirm that the deck has been deleted."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    The tab panel, previously showing the entries of deck 1, will show the start panel."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3.  Test case: `remove 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Expected: No deck is removed. Error details shown in the status message."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4.  Other incorrect remove commands to try:"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `remove` without providing index"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `remove asdf` providing an invalid index"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    - `remove x` (where x is a positive integer larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "      Expected: Similar to previous test case 4"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.5 Creating an Entry"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Creating an entry in a selected deck"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have a deck present"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test Case: `select 1` and then `add w/Hola t/Hello`\u003cbr\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Expected: An entry (Hola, Hello) would be added to Deck 1, displayed in the Entries panel. Status message to say \"New entry added: hola Translation: hello\""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Other incorrect commands to try:"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `add w/Hola t/Hello` without selecting a deck before"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `add w/Hola` without providing its word "
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `t/Hello` without providing its translation"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.6 Editing an Entry"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Editing an existing entry in a particular deck"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have a deck with entries present"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test Case: `select 1` and then `edit 2 t/hello there`\u003cbr\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: Entry 2 in Deck 1 will have its translation edited to \"hello there\", and will be reflected in the entries panel."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Edited Entry: hola Translation: hello there\""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Test Case: `select 1` and then `edit 2 w/hola amigos`\u003cbr\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: Entry 2 in Deck 1 will have its word edited to \"hola amigos\", and will be reflected in the entries panel."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Edited Entry: hola amigos Translation: hello there\""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " 3. Test Case: `select 1` and then `edit 2 w/hola amigos t/hello friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: Entry 2 in Deck 1 will have its word and translation edited to \"hola amigos\" and \"hello friends\" respectively,"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   and will be reflected in the entries panel."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Edited Entry: hola amigos Translation: hello friends\""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   "
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " 4. Other incorrect commands to try:"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `edit 2 t/hello there` without selecting a deck first"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `edit w/hola amigos` without providing index"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `edit 2 w/` without providing word"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `edit 2 t/` without providing translation"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.7. Playing and Stopping a Quiz"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Playing a Flashcard Quiz with a particular deck"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have a deck with entries present, preferably multiple entries"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test Case: `select 1` and then `/play`\u003cbr\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: App will switch to the Quiz tab, and will display the first translation to be answered and various statistics."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Playmode started\" "
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   "
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Test Case: after entering PlayMode, answer the question by entering the answer on the command line\u003cbr\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: Display will be updated to show the next question, as well as the previous answers and questions"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Your answer was: hola\""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   "
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. Test Case: after entering PlayMode, enter `/stop`\u003cbr\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Expected: PlayMode will be stopped and will exit the quiz. The score and remarks will be displayed. "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   Status message to say \"Playmode stopped! Your score was not recorded!\""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   "
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4. Test Case: after entering Playmode, finish the quiz by answering all the questions\u003cbr\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Expected: Playmode will be stopped and will exit the quiz. The score and remarks will be displayed."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Status message to say \"Your score was 3/3\""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "   "
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "5. Other incorrect commands to try:"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `select 1` and then `play` instead of `play`"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - `\\play` without selecting a deck first"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    - While in PlayMode, `stop` instead of `/stop`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.8 Viewing Statistics"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Viewing the statistics (e.g. score and average) of a selected deck or all decks"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have multiple decks with entries, with quizzes played before"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. Test Case: `stats`\u003cbr\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Expected: Display will switch to the Statistics tab, and will display statistics of all quiz performances"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Status message to say \"No deck / invalid deck ID selected. Showing statistics across all decks.\""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Test Case: `stats 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Expected: Display will switch to the Statistics tab, and will display statistics of Deck 1"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Status message to say \"Viewing statistics for deck Spanish (id\u003d1)\""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### 7.9 Saving data"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Dealing with missing data files"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisites: Have a deck with entries and then close the application"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1. The data file is located at /data, wordbank.json. The deck you just created should be visible in the data file"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Delete the data file"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. Launch the application again. Green Tea should display a list of sample decks."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Dealing with corrupted data files"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Prerequisite: Have a deck with entries and then close the application"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "1. The data file is located at /data, wordbank.json."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Change \"decks\" on line 2 of the data file to \"ecks\", in order to corrupt the data file."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. Launch the application again. Green Tea should display an empty deck list."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "4. Add a deck to Green Tea then close the application. The data file should now be in the correct format."
      }
    ],
    "authorContributionMap": {
      "geoboom": 118,
      "vigneshbhuvan-nus": 180,
      "IlyaRin": 179,
      "-": 225,
      "gabrielsimbingyang": 308
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Team Name: AY2021S1-CS2103T-T09-4 Since: August 2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [1. What is GreenTea? (Gabriel)](#1-what-is-greentea-gabriel)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [2. About This Document (Gabriel)](#2-about-this-document-gabriel)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- [3. Getting Started (Gabriel and Vignesh)](#3-getting-started-gabriel-and-vignesh)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- [4. Using This Guide (Melanie)](#4-using-this-guide-melanie)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - [4.1 Symbols](#41-symbols)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - [4.2 Command Format](#42-command-format)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [4.2.1 Arrowed brackets](#421-arrowed-brackets)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [4.2.2 Square brackets](#422-square-brackets)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- [5. Features](#5-features)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  - [5.1 Deck Commands (Melanie)](#51-deck-commands-melanie)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.1.1 Creating a deck: new](#511-creating-a-deck-new)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.1.2 Removing a deck: remove](#512-removing-a-deck-remove)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.1.3 Selecting a deck: select](#513-selecting-a-deck-select)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [5.2 Entry Commands (Gabriel)](#52-entry-commands-gabriel)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - [5.2.1 Adding a new entry: add (Vignesh)](#521-adding-a-new-entry-add-vignesh)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - [5.2.2 Editing an entry: edit (Vignesh)](#522-editing-an-entry-edit-vignesh)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - [5.2.3 Deleting an entry: delete (Vignesh)](#523-deleting-an-entry-delete-vignesh)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [5.3 Play Commands (Georgie)](#53-play-commands-georgie)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.3.1 Playing a game (Georgie)](#531-playing-a-game-georgie)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.3.2 Stopping a game (Georgie)](#532-stopping-a-game-georgie)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.3.3 Answering a question (Georgie)](#533-answering-a-question-georgie)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [5.4 Extra Commands (Georgie)](#54-extra-commands-georgie)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.4.1 Viewing help: help](#541-viewing-help-help)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - [5.4.2 Exiting the program: exit](#542-exiting-the-program-exit)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  - [5.5 Statistics (Melanie)](#55-statistics-melanie)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- [6. FAQ (Gabriel \u0026amp; Melanie)](#6-faq-gabriel--melanie)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- [7. Command Summary (Gabriel)](#7-command-summary-gabriel)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# 1. What is GreenTea? (Gabriel)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "GreenTea is a **desktop app for learning a new language, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). This app is great for users who wish to optimise their time learning a new language,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "but often struggle due to the difficulty of remembering new vocabulary. For many learners, vocabulary remains the most challenging aspect of learning a new language."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "We felt that we could help learners struggling with vocabulary to learn the language more efficiently."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Therefore, GreenTea uses a proven memory retention system known as the [Leitner System](https://jessewhelan.medium.com/using-the-leitner-system-to-improve-your-study-d5edafae7f0)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "and implements it in the context of a FlashCard game."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Fun Fact:** You may be wondering, why did we choose the name GreenTea? Well, in the initial stages of development, the app was intended for users looking to learn Japanese, hence the name GreenTea."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Although the application now allows for the learning of [many languages](http://www.unicode.org/charts/index.html),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "we kept the name GreenTea to denote the cultural journey a user undertakes when using this application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "In this User Guide (UG), you will learn about the various commands and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "actions that would allow you to use GreenTea seamlessly and have an enjoyable journey with it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/1EmptyGUI.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Figure 1. GreenTea\u0027s Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# 2. About This Document (Gabriel)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Welcome to the GreenTea User Guide!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "We at GreenTea are happy that you have taken your first few steps towards optimising your learning. We at GreenTea know that"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "learning a new language can be **hard** and **intimidating**. Trust us when we say we know **exactly** what you\u0027re"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "going through and we feel **frustrated** just as much you do."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "That\u0027s why here at GreenTea, we have come up with this neat"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "user guide to help **you** hit the ground running. With this foolproof User Guide, learning a new"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "language will be as relaxing as drinking a hot cup of GreenTea."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# 3. Getting Started (Gabriel and Vignesh)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Greetings! This chapter will be on helping you get started with using GreenTea. In this chapter,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "we will be covering installation, explanation of the GUI and basic commands needed to use GreenTea."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Before you can start using GreenTea, you will need to ensure that [Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) is installed on your computer."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "To start using GreenTea:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1. Visit the GreenTea Releases Page [here](https://github.com/AY2021S1-CS2103T-T09-4/tp/releases)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2. Download GreenTea.jar from the latest release"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3. Once downloaded, copy the jar file to your folder of choice (we recommend on your desktop!)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4. Double-Click the file to start the application. The GUI should appear in a few seconds and it should look like Figure 2."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "![GreenTea](images/user-guide/1EmptyGUI.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 2. GreenTea\u0027s GUI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Before we get started with the program, let us first understand the GUI of GreenTea. We shall use an annotated version of Figure 2 to explain it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/3EmptyGUIWithAnnotation.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 3. Annotated GUI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "We understand that you might be curious about each part of the GUI, don\u0027t worry, in this chapter we will briefly look through"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "every part of the GUI."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "There are four main components to the GUI. The deck list, the tab panels, the result display and the command box"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "1.  `Deck List` - The deck list displays all the decks that you currently have in GreenTea."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    A deck is a list of entries and an entry consists of a word and a translation. It will update as you keep adding decks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "2.  `Tab Panels` - The main features of GreenTea are separated into tabs. The tabs will change automatically, depending on your"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    commands, so you do not need to worry about changing the tabs manually. GreenTea currently has four different tabs."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    1. `Start Tab`: Consists of the welcome page that is shown on startup of the application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    2. `Entries Tab`: Displays all the entries of a selected deck."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    3. `Quiz Tab`: Displays the current."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    4. `Statistics Tab`: Displays the score of your past attempts of the current selected deck or overall."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "3.  `Result Display` - The result display is where the outcome of your commands are shown. GreenTea will feedback to you if your command has"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    been successfully carried out, or if there are errors in your command formats."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "4.  `Command Box` - The command box is where you type in your commands. Pressing **enter** on your keyboard will execute the commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "5.  Try typing these commands to start playing with GreenTea"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `new Japanese Animals`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/4JapaneseAnimalDeck.PNG)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 4. New deck called Japanese Animals"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should now look like Figure 4. However, we have rewritten the exact command that we entered, into the `Command Box`. We will be"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    doing this for the rest of the document as well!"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    The previous command that you entered created a new Deck in GreenTea called `Japanese Animals`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Notice that the Deck List has been updated to include a new Deck called `Japanese Animals` with an index `1`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `select 1`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/5SelectDeckExample.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 5. Selecting the first deck in the list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should now look like Figure 5."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    The previous command that you entered made GreenTea `select` the deck with index `1` which happens to be the Deck"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    `Japanese Animals` that you have created previously. Notice that the current tab has automatically changed to the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Entries Tab. The Entries Tab is empty because there are currently no entries in `Japanese Animals`. Let\u0027s fix that"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    shall we?"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `add w/Dolphin t/Iruka`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/6AddEntryExample.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 6. Adding an Entry"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should now look like Figure 6."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    The previous command that you entered added a new Entry into the selected deck. The entry consists of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    the word `Dolphin` and the translation `Iruka`. Notice that the Entries Tab, which displays the current selected deck,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    has updated accordingly. Now, let us try editing the entry using the japanese characters for `Dolphin` instead"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    of the translation `Iruka`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `edit 1 t/イルカ`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/7EditEntryExample.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 7. Editing an entry"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should look like Figure 7."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    The previous command that you entered modified the translation of the entry from `Iruka` to `イルカ`. Notice that now the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    first entry in the entries tab has the word `Dolphin` and the translation `イルカ`. Congratulations! You have"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    now created a brand new deck called `Japanese Animals` with a new entry of the word `Dolphin` and the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    translation `イルカ`. Try adding a few more entries into GreenTea!"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "6.  Hopefully you have written a few more entries into GreenTea. We went ahead and added two new entries into the Deck"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    `Japanese Animals`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/8AdditionalEntriesJapanese.PNG)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 8. Added more entries into `Japanese Animals`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 8 is a screenshot of our latest Deck containing the new entries that we have written."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    Now, let us try to play a game of FlashCards to memorise what we have written."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Note than in our application, we use the terms Flashcards and Quizzes"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    interchangeably. Try typing and entering the following commands into GreenTea."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `/play`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/9PlayJapaneseDeck.PNG)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 9. Playing a Game of Flashcards"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should now look similar to Figure 9. However, the translation given on the left side of the Quiz Tab might be different"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    depending on the entries you have written into `Japanese Animals`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    The command you entered previously had switched GreenTea into Quiz mode. This means that all commands written from now on"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    will be treated as answers to the question given by GreenTea. Also, note that the tab had switched to the Quiz Tab."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    From Figure 9, we can see that GreenTea is asking us the question \"What is the english word for the translation `イルカ`?\" We"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    already know that the correct word is `Dolphin`. However, let us try typing a wrong answer for example`dog`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/10WrongAnswer.PNG)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 10. Wrong answer given"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    GreenTea has accepted the answer we had given it and has updated the translation shown on the Quiz Tab. Do take"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    note that the right side of the Quiz Tab displays your history of answers to the quiz including the translation,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    the correct word/answer as well as the given answer."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Finishing the quiz by answering the rest of the questions will bring you out of Quiz mode and you would be able"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    to use your regular commands such as `play` or `edit` again."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Try playing the quiz a few more times!"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "7.  Have you tried quizzing yourself a few more times? Aren\u0027t you curious about your progress so far? Thankfully, GreenTea has been"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    keeping track of your scores in the background and can display your statistics in the form of a graph. Try typing the following commands"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    into GreenTea!"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    - `stats 1`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ![GreenTea](images/user-guide/11Statistics.PNG)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Figure 11. Statistics of Deck 1"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Your screen should now look similar to Figure 11. The previous command that you entered changed the current tab"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    into the Statistics Tab of Deck `1` which refers to the Deck `Japanese Animals`. In this tab, you can see"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    your score history as well as the time stamp of each attempt. Based on our progression, we think we need a"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    little bit more practise with our deck!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "8.  Congratulations! We have come to the end of this chapter. We hope that you have learnt the basics of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    using GreenTea but if you are still itching to bring your learning to the next level, there are still a ton of"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    commands with complete explanations to learn in [Chapter 5](#5-features)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "# 4. Using This Guide (Melanie)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "In this chapter, we will get familiar with the symbols and command format used in this user guide."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Before progressing further, we strongly recommend going through [Chapter 3](#3-getting-started-gabriel-and-vignesh) first."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## 4.1 Symbols"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: This symbol represents important information"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":bulb: This symbol represents additional information or fun facts"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## 4.2 Command Format"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Every feature can be accessed with a command and every command has a certain format that"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "has to be followed. The following is an explanation of how commands are described in this document."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 4.2.1 Arrowed brackets"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Words in `\u003cArrowed Brackets\u003e` are compulsory inputs supplied by you. They are generally words or translations that"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "are unique to each input."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "E.g `new \u003cNAME OF NEW DECK\u003e` is a command that creates a new deck with the input, `NAME OF NEW DECK`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 4.2.2 Square brackets"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Words in `[Square Brackets]` are optional inputs. They may or may not be added but **at least one** is required"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "E.g The edit command `edit 1 [w/word] [t/translation]` can be written as `edit 1 [w/word]` or `edit 1 [t/translation]`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "geoboom"
        },
        "content": "or `edit 1 [w/word] [t/translation]` **but cannot be written as** `edit 1`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# 5. Features"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "In this chapter, we will be going into detail of GreenTea\u0027s features, along with their command format and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "relevant examples."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## 5.1 Deck Commands (Melanie)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "As mentioned earlier, decks are the foundation of GreenTea. A deck is simply a list of entries you write into GreenTea. A deck can be your favourite Korean Dramas or a list of Japanese Words."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.1.1 Creating a deck: `new`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Creates a new empty deck with given name."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `new \u003cNAME OF NEW DECK\u003e`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `new Korean Dramas`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `new Japanese Words`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/12CreatingADeck.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 12. Result of creating new decks"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The name of the deck cannot be more than 100 characters long."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":information_source: **Note:** We have rewritten the exact command that we entered, into the `Command Box`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.1.2 Removing a deck: `remove`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Removes a deck with the given index."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `remove \u003cINDEX OF DECK\u003e`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "To get the index of a deck, you may view it on the GUI. It would be the number displayed beside a particular deck."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `remove 1`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Before deck 1 is removed:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/13RemovingADeckBefore.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Figure 13: GUI before deck 1 is removed"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "After deck 1 is removed:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/14RemovingADeckAfter.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Figure 14. GUI after deck 1 is removed"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.1.3 Selecting a deck: `select`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Selects a deck with the given index and lists all of its entries."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `select \u003cINDEX OF DECK\u003e`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The index of the deck is the number displayed it on the user interface."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `select 1`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Before deck 1 is selected:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/15SelectingADeckBefore.png)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 15: GUI before deck 1 is selected"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "After deck 1 is selected:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/16SelectingADeckAfter.PNG)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 16: GUI after deck 1 is selected"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## 5.2 Entry Commands (Gabriel)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Entries are what make up a deck. They are the words or phrases that you wish to memorise in GreenTea."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "An entry is made up of two parts; the `word` and the `translation`. The `word` is written in the"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "language you are most familiar and the `translation` is written in the language you wish to learn. In"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "this User Guide, we will be assuming the language for `word` will be in English."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Before you start giving entry commands, remember to [select a deck first!](#513-selecting-a-deck-select)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":bulb: Fun fact: Did you know GreenTea supports over 100 languages including Telugu, Welsh and Xamtanga? To"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "see if your chosen language is supported, click [here!](http://www.unicode.org/charts/index.html)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.2.1 Adding a new entry: `add` (Vignesh)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Adds a new entry with the given word and translation."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `add w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `add w/Fruits t/果物`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `add w/Phone t/電話`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/17AddingAnEntry.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 17: Result of adding an entry"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "A word cannot be more than 200 characters long. A translation cannot be more than 200 characters long"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":information_source: **Note:** We have rewritten the exact command that we entered, into the `Command Box`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.2.2 Editing an entry: `edit` (Vignesh)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Edits an entry with the given index using the given word or translation or both."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `edit 1 [w/word] [t/translation]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The word and translation are both optional parameters. You can supply one parameter or both parameters but"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "you must supply at least one."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `edit 1 w/hello`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `edit 1 t/こんにちは`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "- `edit 2 w/world t/世界`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/18EditingAnEntry.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 18. Result of editing an entry"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.2.3 Deleting an entry: `delete` (Vignesh)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Deletes the entry with the given index."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `delete \u003cINDEX\u003e`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `delete 1`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Before entry 1 is deleted:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/19DeletingAnEntryBefore.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 19. GUI before entry 1 is deleted"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "After entry 1 is deleted:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/20DeletingAnEntryAfter.png)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 20. GUI after entry 1 is deleted"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## 5.3 Play Commands (Georgie)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Memory retention is the main goal of GreenTea. Thankfully, we have gotten rid of all"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "the complexities behind starting a new FlashCard game. In fact, there are only two commands in this section, `/play` and"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "`/stop`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.3.1 Playing a game (Georgie)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Plays the current deck. GreenTea will do a shuffle of the current deck and asks you what is the"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "the english `word` of a randomly selected `translation`. Your score will be recorded and displayed"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "to you at the end of the game."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `/play`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The slash `/` in the command."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Before you start playing a new game, remember to [select a deck first!](#513-selecting-a-deck-select)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":information_source: **Note:** We have rewritten the exact command that we entered, into the `Command Box`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/21PlayAGame.png)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 21. Result of playing a game"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.3.2 Stopping a game (Georgie)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Stop the current game prematurely. Note the slash `/` in the command."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `/stop`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Before you start playing a new game, remember to [select a deck first!](#513-selecting-a-deck-select)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/22StopAGame.png)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Figure 22. Result of stopping a game"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.3.3 Answering a question (Georgie)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "GreenTea is extremely user friendly! After starting a game, any word given by you will be considered as an answer other than the input `/stop`. There"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "are no special command words or format required!"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `[Anything!]`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Please make sure that your answer contains at least one character!"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "![GreenTea](images/user-guide/23AnsweringAQuestion.png)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 23. Answering a question"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## 5.4 Extra Commands (Georgie)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "These are some extra commands that you can access at any point in the application except when"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "you are currently playing a game."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.4.1 Viewing help: `help`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Shows a cheat-sheet of commands in addition to a link to this User Guide."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "![GreenTea](images/user-guide/HelpCommand.PNG)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 24. Result of Opening Help Window"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### 5.4.2 Exiting the program: `exit`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Result: Program will be closed"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## 5.5 Statistics (Melanie)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Statistics are how you get to see your own progression as you continuously build and play GreenTea."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The statistics tab displays the scores of games up to your last 10 attempts in the form of"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "a line graph."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "You can view the statistics of a single deck or the statistics across all your decks."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "To view statistics across **all** decks:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/24StatsAllDecks.PNG)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 25. Result of viewing statistics across all decks"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "To view statistics of **a single deck**:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Format: `stats \u003cINDEX\u003e`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "- `stats 1`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "![GreenTea](images/user-guide/25StatsOneDeck.PNG)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Figure 26. Result of viewing statistics of a single deck"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "In order to view your statistics, you must first [play a game!](#531-playing-a-game-georgie)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "# 6. FAQ (Gabriel \u0026 Melanie)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Q**: Will my score be recorded if I stop a game before I finish it?\u003cbr\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**A**: Your score will be displayed to you after you pass a `stop` command but it will not be recorded in the statistics tab"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Q**: Will all my data be saved when I exit Green Tea? \u003cbr\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**A**: Yes. All your data will be stores in a file called wordbank.json. This file can be found in the same folder where"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "you first installed Green Tea\u0027s [jar file](#3-getting-started-gabriel-and-vignesh)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Q**: Where do I go to if I need help? \u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "**A**: Green Tea has an [issue page](https://github.com/AY2021S1-CS2103T-T09-4/tp/issues) where we will be monitoring for"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "any problems related to Green Tea. Feel free to create an issue to let us know if you require help!"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "# 7. Command Summary (Gabriel)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| Action         | Format \u003cimg width\u003d00/\u003e                  | Examples                      | Remarks                                                                |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| -------------- | --------------------------------------- | ----------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **New**        | `new \u003cNAME OF NEW DECK\u003e`                | `new Japanese-Animals`        | Creates a New Deck With the Given Name                                 |"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Remove**     | `remove \u003cINDEX OF DECK\u003e`                | `remove 1`                    | Removes the Deck with the Given Index                                  |"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Select**     | `select \u003cINDEX OF DECK\u003e`                | `select 1`                    | Selects the Deck with the Given Index and Lists All It\u0027s Entries       |"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Add**        | `add w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e`          | `add w/Hello t/hola`          | Adds an Entry with the Given Word and Translation to the Selected Deck |"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Edit**       | `edit \u003cINDEX\u003e [w/word] [t/translation]` | `edit 1 w/hello t/こんにちは` | Edits the Entry with the Given Index Using the Given Values            |"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Delete**     | `delete \u003cINDEX\u003e`                        | `delete 3`                    | Deletes the Entry with the Given Index                                 |"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Play**       | `/play`                                 |                               | Starts a New FlashCard Game with the Selected Deck                     |"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Stop**       | `/stop`                                 |                               | Stops an Existing Game                                                 |"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Answer**     | `[Anything!]`                           |                               | Answers a Question                                                     |"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Statistics** | `stats`                                 | `stats`                       | Shows Statistics of all Decks combined                                 |"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Statistics** | `stats \u003cINDEX\u003e`                         | `stats 1`                     | Shows Statistics of a Particular Deck \u003cINDEX\u003e                          |"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Clear**      | `clear`                                 |                               | Deletes All Decks and Entries                                          |"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "| **Help**       | `help`                                  |                               | Opens Our User Guide in the Application                                |"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Exit**       | `exit`                                  |                               | Saves and Exits the Program                                            |"
      }
    ],
    "authorContributionMap": {
      "geoboom": 28,
      "vigneshbhuvan-nus": 62,
      "IlyaRin": 135,
      "gabrielsimbingyang": 251,
      "-": 85
    }
  },
  {
    "path": "docs/diagrams/AddEntrySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandModeParser\" as CommandModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \"toAdd:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[-\u003e LogicManager : execute(\"Add w/word t/translation\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e CommandModeParser : parseCommand(\"Add w/word t/translation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandModeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommandParser --\u003e CommandModeParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e AddCommandParser : parse(\"w/word t/translation\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand --\u003e AddCommandParser : toAdd"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommandParser --\u003e CommandModeParser : toAdd"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommandParser -[hidden]-\u003e CommandModeParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser --\u003e LogicManager : toAdd"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandModeParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand -\u003e Model : addEntry(toAdd)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand -\u003e Model : replaceEntryList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand -\u003e Model : setCurrentView(view.ENTRY_VIEW)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 73
    }
  },
  {
    "path": "docs/diagrams/AnswerCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "sprite $rake [16x16/8] {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0005555jj5555000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jjeejjeejj000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Answer is not \"/play\"])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if() then ([Answer is not \"/stop\"])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Create a new answer command based on user input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Perform relevant answer command actiom \u003c$rake\u003e ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    else ([Answer is \"/stop\"])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    : Switch Logic Manager back to Command Mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    : Extract current score from Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    : Display a message to the UI result box indicating the current score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Answer is \"/play\"])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw currently in play mode command exception;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 27
    }
  },
  {
    "path": "docs/diagrams/AnswerCommandActivityDiagramTwo.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Answer is correct])"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Update Score in QuizAttempt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else(             [Answer is wrong])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Leitner has unanswered questions])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Model updates next question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Display next question on the quiz tab of the UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Display previous question, previous answer given"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        and correct answer on the right side of the quiz tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        else ([Leitner has no more unanswered question])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Extract current score from Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Display a message to the UI result box indicating the current score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 18
    }
  },
  {
    "path": "docs/diagrams/AnswerSequenceDiagramPlayMode.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":PlayModeParser\" as PlayModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":AnswerCommandParser\" as AnswerCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \"a:AnswerCommand\" as AnswerCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e PlayModeParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate PlayModeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create AnswerCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "PlayModeParser -\u003e AnswerCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AnswerCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommandParser --\u003e PlayModeParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AnswerCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "PlayModeParser -\u003e AnswerCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AnswerCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create AnswerCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommandParser -\u003e AnswerCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AnswerCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommand --\u003e AnswerCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AnswerCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommandParser --\u003e PlayModeParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AnswerCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommandParser -[hidden]-\u003e PlayModeParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "destroy AnswerCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "PlayModeParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate PlayModeParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e AnswerCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate AnswerCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e AnswerCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandResult --\u003e AnswerCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "AnswerCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate AnswerCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 69
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveWordBank(wordBank)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandModeParser\" as CommandModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":RemoveCommandParser\" as RemoveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \"d:RemoveCommand\" as RemoveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[-\u003e LogicManager : execute(\"remove 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e CommandModeParser : parseCommand(\"remove 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandModeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create RemoveCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e RemoveCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate RemoveCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommandParser --\u003e CommandModeParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate RemoveCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e RemoveCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate RemoveCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create RemoveCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommandParser -\u003e RemoveCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate RemoveCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommand --\u003e RemoveCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate RemoveCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommandParser --\u003e CommandModeParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate RemoveCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommandParser -[hidden]-\u003e CommandModeParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "destroy RemoveCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandModeParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e RemoveCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate RemoveCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommand -\u003e Model : removeDeck(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e RemoveCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandResult --\u003e RemoveCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "RemoveCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate RemoveCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "gabrielsimbingyang": 32
    }
  },
  {
    "path": "docs/diagrams/GeneralizedCommandAcitivityDiagramMoreOOP.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "sprite $rake [16x16/8] {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0005555jj5555000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jjeejjeejj000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":User enters command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Logic Manager is in Play Mode])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Parse user input via PlayModeParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Determine command word and arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if () then ([Command Word is \"/play\"])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw deck already in play mode command exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else ([Command Word is not \"/play\"])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Create command based on command word and arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Perform relevant actions \u003c$rake\u003e;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Logic Manager is not in Play Mode])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Parse user input via CommandModeParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Determine command word and arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Command Word and arguments are valid])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Create command based on command word and arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Perform relevant actions \u003c$rake\u003e ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else ([Command Word or arguments are not valid])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw invalid command format parse exception;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 38
    }
  },
  {
    "path": "docs/diagrams/GeneralizedCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "sprite $rake [16x16/8] {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000jj0000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0005555jj5555000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jjeejjeejj000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "000jj00jj00jj000"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "0000000000000000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":User enters command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Logic Manager is in Play Mode])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Parse user input via PlayModeParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Determine command word and arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if () then ([Command Word is \"/play\"])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw deck is already in play mode command exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else ([Command Word is not \"/play\"])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Create command based on command word and arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Perform relevant actions \u003c$rake\u003e;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Logic Manager is not in Play Mode])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Parse user input via CommandModeParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Determine command word and arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Command Word and arguments are valid])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Create command based on command word and arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Perform relevant actions \u003c$rake\u003e ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else ([Command Word or arguments are not valid])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw invalid command format parse exception;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 38
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class CommandModeParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class PlayModeParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package Statistics {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Statistics"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class StatisticsManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Event{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " String EventType"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager --\u003e\"1\" StatisticsManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StatisticsManager --\u003e\"1\" Statistics"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Statistics --\u003e\"*\" Event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager --\u003e\"1\" CommandModeParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e\"1\" PlayModeParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "PlayModeParser .\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Command .right\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Logic ...\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "gabrielsimbingyang": 22
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface ReadOnlyWordBank \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class WordBank"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Package Deck {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Package Entry {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Entry"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Translation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class UniqueEntryList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Deck"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class DeckName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class UniqueDeckList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Package View {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class CurrentView"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Package Play {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Package Scoring {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class BinaryScoring"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class QuestionAttempt"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class QuizAttempt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface Scoring \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Leitner"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class Score"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager ..up|\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager o--\u003e\"1\" WordBank"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model .\u003e ObservableList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager *-\u003e\"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UserPrefs .|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UniqueEntryList o-\u003e\"*\" Entry"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Entry *--\u003e\"1\" Word"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Entry *--\u003e\"1\" Translation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UniqueDeckList o--\u003e\"*\" Deck"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Deck *--\u003e\"1\" DeckName"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Deck *--\u003e\"1\" UniqueEntryList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "BinaryScoring ..up|\u003e Scoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuizAttempt *--\u003e\"1\" Score"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuizAttempt *-\u003e\"*\" QuestionAttempt"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuizAttempt ..\u003e Scoring"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuestionAttempt *-\u003e\"1\" Score"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Score --up[hidden]\u003e Leitner"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UniqueDeckList -[hidden]\u003e UniqueEntryList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank .|\u003e ReadOnlyWordBank"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank *--\u003e\"1\" UniqueEntryList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank *--\u003e\"1\" UniqueDeckList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBank -\u003e Entry: has filtered list of"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager *---\u003e\"0..1\" Leitner"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager *--\u003e\"0..1\" QuizAttempt"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager -\u003e Deck: has filtered list of"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ModelManager *---\u003e\"1\" CurrentView"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "gabrielsimbingyang": 54
    }
  },
  {
    "path": "docs/diagrams/PlayActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":User executes play command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then ([Logic Manager is not in Play Mode])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if() then ([A deck is selected in ModelManager])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if() then ([Deck is not empty])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Switch Logic Manager to Play Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Create and execute a new PlayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Create a new Leitner object and QuizAttempt object in ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Switch curret view to the quiz tab of the UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        : Display a success message to the result box of the UI indicating the start of the quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        else ([Deck is empty])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        :Throw empty deck command exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    else ([No deck is selected in ModelManager])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    :Throw no deck selected command exception;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Logic Manager is currently in Play Mode])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw application already in play mode command exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 23
    }
  },
  {
    "path": "docs/diagrams/SelectActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then([Command is in the correct format])"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if() then([Index is valid])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Update selected deck in ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Switch the current tab on the UI to the Entries tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Display entries of the selected deck on the Entries tab (if any);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Index is not valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw invalid index command exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "else([Command is not in the correct format])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":Throw invalid command format parse exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 15
    }
  },
  {
    "path": "docs/diagrams/SelectDeckSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandModeParser\" as CommandModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":SelectDeckCommandParser\" as SelectDeckCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \"toSelect:SelectDeckCommand\" as SelectDeckCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[-\u003e LogicManager : execute(\"select 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e CommandModeParser : parseCommand(\"select 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandModeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create SelectDeckCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e SelectDeckCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate SelectDeckCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommandParser --\u003e CommandModeParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate SelectDeckCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser -\u003e SelectDeckCommandParser : parse(\"select 1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate SelectDeckCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create SelectDeckCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommandParser -\u003e SelectDeckCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate SelectDeckCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand --\u003e SelectDeckCommandParser : toSelect"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate SelectDeckCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommandParser --\u003e CommandModeParser : toSelect"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate SelectDeckCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommandParser -[hidden]-\u003e CommandModeParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "destroy SelectDeckCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandModeParser --\u003e LogicManager : toSelect"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandModeParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e SelectDeckCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate SelectDeckCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand -\u003e Model : selectDeck(index \"1\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e SelectDeckCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand -\u003e Model : replaceEntryList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e SelectDeckCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand -\u003e Model : setCurrentView(view.ENTRY_VIEW)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model --\u003e SelectDeckCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandResult --\u003e SelectDeckCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "SelectDeckCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate SelectDeckCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 73
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface WordBankStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class JsonWordBankStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager o--\u003e WordBankStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankStorage .up.|\u003e WordBankStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankStorage .down.\u003e JsonSerializableWordBankStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonSerializableWordBankStorage ..\u003e JsonAdaptedDeck"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedDeck ..\u003e JsonAdaptedEntry"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedDeck ..\u003e JsonQuizAttempt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedEntry ..\u003e JsonAdaptedWord"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedEntry ..\u003e JsonAdaptedTranslation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonQuizAttempt ..\u003e JsonAdaptedQuestionAttempt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonQuizAttempt ..\u003e JsonAdaptedScore"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "gabrielsimbingyang": 19
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagramMoreOOP.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface WordBankDeckStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Interface WordBankQuizStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class JsonWordBankDeckStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager o--\u003e WordBankDeckStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StorageManager o--\u003e WordBankQuizStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankDeckStorage .up.|\u003e WordBankDeckStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankDeckStorage .down.\u003e JsonSerializableWordBankDeckStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonSerializableWordBankDeckStorage ..\u003e JsonAdaptedDeck"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankQuizStorage .up.|\u003e WordBankQuizStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonWordBankQuizStorage .down.\u003e JsonSerializableWordBankQuizStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonSerializableWordBankQuizStorage ..\u003e JsonAdaptedQuizAttempt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedQuizAttempt ..\u003e JsonAdaptedQuestionAttempt"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "JsonAdaptedQuizAttempt ..\u003e JsonAdaptedScore"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 34
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package Deck {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class DeckListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class DeckCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package Entry {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class EntryListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class EntryCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package Panels {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class QuizPanel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class ScorePanel"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class StartPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Class StatisticsPanel"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down-\u003e DeckListPanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down-\u003e EntryListPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down--\u003e QuizPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down-\u003e ScorePanel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down-\u003e StartPanel"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow *-down-\u003e StatisticsPanel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "DeckListPanel --\u003e DeckCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryListPanel --\u003e EntryCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow -|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuizPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StartPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ScorePanel --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StatisticsPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "DeckListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "DeckCard --|\u003e UiPart"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "DeckCard ..\u003e Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryCard ..\u003e Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "QuizPanel ..\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StatisticsPanel ..\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "gabrielsimbingyang": 35
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":WordBankParser\" as WordBankParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "participant \":VersionedWordBank\" as VersionedWordBank MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "LogicManager -\u003e WordBankParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate WordBankParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBankParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UndoCommand --\u003e WordBankParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "WordBankParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate WordBankParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UndoCommand -\u003e Model : undoWordBank()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Model -\u003e VersionedWordBank : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate VersionedWordBank"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "VersionedWordBank -\u003e VersionedWordBank :resetData(ReadOnlyWordBank)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "VersionedWordBank --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "deactivate VersionedWordBank"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "gabrielsimbingyang": 14
    }
  },
  {
    "path": "docs/diagrams/sequencediagram/PlayCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "User -\u003e UI: \"chinese\" //an answer"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "UI-\u003e WordBankParser: parseCommand(\"chinese\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "activate WordBankParser"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    alt isPlayMode"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankParser -\u003e Model:AnswerCommand(\"Chinese\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        activate Model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Model -\u003e : Check Answer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Model \u003c--: Return Result"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Model --\u003e WordBankParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deactivate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankParser --\u003e UI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        UI --\u003e User"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    else !isPlayMode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankParser --\u003e UI: ParserException(UNKNOWN_COMMAND)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deactivate WordBankParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        UI --\u003e User: Display Error Message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    end"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 25
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Participant \":WordBankParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ecp -\u003e ec ++: index, editPersonDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "docs/team/gabrielsimbingyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "title: Gabriel Sim\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "## Project: GreenTea"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "GreenTea is a desktop app for learning a new language, optimized for use via a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **New Feature**: Implemented the basic quizzing system including new commands such as the PlayCommand, StopCommand and AnswerCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "(Pull requests [\\#106](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/106) [\\#185](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/185))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * What it does: Allows the user to quiz themselves on the different entries they have added to the GreenTea."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Justification: This feature is essentially the core of the application. The entire application is built around this compulsory feature including other features such as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  statistics and switching tabs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Highlights: This implementation was incredibly difficult to implement because it utilised portions of logic, model and ui. Implementing this feature allowed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  me to understand the inner working of AddressBook and allowed me to greater help my teammates with their work by communicating to them what is and is not technically"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  feasible in this product. This enchancement also affected what code can be added to the future and what existing code can be removed. Modifying the implementation to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  allow the program to switch between play mode and command mode also required deep analysis of design alternatives."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Credits: I wrote this by myself but I utilized the existing commands created by my teammate, Melanie."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **New Feature**: Split the UI to hold both deck list and entry list. (Pull requests [\\#67](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/67))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * What it does: Allows the user to observe both the deck list and the entry list which is essential for GreenTea to be an intuitive application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Justification: This feature allowed the user to observe a more intuitive user interface. It also allowed the team to develop  the tabbing feature which meant"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  that more data/features can be stored in each of the tabs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Highlights: This implementation was difficult to implement because it required knowledge it utilised portions of logic, model and UI. Specifically, understanding how"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  obervablelist was used and modifying it was a challenging task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Credits: I wrote this by myself but I utilized the existing commands created by my teammate, Melanie."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026zFR\u003dfalse\u0026tabType\u003dauthorship\u0026tabAuthor\u003dgabrielsimbingyang\u0026tabRepo\u003dAY2021S1-CS2103T-T09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Team leader"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Helped other team members with their task and contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Kept the team on schedule by monitoring dashboard, issues , milestones and datelines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Ensured team members focused on goals during weekly group meetings"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Gave meaningful updates on my own progress to help teammates better understand the current state of the application"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    (Pull requests [\\#72](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/72))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Reported bugs and gave meaningful feedback to the team"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    (examples: [1](https://github.com/AY2021S1-CS2103T-T09-4/tp/issues/183), [2](https://github.com/AY2021S1-CS2103T-T09-4/tp/issues/40), [3](https://github.com/AY2021S1-CS2103T-T09-4/tp/issues/38))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Managed releases `v1.3` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Wrote additional tests for existing features such as PlayCommand, StopCommand, TestCommand and Leitner.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  (Pull requests [\\#188](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/188) [\\#185](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/185)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Updated the GUI color scheme"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  (Pull requests [\\#61](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/61) [\\#44](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/44))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Fix several critical bugs such as the Select Command bug and the Answer Command Bug"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  (Pull requests [\\#180](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/180) [\\#72](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/72))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added documentation for the Chapter 1, What is GreenTea [\\#126](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/126)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added documentation for the Chapter 2, About [\\#126](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/126)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added documentation for the Chapter 3, Getting Started [\\#126](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/126) [\\#189](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/189)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added documentation for the Chapter 8, FAQ  [\\#126](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/126)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added documentation for the Chapter 9, Command Summary  [\\#126](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/126)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Did tweaks to existing documentation of Chapter 4, Using this Guide [\\#189](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/189)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added several diagrams to the developer guide such as the logic uml diagrams"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    (Pull requests [\\#104](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/104) [\\#109](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/109))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Others:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * Added the Leitner System psuedo code for team reference"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    (Pull requests [\\#65](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/65))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/291), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/137), [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/384))"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 71
    }
  },
  {
    "path": "docs/team/geoboom.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "title: Georgie Lee\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## Project: Green Tea"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "GreenTea is a desktop app for learning a new language, optimized for use via a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **New Feature**: Implemented the statistics system, stats command, and performance tracking for each quiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Pull requests: [#125](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/125)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - What it does: Tracks performance for each quiz attempt / game played, last login time and lets user view this information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Justification: Allows users to better understand their strengths, weaknesses in words and quizzes and have a bird eye view of their general performance and other metrics."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - This feature was modereately hard to implement as implementing it should not modify / interfere too much with the existing codebase as this wasn\u0027t so much of a \"feature\" but rather a \"hook\" / \"middleware\" to track existing usage, just like Google Analytics for websites / mobile apps."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **New Feature**: Implement Leitner system and extensive test suites based on the boilerplate Leitner code my teammate Gabriel wrote."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Pull requests: [#233](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/233)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - What it does: Shuffles the order of the questions to show user based on their most recent attempt (if any, otherwise random shuffle)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Justification: Makes it so that the users get to do questions they are bad at to begin with to train recall. This is a proven neuroscience method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Highlights:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - Moderately complex to implement, especially the test code that needs to verifiy Leitner works in randomized trials and handles edge cases well."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "* **New Feature**: Create statistics panel (UI) and implement efficient algorithm to aggregate results of most recent 10 quiz attempts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Pull requests: [#205](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/205), [#139](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/139)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - What it does: Lets the user see their most recent 10 performance amongst all quiz or for a given quiz in a graph."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Justification: Displays statistics data in a meaningful and palatable way."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Highlights:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - I implement a `O(k*log(numQuizzes))` runtime algorithm to extract the latest `k (\u003d10)` attempts from `numQuizzes` lists of `QuizAttempts`. Wrote extensive randomized testing code to test the reliability and correctness of this algorithm. This algorithm is an improvement from the naive `O(numQuizzes*log(numQuizzes))` algorithm which resulted in a manifold performance boost."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - UI-wise, it was quick to implement as fxml has an easy-to-use linechart plotting API."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgeoboom\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Managed releases `v1.3` - `v1,4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Enhancements to existing features**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Add statistics panel, quizAttempts, questionAttempts, and statistics manager classes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Wrote unit tests for statistics related code."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Documentation**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - Wrote DG sections for leitner system (4.2.3) and data tracking (4.3)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - User Guide:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - Ported over initial user guide from docx -\u003e md"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    - Wrote user guide sections for `play` command and modified some parts of user guide related to statistics."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- **Contributions beyond the project team**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - Assisted in some forum issues [here](https://github.com/nus-cs2103-AY2021S1/forum/issues/1) and [here](https://github.com/nus-cs2103-AY2021S1/forum/issues/4)."
      }
    ],
    "authorContributionMap": {
      "geoboom": 62
    }
  },
  {
    "path": "docs/team/melaniengpeisee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "title: Melanie Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "## Project: Green Tea"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "GreenTea is a desktop app for learning a new language, optimized for use via a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **New Feature**: Implemented the deck system along with new commands (NewDeckCommand, RemoveDeckCommand, SelectDeckCommand)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  Pull requests: [\\#56](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/56)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  Commit: [\\AddSelectDeckCommand](https://github.com/AY2021S1-CS2103T-T09-4/tp/commit/bd036d7fc33d5fea091aeae658ab7967e1d8e010#diff-d126ae081f932363c3d9e4b8117d275191d41cee659ff81474b4d917c8530533)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * What it does: Allows the user to create decks and add entries to the deck."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Justification: Users can organize their entries better. Also allows the quizzing system to be implemented more easily."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Highlights: This feature was difficult to implement since it required entries to be embedded within decks. This means that"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                on top of adding new commands, original commands also had to be altered to accomodate the deck system."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                There was also many bugs that had to be fixed during the implementation of this feature such as existing commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                not working like they should (edit command)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                This feature required modifications to the ui component, model component, logic component and storage component."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                Most of my contributions for this feature was in the model and logic components and planning how to implement this feature."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                The ui component for this feature was handled by my teammate, Gabriel. The storage component was handled by my teammate, Vignesh"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Credits: *{I utilized the existing command format in Address Book 3 to write the command classes for new commands. I also utilized the person class in Address Book 3 to design the deck system}*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **New Feature**: Create tab panels in the GUI which will display the appropriate information to the user depending on the command given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  Pull requests: [\\#114](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/114) [\\#119](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/119)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * What it does: Allows users to see only what is necessary depending on the command given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Justification: Cleaner UI. More flexibility in how to display the quiz and statistics to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Highlights: Created a package in model called view. Commands will change the view which will in turn change the tabs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                There are 5 panels which are visible to the user (start, entry list, quiz, score and statistics)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                I created and designed the start, quiz and score panels. My teammate Georgie was in charge of the statistics panel."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                This feature required changes to be made to the logic, model and ui components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dIlyaRin\u0026tabRepo\u003dAY2021S1-CS2103T-T09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Managed releases `v1.3` - `v1,4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Change GUI to current form (Pull requests [\\#114](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/114), [\\#131](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/131))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Wrote additional tests for existing features to increase code coverage (Pull requests [\\#182](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/182), [\\#60](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/60))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Fixed several bugs (Pull requests [\\#181](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/181) [\\#177](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/177) [\\#138](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/138) [\\#128](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/128) [\\#88](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/88))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added documentation for section 4 (Using this guide) of user guide [\\#133](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/133)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added images and labelling for user guide [\\#144](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/144)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added documentation for section 1 (What is GreenTea) [\\#141](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/141)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added documentation for section 2 (About this document) [\\#141](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/141)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added documentation for section 5 (Features), deck commands and statistics section"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added prefaces to each section for the various components. [\\#200](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/200)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added NFRs [\\#200](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/200) [\\#12](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/12)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added documentation for Manual Testing [\\#200](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/200)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    * Added implementation details of the deck feature."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* PRs reviewed (with non-trivial review comments): [\\#52](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/52) [\\#94](https://github.com/AY2021S1-CS2103T-T09-4/tp/pull/94)"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 67
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Create a new `Remark` in `seedu.address.model.entry`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Simply add the following to [`seedu.address.ui.EntryCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/wordbank.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "IlyaRin": 2,
      "-": 391
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.entry.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        appParameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static void main(String[] args) { // test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonWordBankStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.WordBankStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing WordBank ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankStorage wordBankStorage \u003d new JsonWordBankStorage("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        storage \u003d new StorageManager(wordBankStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * userPrefs}. \u003cbr\u003e The data from the sample address book will be used instead if {@code"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * storage}\u0027s address book is not found, or an empty address book will be used instead if errors"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Optional\u003cReadOnlyWordBank\u003e addressBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ReadOnlyWordBank initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WordBank\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty WordBank\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            initialData \u003d new WordBank();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty WordBank\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            initialData \u003d new WordBank();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty WordBank\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logger.info(\"Starting WordBank \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logic.doCleanup(); // some clean up operations"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 19,
      "-": 154,
      "gabrielsimbingyang": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String LOG_FILE \u003d \"wordbank.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided can\u0027t be found\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided can\u0027t be found\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_NO_DECK_SELECTED \u003d \"Please select a deck first. Select \u003cindex\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_ENTRIES_LISTED_OVERVIEW \u003d \"%1$d entries listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_EMPTY_DECK \u003d \"Deck is empty!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "IlyaRin": 2,
      "-": 12,
      "gabrielsimbingyang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 3,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                                   given here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 9,
      "-": 136,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     *   Ignores case, and a partial word match is accepted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d 0; i \u003c wordsInPreppedSentence.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (wordsInPreppedSentence[i].toLowerCase().contains(preppedWord)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return contains;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 10,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.statistics.StatisticsManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Switches logic manager to play mode by modifying the PlayMode object and returning a Play"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a Play Command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws CommandException If there is no deck currently selected or if the deck is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Command initialisePlayMode() throws CommandException, ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Creates a Answer Command or a Stop Command depending on the input. If a Stop Command is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * created, isPlayMode is set to false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a Answer Command or a Stop Command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws CommandException If LogicManager if already in play mode."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Command createAnswerOrStopCommands(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns the WordBank."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see seedu.address.model.Model#getWordBank()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ReadOnlyWordBank getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of entries"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of entries"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Cleanup tasks that run right before app closes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void doCleanup();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the current view of the system to the UI"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    View getCurrentView();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Return the current shuffled quiz questions (Leitner)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Leitner getLeitner();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the statisticsManager object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    StatisticsManager getStatisticsManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the current questions that the user is at"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    int getCurrentIndex();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the current statistics deck id being displayed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    int getStatisticsDeckId();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the score of the most recent quiz taken by the user"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    double getLastScore();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 31,
      "IlyaRin": 21,
      "-": 48,
      "gabrielsimbingyang": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.CommandModeParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.PlayModeParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.statistics.StatisticsManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final CommandModeParser commandModeParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final PlayModeParser playModeParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private boolean isPlayMode \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.statisticsManager \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        commandModeParser \u003d new CommandModeParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        playModeParser \u003d new PlayModeParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        //starts play mode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (commandText.equals(\"/play\") \u0026\u0026 !isPlayMode) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return initialisePlayMode().execute(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        //creates AnswerCommand or StopCommand if in play mode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (isPlayMode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            command \u003d createAnswerOrStopCommands(commandText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            //create regular commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            command \u003d commandModeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            storage.saveAddressBook(model.getWordBank());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Command initialisePlayMode() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assert (!isPlayMode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (model.getCurrentDeck().getEntries().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            isPlayMode \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return playModeParser.parseCommand(\"/play\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Command createAnswerOrStopCommands(String commandText)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assert (isPlayMode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Command command \u003d playModeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (commandText.equals(\"/play\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                throw new CommandException(\"Already in play mode\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (commandText.equals(\"/stop\") || model.checkScore()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                isPlayMode \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ReadOnlyWordBank getAddressBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return model.getWordBank();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return model.getFilteredEntryList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //Methods called by the UI"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public View getCurrentView() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getCurrentView();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Leitner getLeitner() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getLeitner();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getCurrentIndex();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public int getStatisticsDeckId() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return model.getStatisticsDeckId();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsManager getStatisticsManager() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return statisticsManager;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double getLastScore() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return model.getQuizAttempt().getScore().getYourScore();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void doCleanup() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // TODO: save stats to json file on disk"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statisticsManager.doCleanup();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 29,
      "IlyaRin": 19,
      "-": 73,
      "gabrielsimbingyang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " * Clears GreenTea."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Green Tea has been cleared! You may continue to add new decks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.setWordBank(new WordBank());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.clearEntryList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setCurrentView(View.START_VIEW);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "IlyaRin": 4,
      "-": 19,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Word Bank as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/NewDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A command class to add a new deck to the word bank"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create an empty deck of flashcards. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"DECK_NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Japanese \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the word bank\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a NewDeckCommand to add the given deck {@code deck}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param deck Deck to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public NewDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof NewDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((NewDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/RemoveDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Removes a deck identified using it\u0027s displayed index from the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        + \": Removes the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer that is less than 2,147,483,648)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_REMOVE_DECK_SUCCESS \u003d \"Removed Deck: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a RemoveDeckCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param targetIndex Index of the object to be removed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public RemoveDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assert (targetIndex.getZeroBased() \u003e\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deckToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.removeDeck(deckToRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_DECK_SUCCESS, deckToRemove));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            || (other instanceof RemoveDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((RemoveDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "IlyaRin": 56,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/SelectDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class SelectDeckCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        + \": Selects the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer that is less than 2,147,483,648) \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SELECT_DECK_SUCCESS \u003d \"Selected Deck: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructs a SelectDeckCommand object. Selects the deck at the given index {@code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * targetIndex}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param targetIndex Index of deck to select."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public SelectDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            model.selectDeck(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            model.replaceEntryList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Deck selectedDeck \u003d model.getCurrentDeck();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            model.setCurrentView(View.ENTRY_VIEW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_DECK_SUCCESS, selectedDeck));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (ConcurrentModificationException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new CommandException(e.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4,
      "IlyaRin": 46,
      "gabrielsimbingyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Adds an entry to the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a entry to the word bank. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"WORD \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"TRANSLATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"Fruits \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"果物\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entry added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * There cannot be duplicate entries in the word bank."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Two entries are considered to be duplicates if they have the same translation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * An entry cannot contain reserve command words like /play or /stop."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the word bank.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Two entries cannot have the same translation\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGES_FORBIDDEN \u003d \"Word or translations can\u0027t be %s \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (toAdd.getWord().toString().equals(\"/stop\") || toAdd.getTranslation().toString().equals(\"/stop\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                || toAdd.getWord().toString().equals(\"/play\") || toAdd.getTranslation().toString().equals(\"/play\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGES_FORBIDDEN, \"\\\"/stop\\\" or \\\"/play\\\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.hasEntry(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addEntry(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.replaceEntryList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setCurrentView(View.ENTRY_VIEW);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 35,
      "-": 36,
      "gabrielsimbingyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Deletes an entry identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        + \": Deletes the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer that is less than 2,147,483,648)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setCurrentView(View.ENTRY_VIEW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "IlyaRin": 19,
      "-": 41,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Edits the details of an existing entry in the word bank."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"by the index number used in the displayed entry list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer that is less than 2,147,483,648) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"[\" + PREFIX_WORD + \"Entry] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"[\" + PREFIX_TRANSLATION + \"Translation]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"hello \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"こんにちは\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"OR \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"hello\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"OR \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"こんにちは\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \"This entry already exists in the word bank.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Two entries cannot have the same translation.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGES_FORBIDDEN \u003d \"Word or translations can\u0027t be %s \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs an EditCommand object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param index               Index of the entry in the filtered entry list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param editEntryDescriptor Details to edit the entry with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (editedEntry.getWord().toString().equals(\"/stop\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            || editedEntry.getTranslation().toString().equals(\"/stop\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            || editedEntry.getWord().toString().equals(\"/play\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            || editedEntry.getTranslation().toString().equals(\"/play\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGES_FORBIDDEN, \"\\\"/stop\\\" or \\\"/play\\\"\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.replaceEntryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setCurrentView(View.ENTRY_VIEW);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Creates and returns a {@code Entry} with the details of {@code entryToEdit} edited with"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * {@code editEntryDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entryToEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word updatedWord \u003d editEntryDescriptor.getWord().orElse(entryToEdit.getWord());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Translation updatedTranslation \u003d editEntryDescriptor.getTranslation()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .orElse(entryToEdit.getTranslation());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(updatedWord, updatedTranslation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Stores the details to edit the entry with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * corresponding field value of the entry."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private Word word;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private Translation translation;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public EditEntryDescriptor() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            setWord(toCopy.word);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            setTranslation(toCopy.translation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(word, translation);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setWord(Word word) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.word \u003d word;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Optional\u003cWord\u003e getWord() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return Optional.ofNullable(word);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setTranslation(Translation translation) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.translation \u003d translation;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Optional\u003cTranslation\u003e getTranslation() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return Optional.ofNullable(translation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return getWord().equals(e.getWord())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 getTranslation().equals(e.getTranslation());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 14,
      "IlyaRin": 69,
      "-": 103,
      "gabrielsimbingyang": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/play/AnswerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Clears GreenTea."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class AnswerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_SCORE \u003d \"Your score was %d / %d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_RESULT \u003d \"Your answer was: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new answer command that takes in the raw user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public AnswerCommand(String answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.playGame(answer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (model.checkScoreTwo()) { //answerCommand sees into the future by 1 move, so have to delay by 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Score score \u003d model.endGame();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            int playerScore \u003d (int) score.getYourScore();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            int maxScore \u003d (int) score.getMaxScore();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SCORE, playerScore, maxScore));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return new CommandResult(MESSAGE_RESULT + answer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "gabrielsimbingyang": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/play/PlayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class PlayCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Playmode Started\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            //switch to playmode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            model.newGame();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            model.setCurrentView(View.QUIZ_VIEW);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new CommandException(e.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 2,
      "gabrielsimbingyang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/play/StopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Playmode stopped! Your score was not recorded!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Score score \u003d model.endGame();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            model.setCurrentView(View.SCORE_VIEW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new CommandException(e.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "IlyaRin": 2,
      "gabrielsimbingyang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static String messageSuccess \u003d \"Viewing statistics.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public final int deckIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsCommand(int deckIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.deckIndex \u003d deckIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int currentDeckIndex \u003d model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                .setStatisticsDeckId(deckIndex - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (currentDeckIndex \u003d\u003d -1) { // invalid deck, or none"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            messageSuccess \u003d \"No deck / invalid deck ID selected. Showing statistics across all decks.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // messageSuccess \u003d \"Either invalid deck index or index out of bounds. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //         + \"Please choose an index that is listed and ensure it is a positive integer that is less than \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //         + \"2,147,483,648 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //         + \"Viewing statistics across all decks instead.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            messageSuccess \u003d String.format(\"Viewing statistics for deck %s (id\u003d%d)\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    model.getFilteredDeckList().get(currentDeckIndex).getDeckName(), currentDeckIndex + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        model.setCurrentView(View.STATISTICS_VIEW);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 36,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Prefix PREFIX_WORD \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Prefix PREFIX_TRANSLATION \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandModeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.SelectDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.NewDeckCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.RemoveDeckCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.SelectDeckCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.AddCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.DeleteCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.EditCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.parser.statistics.StatisticsCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class CommandModeParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case NewDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new NewDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case RemoveDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new RemoveDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case SelectDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new SelectDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 9,
      "IlyaRin": 20,
      "-": 62,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String word} into a {@code Word}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Word parseWord(String word) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedWord \u003d word.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Word.isValidLength(trimmedWord)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Word.LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Word.isValidWord(trimmedWord)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Word(trimmedWord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String translation} into an {@code Translation}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code translation} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Translation parseTranslation(String translation) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(translation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedTranslation \u003d translation.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Translation.isValidLength(trimmedTranslation)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Translation.LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Translation.isValidTranslation(trimmedTranslation)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Translation(trimmedTranslation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String name} into an {@code DeckName}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static DeckName parseDeckName(String name) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!DeckName.isValidLength(trimmedName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(DeckName.LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!DeckName.isValidDeckName(trimmedName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(DeckName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new DeckName(trimmedName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 33,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PlayModeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.play.PlayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.play.StopCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.play.AnswerCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class PlayModeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        case \"/play\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new PlayCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        case \"/stop\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new StopCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                return new AnswerCommandParser().parse(commandWord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                return new AnswerCommandParser().parse(commandWord + arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 8,
      "gabrielsimbingyang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/NewDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Parses input arguments and creates a NewDeckCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandParser implements Parser\u003cNewDeckCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewDeckCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a NewDeckCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public NewDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeckName name \u003d ParserUtil.parseDeckName(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new NewDeckCommand(deck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/RemoveDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Parses input arguments and creates a RemoveDeckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandParser implements Parser\u003cRemoveDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a RemoveDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public RemoveDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new RemoveDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/SelectDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.SelectDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a SelectDeckCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public SelectDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new SelectDeckCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_TRANSLATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_TRANSLATION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Translation translation \u003d ParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .parseTranslation(argMultimap.getValue(PREFIX_TRANSLATION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new Entry(word, translation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 12,
      "IlyaRin": 17,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_TRANSLATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WORD).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            editEntryDescriptor.setWord(ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSLATION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            editEntryDescriptor.setTranslation(ParserUtil.parseTranslation("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    argMultimap.getValue(PREFIX_TRANSLATION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/play/AnswerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.parser.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.play.AnswerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Parses input arguments and creates a NewDeckCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewDeckCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * and returns a NewDeckCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public AnswerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new AnswerCommand(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/StatisticsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int deckIndex \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            deckIndex \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } catch (NumberFormatException numberFormatException) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return new StatisticsCommand(deckIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private EventType eventType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param eventType"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param localDateTime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Event(EventType eventType, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param eventType"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Event(EventType eventType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public EventType getEventType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return \"Event{\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"eventType\u003d\" + eventType"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \", localDateTime\u003d\" + localDateTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 21,
      "vigneshbhuvan-nus": 17,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/EventType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public enum EventType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    LOGIN,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    LOGOUT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Object that captures the app usage statistics of a given user. These could range from time spent"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * on the app to individual quiz performance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private int timesOpened;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private List\u003cEvent\u003e eventLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param timesOpened"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param eventLog"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Statistics(int timesOpened, List\u003cEvent\u003e eventLog) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.timesOpened \u003d timesOpened;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.eventLog \u003d eventLog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        timesOpened \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void registerAppLogin() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        timesOpened++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void registerAppLogout() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGOUT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public int getTimesOpened() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return timesOpened;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return \"Statistics{\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"timesOpened \u003d \" + timesOpened"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \", eventLog \u003d \" + eventLog"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public List\u003cEvent\u003e getEventLog() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return eventLog;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 35,
      "vigneshbhuvan-nus": 23,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/StatisticsManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class StatisticsManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    //  if statistics file exists"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsManager(Statistics statistics) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogin();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * if first time opening the app"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.statistics.registerAppLogin();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Registers the app logout process and logs the statistics information accordingly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void doCleanup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogout();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logger.info(\"Cleaning up: \" + statistics.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String getLastLoginString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        LocalDateTime lastLogin \u003d getLastLogin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logger.info(\"Starting Up: \" + statistics.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return lastLogin \u003d\u003d null ? \"None - first login.\" : lastLogin.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public LocalDateTime getLastLogin() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cEvent\u003e eventLog \u003d statistics.getEventLog();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int n \u003d eventLog.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (n \u003d\u003d 0 || n \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        boolean seenFirstLogin \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event cur;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // get the second most recent login event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (i \u003d n - 1; i \u003e\u003d 0; --i) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            cur \u003d eventLog.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (cur.getEventType() !\u003d EventType.LOGIN) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (!seenFirstLogin) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                seenFirstLogin \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                return cur.getLocalDateTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 61,
      "vigneshbhuvan-nus": 9,
      "gabrielsimbingyang": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Replaces address book data with the data in {@code wordBank}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void setWordBank(ReadOnlyWordBank wordBank);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns the WordBank"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ReadOnlyWordBank getWordBank();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if an entry with the same identity as {@code entry} exists in the word bank."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Deletes the given entry. The entry must exist in the word bank."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void deleteEntry(Entry target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds the given entry. {@code entry} must not already exist in the word bank."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}. {@code target} must exist"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * in the address book. The entry identity of {@code editedEntry} must not be the same as"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * another existing entry in the word bank."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void setEntry(Entry target, Entry editedEntry);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns an unmodifiable view of the filtered entry list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the word bank."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Removes the given deck {@code target}. The deck must exist in the word bank."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void removeDeck(Deck target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds the given deck. {@code deck} must not already exist in the word bank."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Selects the deck at the specified index"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param index of the selected deck"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void selectDeck(Index index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Retrieves the deck last selected by the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns an unmodifiable view of the filtered deck list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void replaceEntryList() throws ConcurrentModificationException;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Deletes entries on the GUI when clear command is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void clearEntryList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //game commands"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void newGame();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    Score endGame();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void playGame(String answer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    boolean checkScore();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    boolean checkScoreTwo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //view methods"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Changes the current view of the system to the specified view {@code view}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param view View to change the current view to"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void setCurrentView(View view);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Changes the current deck showing for stats pane"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    int setStatisticsDeckId(int deckIndex);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Get the current deck showing for stats pane"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    int getStatisticsDeckId();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Gets the current view of the system"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    View getCurrentView();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //UI methods"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the current leitner object to be passed to logic Should only be called when the user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * is playing a quiz."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Leitner getLeitner();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the current quiz question that the user is at Default value is 0"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    int getCurrentIndex();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    QuizAttempt getQuizAttempt();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 41,
      "IlyaRin": 69,
      "-": 72,
      "gabrielsimbingyang": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.play.scoring.BinaryScoring;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.CurrentView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final WordBank wordBank;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private CurrentView currentView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Optional\u003cIndex\u003e currentDeckIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Deck observedDeck;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Leitner leitner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int quizLength \u003d 2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private int statisticsDeckIndex \u003d -1; // sentinel value of -1 to indicate we show stats of all decks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private QuizAttempt currentQuizAttempt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Initializes a ModelManager with the given wordBank and userPrefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ModelManager(ReadOnlyWordBank addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logger.fine("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.wordBank \u003d new WordBank(addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        /*filteredEntries \u003d new FilteredList\u003c\u003e(this.wordBank.getEntryList());*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.wordBank.getDeckList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentView \u003d new CurrentView(View.START_VIEW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this(new WordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current View \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentView.setView(view);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public int setStatisticsDeckId(int deckIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (deckIndex \u003c 0 || deckIndex \u003e\u003d filteredDecks.size()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            deckIndex \u003d -1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return (this.statisticsDeckIndex \u003d deckIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public int getStatisticsDeckId() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return this.statisticsDeckIndex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public View getCurrentView() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.currentView.getView();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Word Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setWordBank(ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.wordBank.resetData(wordBank);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentDeckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return currentDeck.hasEntry(entry);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.removeEntry(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.getObservedEntries().remove(target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * This function takes the entry and adds it to the deck entry list as well as the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * observedEntries in the WordBank"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param entry refers to the entry inputted by the user"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.addEntry(entry);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.getObservedEntries().add(entry);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank.hasDeck(deck);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (target \u003d\u003d getCurrentDeck()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            currentDeckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            clearEntryList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            setCurrentView(View.START_VIEW);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.removeDeck(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.addDeck(deck);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void selectDeck(Index index) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeckIndex \u003d Optional.of(index);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * replaceEntryList deletes what is on the GUI and replaces it with the next entries in the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * selected deck. To replace the observedEntry in Addressbook.java that controls the GUI, a copy"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * of it has to be created first. This avoids the concurrent modification exception."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void replaceEntryList() throws ConcurrentModificationException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            UniqueEntryList newEntryList \u003d getCurrentDeck().getEntries();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            wordBank.resetEntryList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            wordBank.replaceEntryList(newEntryList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (ConcurrentModificationException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void clearEntryList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.resetEntryList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (currentDeckIndex.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            logger.info(\"Current deck index is 0\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assert (getFilteredDeckList().size() \u003e 0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredDecks.get(currentDeckIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns a default deck as memory is not fixed yet. During initialisation, the"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * observedEntryList value is passed as the WordBank.javas uniqueEntryList. I.e the GUI now"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * watches for any changes in the WordBank,java field observedEntries {@code"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (this.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            logger.info(\"Current Deck is null\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return wordBank.getFilteredEntries();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank.getFilteredEntries();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.resetEntryList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.replaceEntryList(currentDeck.getEntries());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank.equals(other.wordBank)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 filteredDecks.equals(other.filteredDecks);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //\u003d\u003d\u003d\u003dGames\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void newGame() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        leitner \u003d new Leitner(getCurrentDeck());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        quizLength \u003d leitner.getEntries().size();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        currentIndex \u003d 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.resetEntryList();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.replaceEntryListLeitner(leitner.getUniqueEntryList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        currentQuizAttempt \u003d new QuizAttempt(new BinaryScoring());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Score endGame() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        replaceEntryList();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentView.setView(View.SCORE_VIEW);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        currentQuizAttempt.endQuiz(quizLength);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (checkScoreTwo()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // update deck\u0027s attempt list iff end game due to last question"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            getCurrentDeck().addQuizAttempt(currentQuizAttempt);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return currentQuizAttempt.getScore();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void playGame(String guess) { // answer a question"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        leitner.addGuess(guess);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String correctAnswer \u003d leitner.getAnswers().get(currentIndex).toString();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Entry entryToAdd \u003d leitner.getEntries().get(currentIndex);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Entry entryToRemove \u003d wordBank.getObservedEntries().get(currentIndex);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logger.info(String.format(\"You have answered %s.\", guess));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (currentIndex \u003d\u003d quizLength) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            replaceEntryList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } else if (correctAnswer.equals(guess)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            currentQuizAttempt.answerQuestion(correctAnswer, guess);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.info(String"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .format(\"Answer given was %s, the correct answer was %s, Correct answer given\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    guess, correctAnswer));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            currentQuizAttempt.answerQuestion(correctAnswer, guess);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logger.info("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(\"Answer given was %s, the correct answer was %s, Wrong answer given\","
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    guess, correctAnswer));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.setEntry(entryToRemove, entryToAdd); //swaps entry in GUI"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        currentIndex++;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Leitner getLeitner() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.leitner;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.currentIndex;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public boolean checkScore() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return currentIndex \u003d\u003d quizLength - 1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public boolean checkScoreTwo() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return currentIndex \u003d\u003d quizLength;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public QuizAttempt getQuizAttempt() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return currentQuizAttempt;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 51,
      "vigneshbhuvan-nus": 4,
      "IlyaRin": 97,
      "-": 134,
      "gabrielsimbingyang": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWordBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Unmodifiable view of a word bank"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public interface ReadOnlyWordBank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the entries list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /*ObservableList\u003cEntry\u003e getEntryList();*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the deck list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 4,
      "IlyaRin": 10,
      "-": 10,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"wordbank.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "vigneshbhuvan-nus": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WordBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Duplicates are not allowed (by .isSameEntry comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class WordBank implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /*private final UniqueEntryList entries;*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final UniqueDeckList observedDecks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private UniqueEntryList observedEntries;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedDecks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        filteredEntries \u003d new FilteredList\u003c\u003e(observedEntries.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public WordBank() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates an WordBank using the Entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public WordBank(ReadOnlyWordBank toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    // get list operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public UniqueEntryList getObservedEntries() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return observedEntries;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public FilteredList\u003cEntry\u003e getFilteredEntries() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * This function directly modifies what is seen on the GUI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param entry refers to the entry added by the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedEntries.add(entry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Resets the observable entry list without clearing the memory of the deck"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void resetEntryList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Iterator\u003cEntry\u003e iterator \u003d observedEntries.iterator(); //create iterator"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ArrayList\u003cEntry\u003e copy \u003d new ArrayList\u003cEntry\u003e(); //initialise a copy"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        while (iterator.hasNext()) { //fill the empty copy ArrayList with the existing entries"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            copy.add(iterator.next()); //this avoids the concurrentModification exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : copy) { //for each entry in the copy, delete the same entry in the observedEntries"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            observedEntries.remove(entry); //this changes the GUI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Replaces the current observed entry list when given a UniqueEntryList object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void replaceEntryList(UniqueEntryList newEntryList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : newEntryList) { //for each entry in the new selected deck entryList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            observedEntries.add(entry); //add it to the GUI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the current observed entry list when given a UniqueEntryList object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Only called during quiz mode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void replaceEntryListLeitner (UniqueEntryList newEntryList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry entry : newEntryList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            observedEntries.addLeitner(entry);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.observedDecks.setDecks(decks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Resets the existing data of this {@code WordBank} with {@code newData}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void resetData(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the word bank."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return observedDecks.contains(deck);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Removes {@code key} from this {@code WordBank}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck(Deck key) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedDecks.remove(key);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds a deck to the word bank."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck must not already exist in the word bank."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedDecks.add(deck);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return observedDecks.asUnmodifiableObservableList().size() + \" decks\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return observedDecks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            || (other instanceof WordBank // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u0026\u0026 observedDecks.equals(((WordBank) other).observedDecks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return observedDecks.hashCode();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        observedEntries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "vigneshbhuvan-nus": 1,
      "IlyaRin": 58,
      "-": 48,
      "gabrielsimbingyang": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * A deck represents a list of entries. Each deck has a unique deck name. Users will be able to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * attempt quizzes using these decks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final DeckName deckName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private UniqueEntryList entries;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private List\u003cQuizAttempt\u003e quizAttempts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructs a deck object. Each deck is initialized with a given name {@code deckName}. Other"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * fields in the deck class are all initialized to empty lists upon initialization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck(DeckName deckName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.filteredEntries \u003d new FilteredList\u003c\u003e(getEntryList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.quizAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the name of the deck."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Name of the deck."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckName getDeckName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.deckName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public FilteredList\u003cEntry\u003e getFilteredEntries() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void setFilteredEntries("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        FilteredList\u003cEntry\u003e filteredEntries) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.filteredEntries \u003d filteredEntries;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the list of entries in the deck."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return List of entries in the deck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public UniqueEntryList getEntries() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.entries;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Return the list of quiz attempts."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return List of quiz attempts."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public List\u003cQuizAttempt\u003e getQuizAttempts() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return this.quizAttempts;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds a quiz attempt {@code quizAttempt} to the list of quiz attempts."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param quizAttempt Quiz attempt to add to the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void addQuizAttempt(QuizAttempt quizAttempt) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.quizAttempts.add(quizAttempt);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the current unique entry list to the given list of entries {@code entries}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entries List of entries to replace current entry list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setEntries(UniqueEntryList entries) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.entries \u003d entries;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.filteredEntries \u003d new FilteredList\u003c\u003e(getEntryList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the current list of quiz attempts to the given list {@code quizAttempts}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param quizAttempts List of quiz attempts to replace the current quiz attempt list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setQuizAttempts(List\u003cQuizAttempt\u003e quizAttempts) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.quizAttempts \u003d quizAttempts;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the current list of entries as an unmodifiable list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return List of entries as unmodifiable list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the current list of filtered entries."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return List of filtered entries."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the entry list contains the specified entry {@code entry}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entry Entry to be checked whether or not it exists in the entry list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if the entry list contains the specified entry."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds an entry {@code entry} to the list of entries."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entry Entry to be added to the list of entries."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.add(entry);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Removed the specified entry {@code target} from the list of entries. The entry must already"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * exist in the list of entries."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param target Entry to be removed from the list of entries."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeEntry(Entry target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.remove(target);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the specified entry {@code target} with another entry {@code editedEntry}. The"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * specified entry must already exist in the list of entries."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param target      Entry to be replaced."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param editedEntry Entry to replace the target entry."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Two decks are considered to be the same if they have the same name This defines a notion of"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * equality between the two decks."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param otherDeck Deck to be compared with the current deck."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if both decks have the same name."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 otherDeck.getDeckName().equals(getDeckName());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns true if both decks have the same name This defines a notion of equality between two"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * deck objects."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param other Other object to be compared with the current deck."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if both deck objects have the same deck name."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            || (other instanceof Deck // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 getDeckName().equals(((Deck) other).getDeckName())); // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Objects.hash(deckName, entries);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return String.valueOf(getDeckName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 48,
      "vigneshbhuvan-nus": 8,
      "IlyaRin": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/DeckName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A class which serves to identify a unique deck. No two decks can have the same deck name"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deck name cannot be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String LENGTH_CONSTRAINTS \u003d \"Deck name cannot be longer than 100 characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Deck names cannot be null or empty"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Deck names cannot be more than 100 characters long"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final int MAXIMUM_LENGTH \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public final String deckName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs an {@code DeckName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param deckName A valid deck name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckName(String deckName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidLength(deckName), LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidDeckName(deckName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the given string {@code test} is a valid deck name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param test String to be tested if it is a valid deck name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True is the given string is a valid deck name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidDeckName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the given string {@code test} is of valid length."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param test String to be tested if it is of valid length."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Truw if the given string is of valid length."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidLength (String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return test.length() \u003c\u003d MAXIMUM_LENGTH;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getDeckName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof DeckName // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 deckName.equals(((DeckName) other).deckName)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deckName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 5,
      "IlyaRin": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * A list of decks that is comprised of unique decks Decks are considered unique if no two decks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * share the same deck name A deck is determined to be unique by comparing using {@code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Deck#isSameDeck(Deck)}. Supports a minimal set of list operations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the deckList contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toCheck Deck to check if it exists in the deckList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if the deck already exists in the deckList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds a deck {@code toAdd} to the deckList. The deck must not already exist in the deckList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toAdd Deck to be added to the deckList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the deck {@code target} in the deckList with {@code editedDeck}. {@code target} must"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * exist in the list. The deck identity of {@code editedDeck} must not be the same as another"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * existing deck in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param target     Deck to be replaced."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param editedDeck Deck to replace the target deck."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Removes the equivalent deck {@code toRemove} from the deckList. The deck must exist in the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toRemove Deck to be removed from the deckList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the current list with the contents of the given list {@code replacement}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param replacement List to replace the current list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the contents of this list with {@code decks}. {@code decks} must not contain"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * duplicate decks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param decks List of decks to replace the contents of the current list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the entry list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Entry list as an unmodifiable list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param decks List of decks to check if all decks are different."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if all the decks in the given list are different."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 20,
      "IlyaRin": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Word word;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Translation translation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry(Word word, Translation translation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(word, translation);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Word getWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Translation getTranslation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if both entries of the same word have the same translation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between the two entries"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean isSameEntry(Entry otherEntry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (otherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherEntry !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 (otherEntry.getTranslation().equals(getTranslation()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if both entries have the same translation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between two entry objects"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry otherEntry \u003d (Entry) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherEntry.getTranslation().equals(getTranslation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Objects.hash(word, translation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        builder.append(getWord())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(\" Translation: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(getTranslation());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 28,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Translation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry\u0027s translation in the word bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTranslation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Translation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Translations cannot be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String LENGTH_CONSTRAINTS \u003d \"Translations cannot be longer than 200 characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Translations cannot be null or empty"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Translations cannot be more than 200 characters long"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final int MAXIMUM_LENGTH \u003d 200;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public final String translation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs an {@code Translation}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param translation A valid translation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Translation(String translation) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(translation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidLength(translation), LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidTranslation(translation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getTranslation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns if a given string is a valid translation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidTranslation(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidLength (String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return test.length() \u003c\u003d MAXIMUM_LENGTH;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof Translation // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 translation.equals(((Translation) other).translation)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 4,
      "IlyaRin": 31,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/UniqueEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * A list of entries that enforces uniqueness between its elements and does not allow nulls. An"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * entry is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * and updating of entries uses Entry#isSameEntry(Entry) for equality so as to ensure that the entry"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueEntryList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * removal of an entry uses Entry#equals(Object) so as to ensure that the entry with exactly the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * @see Entry#isSameEntry(Entry)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns the entry at the specified index in the list. Indexing starts from 0."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param index Index of specific entry."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Entry at the specified index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Entry get(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assert (index \u003e\u003d 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the length of the entry list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Length of entry list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public int length() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Return true if the list is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if the list does not contain any entries."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toCheck Entry to check whether or not it is in the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if the entry already exists in the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds an entry to the list. The entry cannot already exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toAdd Entry to be added to the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds an entry to the list. The entry can already exist in the list. Only called when user is"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * playing a quiz."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toAdd Entry to be added to the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addLeitner(Entry toAdd) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code editedEntry}. {@code target} must"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * exist in the list. The entry identity of {@code editedEntry} must not be the same as another"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * existing entry in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param target      The entry to be replaced."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param editedEntry The entry to replace the target with."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Removes the specified entry from the list. The entry must already be in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param toRemove Entry to be removed from the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the current entry list with another entry list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param replacement Entry list to replace the current list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Replaces the contents of this list with {@code entries}. {@code entries} must not contain"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * duplicate entries."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entries Entries to replace entries in the current list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!entriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return The current list of entries as an unmodifiable list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if {@code entries} contains only unique entries."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entries Entries in the list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return True if the entries in the list are all different"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static boolean entriesAreUnique(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                if (entries.get(i).isSameEntry(entries.get(j))) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 29,
      "vigneshbhuvan-nus": 1,
      "IlyaRin": 154,
      "gabrielsimbingyang": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Word.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry\u0027s word in the word bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Word {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Words cannot be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String LENGTH_CONSTRAINTS \u003d \"Words cannot be longer than 200 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Words cannot be null or empty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Words cannot be more than 200 characters long"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final int MAXIMUM_LENGTH \u003d 200;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public final String word;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a {@code Word}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param word A valid word."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Word(String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidLength(word), LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidWord(word), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a given string is a valid word."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidWord(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidLength (String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return test.length() \u003c\u003d MAXIMUM_LENGTH;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof Word // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 word.equals(((Word) other).word)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 4,
      "IlyaRin": 28,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/WordContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Tests that a {@code Entry}\u0027s {@code Word} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public WordContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getWord().word, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            || (other instanceof WordContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u0026\u0026 keywords.equals(((WordContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "IlyaRin": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation is unable to find the specified deck"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation will result in duplicate decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(\"Operation would result in duplicate entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation is unable to find the specified entry"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/Leitner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.model.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuestionAttempt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Leitner {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private ArrayList\u003cEntry\u003e entryList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private ArrayList\u003cTranslation\u003e questionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private ArrayList\u003cWord\u003e answerList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private ArrayList\u003cString\u003e guesses;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final Deck deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns a Leitner object that behaves as a flashcard object. Shuffles and stores the ordered"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * entry into entryList. Extracts the words and translations of each entry in entries and stores"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * them into questionsList and answerList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @param deck A deck that leitner will operate on"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Leitner(Deck deck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        doTheLeitner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Does the leitner shuffle thingy."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void doTheLeitner() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        entryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        answerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        guesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        UniqueEntryList entries \u003d deck.getEntries();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (deck.getQuizAttempts().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // first time playing this deck so we randomly shuffle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            for (var entry : entries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                entryList.add(entry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Collections.shuffle(entryList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            for (var entry : entries) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                answerList.add(entry.getWord());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                questionList.add(entry.getTranslation());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Map\u003cString, Pair\u003cWord, Translation\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            for (var entry : entries) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                map.put(entry.getWord().toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    new Pair\u003c\u003e(entry.getWord(), entry.getTranslation()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            int n \u003d deck.getQuizAttempts().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            QuizAttempt latestQuizAttempt \u003d deck.getQuizAttempts().get(n - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            List\u003cQuestionAttempt\u003e questionAttempts \u003d latestQuizAttempt.getQuestionAttempts();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            questionAttempts.sort(Comparator"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .comparing(QuestionAttempt::getScore)); // scores sorted in ascending order now"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            for (var questionAttempt : questionAttempts) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                Pair\u003cWord, Translation\u003e pair;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                if ((pair \u003d map.get(questionAttempt.getAnswer())) !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    answerList.add(pair.getKey());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    questionList.add(pair.getValue());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    entryList.add(new Entry(pair.getKey(), pair.getValue()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    map.remove(questionAttempt.getAnswer());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            for (var entry : map.entrySet()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                answerList.add(entry.getValue().getKey());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                questionList.add(entry.getValue().getValue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                entryList.add(new Entry(entry.getValue().getKey(), entry.getValue().getValue()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ArrayList\u003cWord\u003e getAnswers() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return answerList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ArrayList\u003cTranslation\u003e getQuestions() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ArrayList\u003cEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return entryList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ArrayList\u003cString\u003e getGuesses() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.guesses;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public UniqueEntryList getUniqueEntryList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        UniqueEntryList list \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : entryList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Entry quiz \u003d new Entry(new Word(\"???\"), entry.getTranslation());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            list.addLeitner(quiz);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assert (!list.isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addGuess(String guess) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.guesses.add(guess);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 67,
      "IlyaRin": 7,
      "gabrielsimbingyang": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/Score.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Score cannot be negative\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private double maxScore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private double yourScore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param maxScore"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param yourScore"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Score(double maxScore, double yourScore) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.yourScore \u003d yourScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double getMaxScore() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return maxScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double getYourScore() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return yourScore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double getScoreInPercentage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return (yourScore / maxScore) * 100.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static boolean isValidScore(double score) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return !(score \u003c 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return \"Score{\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"maxScore\u003d\" + maxScore"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \", yourScore\u003d\" + yourScore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 27,
      "vigneshbhuvan-nus": 15,
      "IlyaRin": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/scoring/BinaryScoring.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class BinaryScoring implements Scoring {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double computeScore(String answer, String guess) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return answer.equals(guess) ? 1.0 : 0.0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/scoring/QuestionAttempt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class QuestionAttempt {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private String guess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private double score;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param answer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param guess"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param scoringMethod"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public QuestionAttempt(String answer, String guess, Scoring scoringMethod) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        score \u003d scoringMethod.computeScore(answer, guess);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param answer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param guess"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public QuestionAttempt(String answer, String guess, double score) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public double getScore() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getGuess() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 15,
      "vigneshbhuvan-nus": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/scoring/QuizAttempt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class QuizAttempt implements Comparable\u003cQuizAttempt\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private int duration; // time in seconds"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private LocalDateTime takenAt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private List\u003cQuestionAttempt\u003e questionAttempts;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private Scoring scoringMethod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * This is the default constructor mostly used for testing purposes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public QuizAttempt() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * This is the constructor that we will pass the scoring method to so it knows how to score a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * new entry when a new entry (questionAttemptt) comes in. Here, scoring means computing the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * score received based on the difference between what the given answer is and what the correct"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * answer is."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param scoringMethod"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public QuizAttempt(Scoring scoringMethod) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.duration \u003d -1; // to denote quiz in progress"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.takenAt \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.scoringMethod \u003d scoringMethod;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void answerQuestion(String answer, String guess) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionAttempts.add(new QuestionAttempt(answer, guess, scoringMethod));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * @param quizLength"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void endQuiz(int quizLength) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.score \u003d new Score("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizLength,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            questionAttempts.stream().mapToDouble(QuestionAttempt::getScore).sum()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.duration \u003d (int) this.takenAt.until(LocalDateTime.now(), ChronoUnit.SECONDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public LocalDateTime getTakenAt() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return takenAt;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public List\u003cQuestionAttempt\u003e getQuestionAttempts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return questionAttempts;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Scoring getScoringMethod() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return scoringMethod;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setScore(Score score) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setDuration(int duration) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (!(o instanceof QuizAttempt)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        QuizAttempt that \u003d (QuizAttempt) o;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return getDuration() \u003d\u003d that.getDuration()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u0026\u0026 Objects.equals(getScore(), that.getScore())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u0026\u0026 Objects.equals(getTakenAt(), that.getTakenAt())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u0026\u0026 Objects.equals(getQuestionAttempts(), that.getQuestionAttempts())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u0026\u0026 Objects.equals(getScoringMethod(), that.getScoringMethod());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return Objects"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .hash(getScore(), getDuration(), getTakenAt(), getQuestionAttempts(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                getScoringMethod());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void setScoringMethod(Scoring scoringMethod) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        this.scoringMethod \u003d scoringMethod;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setTakenAt(LocalDateTime takenAt) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.takenAt \u003d takenAt;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void setQuestionAttempts(List\u003cQuestionAttempt\u003e questionAttempts) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.questionAttempts \u003d questionAttempts;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String getTakenAtAndScore() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return takenAt.toString() + \", \" + score.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public int compareTo(QuizAttempt other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (takenAt.compareTo(other.getTakenAt()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return Double"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .compare(score.getScoreInPercentage(), other.getScore().getScoreInPercentage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return takenAt.compareTo((other.getTakenAt()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public String getTakenAtAndScoreInPercentage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return takenAt.toString() + \", \" + score.getScoreInPercentage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 88,
      "vigneshbhuvan-nus": 43,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/play/scoring/Scoring.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public interface Scoring {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public abstract double computeScore(String answer, String guess);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Contains utility methods for populating {@code WordBank} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static Entry[] getSampleEntriesJapanese() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Apple\"), new Translation(\"りんご\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Bridge\"), new Translation(\"橋\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Cat\"), new Translation(\"猫\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static Entry[] getSampleEntriesSpanish() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Summer\"), new Translation(\"verano\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Winter\"), new Translation(\"invierno\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Spring\"), new Translation(\"primavera\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static Deck getSampleJapaneseDeck() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck sampleJapaneseDeck \u003d new Deck(new DeckName(\"Japanese\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry sampleJapaneseEntry : getSampleEntriesJapanese()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sampleJapaneseDeck.addEntry(sampleJapaneseEntry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sampleJapaneseDeck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static Deck getSampleSpanishDeck() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck sampleSpanishDeck \u003d new Deck(new DeckName(\"Spanish\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry sampleSpanishEntry: getSampleEntriesSpanish()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sampleSpanishDeck.addEntry(sampleSpanishEntry);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sampleSpanishDeck;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static ReadOnlyWordBank getSampleAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank sampleAb \u003d new WordBank();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sampleAb.addDeck(getSampleJapaneseDeck());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sampleAb.addDeck(getSampleSpanishDeck());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 28,
      "-": 20,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/view/CurrentView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class CurrentView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private View view;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CurrentView (View view) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public View getView() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.view;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setView(View view) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/view/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public enum View {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    START_VIEW,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ENTRY_VIEW,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    QUIZ_VIEW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    STATISTICS_VIEW,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    SCORE_VIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "class JsonAdaptedDeck {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final String deckName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final List\u003cJsonAdaptedQuizAttempt\u003e quizAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeck} with the given entry details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"deckname\") String deckName,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"internallist\") List\u003cJsonAdaptedEntry\u003e internalList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"quizAttempts\") List\u003cJsonAdaptedQuizAttempt\u003e quizAttempts) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (internalList !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            this.internalList.addAll(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (quizAttempts !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            this.quizAttempts.addAll(quizAttempts);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        deckName \u003d source.getDeckName().deckName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        internalList.addAll(source.getEntryList().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .map(JsonAdaptedEntry::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        quizAttempts.addAll(source.getQuizAttempts().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .map(JsonAdaptedQuizAttempt::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               entry."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final UniqueEntryList modelInternalList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        for (JsonAdaptedEntry entry : internalList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            modelInternalList.add(entry.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final List\u003cQuizAttempt\u003e modelQuizAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        for (JsonAdaptedQuizAttempt quizAttempt : quizAttempts) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            modelQuizAttempts.add(quizAttempt.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (deckName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                DeckName.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!DeckName.isValidDeckName(deckName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(DeckName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final DeckName modelDeckName \u003d new DeckName(deckName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final Deck deck \u003d new Deck(modelDeckName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        deck.setEntries(modelInternalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        deck.setQuizAttempts(modelQuizAttempts);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 7,
      "vigneshbhuvan-nus": 80,
      "IlyaRin": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final JsonAdaptedWord word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final JsonAdaptedTranslation translation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"word\") JsonAdaptedWord word,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"translation\") JsonAdaptedTranslation translation) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        word \u003d new JsonAdaptedWord(source.getWord());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        translation \u003d new JsonAdaptedTranslation(source.getTranslation());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               entry."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (word \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                JsonAdaptedWord.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Word.isValidWord(word.getWord())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final Word modelWord \u003d new Word(word.getWord());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (translation \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                JsonAdaptedTranslation.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Translation.isValidTranslation(translation.getTranslation())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final Translation modelTranslation \u003d new Translation(translation.getTranslation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(modelWord, modelTranslation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 3,
      "vigneshbhuvan-nus": 13,
      "IlyaRin": 19,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuestionAttempt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.BinaryScoring;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuestionAttempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.Scoring;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "public class JsonAdaptedQuestionAttempt {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Question Attempts\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final String guess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonProperty(\"score\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final double score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestionAttempt} with the given {@code score}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedQuestionAttempt(@JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"guess\") String guess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        Scoring scoringMethod \u003d new BinaryScoring();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.score \u003d scoringMethod.computeScore(answer, guess);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code score} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedQuestionAttempt(QuestionAttempt source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        answer \u003d source.getAnswer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        guess \u003d source.getGuess();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        score \u003d source.getScore();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //Dummy Constructor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedQuestionAttempt() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        answer \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        guess \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        score \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getGuess() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public double getScore() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts this Jackson-friendly adapted Score object into the model\u0027s {@code score} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               Score."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public QuestionAttempt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                QuestionAttempt.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (guess \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                QuestionAttempt.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return new QuestionAttempt(answer, guess, score);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 7,
      "vigneshbhuvan-nus": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuizAttempt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.BinaryScoring;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuestionAttempt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "class JsonAdaptedQuizAttempt {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Quiz Attempts\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private JsonAdaptedScore score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private int duration; // time in seconds"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private LocalDateTime takenAt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private List\u003cJsonAdaptedQuestionAttempt\u003e questionAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuizAttempt} with the given entry details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedQuizAttempt(@JsonProperty(\"score\") JsonAdaptedScore score,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"duration\") int duration,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"takenAt\") LocalDateTime takenAt,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"questionAttempts\") List\u003cJsonAdaptedQuestionAttempt\u003e questionAttempts) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.takenAt \u003d takenAt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (questionAttempts !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            this.questionAttempts.addAll(questionAttempts);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code QuizAttempt} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedQuizAttempt(QuizAttempt source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.score \u003d new JsonAdaptedScore(source.getScore());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.duration \u003d source.getDuration();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.takenAt \u003d source.getTakenAt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.questionAttempts.addAll(source.getQuestionAttempts().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .map(JsonAdaptedQuestionAttempt::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               entry."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public QuizAttempt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (score \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                JsonAdaptedScore.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Score.isValidScore(score.getMaxScore())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Score.isValidScore(score.getYourScore())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final Score modelScore \u003d score.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final int modelDuration \u003d duration;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final LocalDateTime modelTakenAt \u003d takenAt;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final List\u003cQuestionAttempt\u003e modelQuestionAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        final QuizAttempt modelQuizAttempt \u003d new QuizAttempt(new BinaryScoring());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        modelQuizAttempt.setScore(modelScore);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        modelQuizAttempt.setTakenAt(modelTakenAt);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        modelQuizAttempt.setDuration(modelDuration);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        modelQuizAttempt.setQuestionAttempts(modelQuestionAttempts);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return modelQuizAttempt;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 9,
      "vigneshbhuvan-nus": 82,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedScore.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "public class JsonAdaptedScore {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Score\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private double maxScore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private double yourScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedScore} with the given {@code score}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedScore(@JsonProperty(\"maxScore\") double maxScore,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        @JsonProperty(\"yourScore\") double yourScore) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.yourScore \u003d yourScore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code score} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedScore(Score source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        maxScore \u003d source.getMaxScore();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        yourScore \u003d source.getYourScore();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //Dummy Constructor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedScore() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        maxScore \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        yourScore \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public double getMaxScore() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return maxScore;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public double getYourScore() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return yourScore;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts this Jackson-friendly adapted Score object into the model\u0027s {@code score} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               Score."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Score toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Score.isValidScore(maxScore)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Score.isValidScore(yourScore)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return new Score(maxScore, yourScore);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4,
      "vigneshbhuvan-nus": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedScoring.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "/*package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.Scoring;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "public class JsonAdaptedScoring {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private Scoring scoringMethod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedScoring(Scoring scoringMethod) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.scoringMethod \u003d scoringMethod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedScoring(Scoring source) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "vigneshbhuvan-nus": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTranslation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "public class JsonAdaptedTranslation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Translation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final String translation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedTranslation} with the given {@code Translation}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedTranslation(String translation) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code Translation} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedTranslation(Translation source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        translation \u003d source.getTranslation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //Dummy Constructor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedTranslation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        translation \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getTranslation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Converts this Jackson-friendly adapted Translation object into the model\u0027s {@code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Translation} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               Translation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Translation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (translation \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Translation.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Translation.isValidTranslation(translation)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return new Translation(translation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5,
      "vigneshbhuvan-nus": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "public class JsonAdaptedWord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Word\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final String word;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Constructs a {@code JsonAdaptedWord} with the given {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedWord(String word) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts a given {@code Word} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedWord(Word source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        word \u003d source.getWord();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //Dummy Constructor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public JsonAdaptedWord() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        word \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     * Converts this Jackson-friendly adapted Word object into the model\u0027s {@code Word} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *                               Word."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public Word toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (word \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        if (!Word.isValidWord(word)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            throw new IllegalValueException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        return new Word(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5,
      "vigneshbhuvan-nus": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableWordBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An Immutable WordBank that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "class JsonSerializableWordBank {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Constructs a {@code JsonSerializableWordBank} with the given entries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public JsonSerializableWordBank(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Converts a given {@code ReadOnlyWordBank} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *               JsonSerializableWordBank}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public JsonSerializableWordBank(ReadOnlyWordBank source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        decks.addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            source.getDeckList().stream().map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Converts this address book into the model\u0027s {@code WordBank} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public WordBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (wordBank.hasDeck(deck)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            wordBank.addDeck(deck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 12,
      "vigneshbhuvan-nus": 8,
      "-": 27,
      "gabrielsimbingyang": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonWordBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * A class to access WordBank data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class JsonWordBankStorage implements WordBankStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWordBankStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public JsonWordBankStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Optional\u003cJsonSerializableWordBank\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            filePath, JsonSerializableWordBank.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyWordBank)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWordBank(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "-": 67,
      "gabrielsimbingyang": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public interface Storage extends WordBankStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Manages storage of WordBank data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private WordBankStorage wordBankStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code WordBankStorage} and {@code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public StorageManager(WordBankStorage wordBankStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.wordBankStorage \u003d wordBankStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBank methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBankStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return readAddressBook(wordBankStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBankStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        saveAddressBook(addressBook, wordBankStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBankStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 6,
      "-": 62,
      "gabrielsimbingyang": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WordBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Represents a storage for {@link WordBank}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public interface WordBankStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Returns WordBank data as a {@link ReadOnlyWordBank}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Saves the given {@link ReadOnlyWordBank} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyWordBank)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 7,
      "-": 33,
      "gabrielsimbingyang": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        \"https://github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public static final String HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \"Please refer to the user guide at this link for more information: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            + USERGUIDE_URL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        helpMessage.setFont(new Font(\"Arial\", 14));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4,
      "vigneshbhuvan-nus": 5,
      "IlyaRin": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.deck.DeckListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.entry.EntryListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.panels.QuizPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.panels.ScorePanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.panels.StartPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.panels.StatisticsPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final int START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final int ENTRY_INDEX \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final int QUIZ_INDEX \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final int STATISTICS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private View currentView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private EntryListPanel entryListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StartPanel startPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private TabPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StackPane startPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StackPane entryListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StackPane quizPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentView \u003d logic.getCurrentView();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Adds event listeners to update GUI when user clicks on a component Only for statistics"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * panel."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void addEventListeners() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // switch tab event listener"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        tabPanelPlaceholder.getSelectionModel().selectedItemProperty().addListener(("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                logger.info("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    String.format(\"Tab switched from %s to %s\", oldValue.getId(), newValue.getId()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                switch (newValue.getId()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                case \"statistics_panel\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    handleStatisticsPanel(-1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        startPanel \u003d new StartPanel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        startPanelPlaceholder.getChildren().add(startPanel.getRoot());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList()); //get the initial decklist"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        entryListPanel \u003d new EntryListPanel("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logic.getFilteredEntryList()); //get the initial entrylist from model"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        handleStatisticsPanel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // do clean up here 1. register the logout event 2. save the stats to json"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void handleChangeTab() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentView \u003d logic.getCurrentView();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        switch (currentView) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case ENTRY_VIEW:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            tabPanelPlaceholder.getSelectionModel().select(ENTRY_INDEX);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case QUIZ_VIEW:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case SCORE_VIEW:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            tabPanelPlaceholder.getSelectionModel().select(QUIZ_INDEX);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case STATISTICS_VIEW:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            tabPanelPlaceholder.getSelectionModel().select(STATISTICS_INDEX);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            tabPanelPlaceholder.getSelectionModel().select(START_INDEX);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void handleQuizMode() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        QuizPanel quizPanel \u003d new QuizPanel(logic.getLeitner(), logic.getCurrentIndex());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        quizPanelPlaceholder.getChildren().add(quizPanel.getRoot());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private void handleStatisticsPanel(int deckId) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsPanel statisticsPanel \u003d new StatisticsPanel(logic, deckId);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private void handleStatisticsPanel() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsPanel statisticsPanel \u003d new StatisticsPanel(logic, logic.getStatisticsDeckId());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void handleScorePanel() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        ScorePanel scorePanel \u003d new ScorePanel(logic.getLastScore(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logic.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        quizPanelPlaceholder.getChildren().add(scorePanel.getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // force the views to fetch and render new data"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (logic.getCurrentView() \u003d\u003d View.SCORE_VIEW) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                handleScorePanel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (logic.getCurrentView() \u003d\u003d View.QUIZ_VIEW) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                handleQuizMode();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (logic.getCurrentView() \u003d\u003d View.STATISTICS_VIEW) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                handleStatisticsPanel();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            //Change tab according to the command that the user enters"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            handleChangeTab();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 43,
      "IlyaRin": 73,
      "-": 190,
      "gabrielsimbingyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/green_tea_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            mainWindow.addEventListeners();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        String headerText,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 9,
      "IlyaRin": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 14,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/deck/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on WordBank level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a {@code EntryCode} with the given {@code Entry} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        name.setText(deck.getDeckName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 3,
      "gabrielsimbingyang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/deck/DeckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a {@code EntryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * EntryCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5,
      "IlyaRin": 5,
      "gabrielsimbingyang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/entry/EntryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on WordBank level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryCode} with the given {@code Entry} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        name.setText(entry.getWord().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        email.setText(entry.getTranslation().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 10,
      "-": 48,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/entry/EntryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"EntryListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public EntryListPanel(ObservableList\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListView.setItems(entryList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * EntryCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    class EntryListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5,
      "IlyaRin": 43,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/QuizPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Panel containing all the information that the user needs to play a quiz game."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class QuizPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"QuizPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final int currentIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private int totalQuestionNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private int questionsLeftNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private ArrayList\u003cEntry\u003e shuffledEntries;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private ArrayList\u003cString\u003e givenAnswers;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label totalQuestions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label questionsAnswered;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label questionsLeft;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label answerList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructor for quiz panel. Takes in a Leitner object {@code leitner} and an integer {@code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * currentIndex}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public QuizPanel(Leitner leitner, int currentIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.currentIndex \u003d currentIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        initializeEntries(leitner);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        setText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        setProgressBar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void initializeEntries(Leitner leitner) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        totalQuestionNumber \u003d leitner.getEntries().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        questionsLeftNumber \u003d totalQuestionNumber - currentIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        shuffledEntries \u003d leitner.getEntries();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        givenAnswers \u003d leitner.getGuesses();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void setText() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        question.setText(shuffledEntries.get(currentIndex).getTranslation().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        totalQuestions.setText(\"Total Questions: \" + totalQuestionNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionsAnswered.setText(\"Questions Answered: \" + currentIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        questionsLeft.setText(\"Questions to go: \" + questionsLeftNumber);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        answerList.setText(setAnswerList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private String setAnswerList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        int lastFive \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (currentIndex - 5 \u003e lastFive) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            lastFive \u003d currentIndex - 5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (currentIndex \u003e\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sb.append(\"Previous 5 Answers:\\n\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d lastFive; i \u003c currentIndex; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Entry previousEntry \u003d shuffledEntries.get(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sb.append(\"Question: \").append(previousEntry.getTranslation().toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            sb.append(\"Answer: \").append(previousEntry.getWord().toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sb.append(\"Your answer: \").append(givenAnswers.get(i)).append(\"\\n\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void setProgressBar() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        double progress \u003d (double) currentIndex / totalQuestionNumber;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        progressBar.setProgress(progress);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 12,
      "IlyaRin": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/ScorePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class ScorePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"ScorePanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label scoreMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label finalScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label encouragementMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructor for score panel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public ScorePanel (double score, int maxScore) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        scoreMessage.setText(\"Here is your score: \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        finalScore.setText((int) score + \" out of \" + maxScore);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        encouragementMessage.setText(getEncouragementMessage(score, maxScore));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        helpMessage.setText(\"Enter any command to continue...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private String getEncouragementMessage(double score, int maxScore) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        double percentage \u003d (score / maxScore) * 100;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (percentage \u003e\u003d 70) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            message \u003d \"Well done!!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } else if ((percentage \u003c 70) \u0026\u0026 (percentage \u003e\u003d 50)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            message \u003d \"Nice job! You\u0027re almost there\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            message \u003d \"Don\u0027t give up! Practice makes perfect\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 3,
      "IlyaRin": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/StartPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class StartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"StartPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private ImageView greenTeaIcon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label headerMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Label commandMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructor for the start panel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public StartPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Image greenTea \u003d new Image(this.getClass().getResourceAsStream(\"/images/green_tea_icon.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        greenTeaIcon.setImage(greenTea);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        headerMessage.setText(\"Welcome to Green Tea!\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        commandMessage.setText(\"Here are some commands you can try:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"-----------------------------------------\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"                new deck\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"                remove deck \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"                select deck \\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/StatisticsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.chart.NumberAxis.DefaultFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.statistics.StatisticsManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private Label lastLoginLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private LineChart\u003cString, Number\u003e statisticsLineChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private String chartTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static class DataPoint {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        private double scoreInPercentage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        private LocalDateTime takenAt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        DataPoint(LocalDateTime takenAt, double scoreInPercentage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.scoreInPercentage \u003d scoreInPercentage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.takenAt \u003d takenAt;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public double getScoreInPercentage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return scoreInPercentage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public LocalDateTime getTakenAt() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return takenAt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public String getTakenAtString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return takenAt.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\\nHH:mm:ss\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return \"DataPoint{\" + \"scoreInPercentage\u003d\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                + scoreInPercentage + \", takenAt\u003d\" + takenAt + \u0027}\u0027;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    // helper class"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static class Pair\u003cS extends Comparable\u003cS\u003e, T extends Comparable\u003cT\u003e\u003e implements"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Comparable\u003cPair\u003cS, T\u003e\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        private S first;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        private T second;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Pair(S first, T second) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.first \u003d first;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.second \u003d second;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public S getFirst() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return first;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public T getSecond() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return second;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public void setSecond(T second) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.second \u003d second;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public void setFirst(S first) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            this.first \u003d first;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        public int compareTo(Pair\u003cS, T\u003e other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            return this.first.compareTo(other.getFirst());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Constructor for statistics panel"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public StatisticsPanel(Logic logic, int indexOfSelectedDeck) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // System.out.println(\"deck selected \u003d \" + indexOfSelectedDeck);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        ObservableList\u003cDeck\u003e originalDecks \u003d logic.getFilteredDeckList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // decide which deck to get, or get all of them if indexOfSelectedDeck\u003d\u003d-1"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cDeck\u003e decks \u003d IntStream.range(0, originalDecks.size())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .filter(idx -\u003e indexOfSelectedDeck \u003d\u003d -1 || idx \u003d\u003d indexOfSelectedDeck)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .mapToObj(originalDecks::get).collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        if (indexOfSelectedDeck \u003d\u003d -1 || decks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            chartTitle \u003d \"Recent performance over all decks.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            chartTitle \u003d \"Recent performance over [\" + decks.get(0).getDeckName() + \"]\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager statisticsManager \u003d logic.getStatisticsManager();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        plotDataPoints(getDeckPlottingPoints(decks));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        String lastLoginString \u003d statisticsManager.getLastLoginString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        //lastLoginLabel.setText(String.format(\"Last Login: %s\", lastLoginString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        yAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        yAxis.setLowerBound(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        yAxis.setUpperBound(101);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        yAxis.setTickLabelFormatter(new DefaultFormatter(yAxis, null, \"%\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statisticsLineChart.setTitle(chartTitle);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private void plotDataPoints(List\u003cDataPoint\u003e dataPoints) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        series.setName(\"Score (in %)\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (DataPoint dataPoint : dataPoints) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            series.getData()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .add(new XYChart.Data\u003c\u003e(dataPoint.getTakenAtString(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    dataPoint.getScoreInPercentage()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statisticsLineChart.getData().add(series);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Helper function to compute the statistics for plotting/displaying"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private List\u003cDataPoint\u003e getDeckPlottingPoints(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cList\u003cQuizAttempt\u003e\u003e listsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (Deck deck : decks) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            listsToMerge.add(deck.getQuizAttempts());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e merged \u003d mergeSortedListsAndRetrieveFirstK(listsToMerge, 10);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Collections.reverse(merged);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cDataPoint\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (var attempt : merged) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            LocalDateTime takenAt \u003d attempt.getTakenAt();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double scoreInPercentage \u003d attempt.getScore().getScoreInPercentage();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ret.add(new DataPoint(takenAt, scoreInPercentage));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * Helper function to get the first k latest QuizAttempts by takenAt, amongst a list of lists of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * QuizAttempts. We assume the lists of QuizAttempts in listsToMerge are sorted ascending order"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * by takenAt so we need to process each list from the end to start. Time complexity: O(k *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * log(numLists)) as we poll from a PQ of size numLists at most k times to form the return list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * of size k."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     * @param listsToMerge"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public static List\u003cQuizAttempt\u003e mergeSortedListsAndRetrieveFirstK("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cList\u003cQuizAttempt\u003e\u003e listsToMerge, int k) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int numLists \u003d listsToMerge.size();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (numLists \u003d\u003d 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        PriorityQueue\u003cPair\u003cQuizAttempt, Integer\u003e\u003e pq \u003d new PriorityQueue\u003c\u003e(numLists,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Collections.reverseOrder());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int[] ptrs \u003d new int[numLists]; // tracks current pos in each list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // make the initial pq of size numLists"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // by adding the biggest element (last element, if it exists) of each list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // to the pq. We also track which list this element is from."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c numLists; ++i) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            int idx \u003d listsToMerge.get(i).size() - 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (idx \u003e\u003d 0) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                ptrs[i] \u003d idx - 1;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                pq.add(new Pair\u003c\u003e(listsToMerge.get(i).get(idx), i));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        while (!pq.isEmpty()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Pair\u003cQuizAttempt, Integer\u003e pair \u003d pq.poll();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ret.add(pair.getFirst());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (ret.size() \u003d\u003d k) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                // we are done building a list of size k, let\u0027s return it"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                return ret;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            int listIdx \u003d pair.getSecond(); // this is the list the quiz attempt was taken from"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            if (ptrs[listIdx] \u003e\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                // if we still have elements from listIdx to consider i.e. our pointer has not"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                // gone past the start of the list, then we take the element at ptrs[listIdx]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                pq.add(new Pair\u003c\u003e(listsToMerge.get(listIdx).get(ptrs[listIdx]), listIdx));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                // and decrement the pointer position"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                ptrs[listIdx]--;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 226,
      "IlyaRin": 3,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Unused and deleted:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * grid pane, button, dialog pane, split pane,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * table view, tab pane, label, #tabs, text field, background,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * #tags and tagslabel"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * #filterField, personListPanel, personWebpage, result"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Darkest to brightest:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Dark Grey: #383838"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Pullman Green: #2B3E13 main color"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Dark moss green: 455A20 secondary color"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Dark olive green : #46651f even entry result"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Middle green yellow : #547925 odd entry result"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Brass : A5AF37  unused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Used in fxml*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 30%);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-border-color: derive(#2B3E13, 10%);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Used in the listing of entries*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#46651f, 20%);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#547925, 50%);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Right border for entry listings*/"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".deck-list {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-padding: 0 15 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Menu bar styling*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 50%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #46651f, #f5f5f5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Scroll bar*/"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: #383838"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 50%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Command box text settings*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: transparent #2B3E13 transparent #2B3E13;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-border-color: #2B3E13 #2B3E13 #ffffff #2B3E13;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Command box background colour*/"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: transparent, #455A20, transparent, #455A20;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/*Command box red font for fail commands*/"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/* Used in EntryListCard.fxml but unsure why*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Tab styling */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".tab  {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-padding: 0 0 7 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-border-width: 5px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-border-style: hidden hidden solid hidden;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Header */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".header {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Start Panel */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".header-message {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 35px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".command-message {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-padding: 10 0 40 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Quiz Panel */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".question {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".answer-list {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background: derive(#2B3E13, 40%);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 40%);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".quiz-bottom-panel {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-padding: 40 20 0 20;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".progress-bar .bar{"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: linear-gradient(green, #F8E9C7);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Remove the white space between horizontal and vertical scroll bars in quiz mode */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Score Panel */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".help-message {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/* Start Panel */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ".start-panel{"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-background-color: derive(#2B3E13, 20%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 80,
      "gabrielsimbingyang": 60,
      "-": 137
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"deck-list\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \u003cLabel text\u003d\"Decks\" styleClass\u003d\"header\" stylesheets\u003d\"DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"300\" maxWidth\u003d\"300\" minHeight\u003d\"45\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "      \u003cInsets right\u003d\"15\" left\u003d\"23\"\u003e\u003c/Insets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \u003c/ListView\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 2,
      "IlyaRin": 7,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/main/resources/view/EntryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/EntryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-legend-item{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "   -fx-font-size: 1.6em;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "     -fx-padding: 20px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    -fx-tick-label-fill: #FFFFFF;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 18,
      "IlyaRin": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "vigneshbhuvan-nus": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Green Tea\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.3-internal\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cImage url\u003d\"/images/green_tea_icon.png\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "          \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"300\" maxWidth\u003d\"300\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "              tabMinWidth\u003d\"150\" minWidth\u003d\"450\" minHeight\u003d\"360\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"start_panel\" text\u003d\"Start\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cStackPane fx:id\u003d\"startPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"entries_panel\" text\u003d\"Entries\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"quiz_panel\" text\u003d\"Quiz\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cStackPane fx:id\u003d\"quizPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003cTab id\u003d\"statistics_panel\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "              prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "              VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 18,
      "IlyaRin": 17,
      "-": 38,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/main/resources/view/QuizPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"question-box\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"progressBar\" styleClass\u003d\"progress-bar\" minWidth\u003d\"300\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"question\" minWidth\u003d\"300\" minHeight\u003d\"350\" maxWidth\u003d\"400\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003cInsets left\u003d\"30\" right\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cScrollPane styleClass\u003d\"answer-list\" minHeight\u003d\"400\" maxHeight\u003d\"400\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            maxWidth\u003d\"450\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cLabel fx:id\u003d\"answerList\" StackPane.alignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                        \u003cInsets left\u003d\"20\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003cInsets right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalQuestions\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003cInsets left\u003d\"20\" right\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionsAnswered\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u003cInsets right\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionsLeft\" styleClass\u003d\"quiz-bottom-panel\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4,
      "IlyaRin": 44
    }
  },
  {
    "path": "src/main/resources/view/ScorePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cLabel fx:id\u003d\"scoreMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cLabel fx:id\u003d\"finalScore\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cLabel fx:id\u003d\"encouragementMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help-message\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11
    }
  },
  {
    "path": "src/main/resources/view/StartPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cImageView fx:id\u003d\"greenTeaIcon\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"start-panel\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cLabel fx:id\u003d\"headerMessage\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        \u003cLabel fx:id\u003d\"commandMessage\" styleClass\u003d\"command-message\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1,
      "IlyaRin": 12
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx/11.0.3-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cLineChart fx:id\u003d\"statisticsLineChart\" title\u003d\"Stat Chart\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cxAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cyAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cNumberAxis side\u003d\"LEFT\" fx:id\u003d\"yAxis\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cLabel fx:id\u003d\"lastLoginLabel\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"header-message\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 26
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicateEntryAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"entries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \"Breakfast\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \"朝ご飯\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \"Breakfast\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \"朝ご飯\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidEntryAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"entries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \"WHAT\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \" \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalEntriesAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"entries\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Apple\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"りんご\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Bridge\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"橋\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Cat\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"猫\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Deadline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"締め切り\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Summer\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"verano\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Winter\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"invierno\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\" : \"Spring\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\" : \"primavera\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 25
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  \"addressBookFilePath\" : \"wordbank.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  \"addressBookFilePath\" : \"wordbank.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonWordBankStorageTest/invalidAndValidEntryWordBank.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"entries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \"WHAT\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \"なに\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \" \","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \"なに\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 9
    }
  },
  {
    "path": "src/test/data/JsonWordBankStorageTest/invalidEntryWordBank.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \"entries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"word\": \"Hello World\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    \"translation\": \"\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonWordBankStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Deck deck \u003d new Deck(new DeckName(\"test\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private LogicTestHelper logicTestHelper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonWordBankStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                new JsonWordBankStorage(temporaryFolder.resolve(\"wordbank.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper \u003d new LogicTestHelper(this.logic, this.model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandException(deleteCommand, MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_singlePlayCommandEmptyDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandException(\"/play\", MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 9,
      "-": 49,
      "gabrielsimbingyang": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicTestHelper.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class LogicTestHelper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a LogicTestHelper that has several assertion helper functions that are useful for testing commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param logic The logic used for testing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param model The model used for testing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public LogicTestHelper(Logic logic, Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        expectedModel.setWordBank(new WordBank());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 29,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_WORD_JAPANESE \u003d \"Earth\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_WORD_SPANISH \u003d \"Please\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_TRANSLATION_JAPANESE \u003d \"地球\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_TRANSLATION_SPANISH \u003d \"Por favor\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_DECK_NAME_JAPANESE \u003d \"Japanese\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_DECK_NAME_SPANISH \u003d \"Spanish\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String WORD_DESC_JAPANESE \u003d \" \" + PREFIX_WORD + VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String WORD_DESC_SPANISH \u003d \" \" + PREFIX_WORD + VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String TRANSLATION_DESC_JAPANESE \u003d \" \" + PREFIX_TRANSLATION + VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String TRANSLATION_DESC_SPANISH \u003d \" \" + PREFIX_TRANSLATION + VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_DECK_NAME \u003d \"\"; // blank deck name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_WORD_DESC \u003d \" \" + PREFIX_WORD + \" \"; // blank word"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_TRANSLATION_DESC \u003d \" \" + PREFIX_TRANSLATION + \"  \"; // blank translation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_JAPANESE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_SPANISH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DESC_JAPANESE \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DESC_SPANISH \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_SPANISH)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * - the address book, filtered entry list and selected entry in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank expectedWordBank \u003d new WordBank(actualModel.getWordBank());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(expectedWordBank, actualModel.getWordBank());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the entry at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static void showEntryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d model.getFilteredEntryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final String[] splitWord \u003d entry.getWord().word.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(new WordContainsKeywordsPredicate(Arrays.asList(splitWord[0])));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(1, model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 36,
      "-": 74,
      "gabrielsimbingyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/NewDeckCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Deck) for {@code NewDeckCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_newDeck_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedModel.addDeck(validDeck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandSuccess(new NewDeckCommand(validDeck), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(validDeck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Deck deckInList \u003d model.getWordBank().getDeckList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(new NewDeckCommand(deckInList), model, NewDeckCommand.MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 43,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/NewDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Tests for NewDeckCommand using a model stub to replace model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NewDeckCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_deckAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommandTest.ModelStubAcceptingDeckAdded modelStub \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new NewDeckCommandTest.ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        CommandResult commandResult \u003d new NewDeckCommand(validDeck).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.decks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand newDeckCommand \u003d new NewDeckCommand(validDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommandTest.ModelStub modelStub \u003d new NewDeckCommandTest.ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(CommandException.class, NewDeckCommand.MESSAGE_DUPLICATE_DECK, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                newDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck japanese \u003d new DeckBuilder().withDeckName(\"Japanese\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck spanish \u003d new DeckBuilder().withDeckName(\"Spanish\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addJapaneseCommand \u003d new NewDeckCommand(japanese);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addSpanishCommand \u003d new NewDeckCommand(spanish);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addJapaneseCommand.equals(addJapaneseCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addJapaneseCommandCopy \u003d new NewDeckCommand(japanese);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addJapaneseCommand.equals(addJapaneseCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(addSpanishCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public void setWordBank(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void selectDeck(Index index) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void replaceEntryList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void clearEntryList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void newGame() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Score endGame() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void playGame(String answer) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean checkScore() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean checkScoreTwo() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public View getCurrentView() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Leitner getLeitner() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int getCurrentIndex() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public QuizAttempt getQuizAttempt() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int setStatisticsDeckId(int deckIndex) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int getStatisticsDeckId() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that contains a single Deck."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubWithDeck extends NewDeckCommandTest.ModelStub {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that always accept the deck being added."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends NewDeckCommandTest.ModelStub {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private ArrayList\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return decks.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            decks.add(deck);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new WordBank();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 304,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/RemoveDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * {@code RemoveDeckCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_invalidRemoveIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        RemoveDeckCommand removeDeckCommand \u003d new RemoveDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(removeDeckCommand, model, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_validRemoveIndex_removeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Deck deck \u003d model.getFilteredDeckList().get(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        RemoveDeckCommand removeDeckCommand \u003d new RemoveDeckCommand(validIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        CommandResult commandResult \u003d removeDeckCommand.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(String.format(RemoveDeckCommand.MESSAGE_REMOVE_DECK_SUCCESS, deck),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 28,
      "gabrielsimbingyang": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/SelectDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class SelectDeckCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_deckSelectedByModel_selectSuccessful() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        CommandResult commandResult \u003d selectDeckCommand.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(String.format(SelectDeckCommand.MESSAGE_SELECT_DECK_SUCCESS, model.getCurrentDeck()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_invalidIndex_selectFail() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(Index.fromZeroBased(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                selectDeckCommand.execute(model));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Tests for add command. Contains integration tests with model and deck."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_noDeckSelected_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_NO_DECK_SELECTED, () -\u003e addCommand.execute(model));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_entryAcceptedByRealModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEntry).execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEntry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(Arrays.asList(validEntry), model.getFilteredEntryList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Leitner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Tests for AddCommand, using a model stub to replace model."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_entryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStubAcceptingEntryAdded modelStub \u003d new ModelStubAcceptingEntryAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEntry).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEntry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(Arrays.asList(validEntry), modelStub.entriesAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateEntry_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEntry);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEntry(validEntry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENTRY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry apple \u003d new EntryBuilder().withWord(\"Apple\").withTranslation(\"りんご\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry banana \u003d new EntryBuilder().withWord(\"Banana\").withTranslation(\"バナナ\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddCommand(banana);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public void setWordBank(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void selectDeck(Index index) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void replaceEntryList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void clearEntryList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void newGame() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Score endGame() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void playGame(String answer) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean checkScore() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean checkScoreTwo() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public View getCurrentView() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Leitner getLeitner() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int getCurrentIndex() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int setStatisticsDeckId (int deckIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public int getStatisticsDeckId() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public QuizAttempt getQuizAttempt() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Deck stub which accepts all entries"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class DeckStub extends Deck {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private ArrayList\u003cEntry\u003e entries;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private DeckStub(String deckName) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            super(new DeckName(deckName));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void add(Entry entry) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            entries.add(entry);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that contains a single entry."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubWithEntry extends ModelStub {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final Entry entry;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private ModelStubWithEntry(Entry entry) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.entry \u003d entry;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return this.entry.isSameEntry(entry);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new DeckStub(\"stub\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that always accept the entry being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubAcceptingEntryAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final ArrayList\u003cEntry\u003e entriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return entriesAdded.stream().anyMatch(entry::isSameEntry);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            entriesAdded.add(entry);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new DeckStub(\"stub\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return new WordBank();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void replaceEntryList() {}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setCurrentView(View view) {}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 335,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Model and Deck) and unit tests for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void showNoEntry(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(p -\u003e false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(model.getFilteredEntryList().isEmpty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 12,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model \u003d new ModelManager(new WordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deck \u003d new Deck(new DeckName(\"Stub\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new EntryBuilder(new Entry (new Word(VALID_WORD_JAPANESE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new Translation(VALID_TRANSLATION_JAPANESE))).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry secondEntry \u003d new EntryBuilder(new Entry(new Word(VALID_WORD_SPANISH),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new Translation(VALID_TRANSLATION_SPANISH))).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addEntry(entry);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addEntry(secondEntry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateEntryUnfilteredList_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry firstEntry \u003d model.getFilteredEntryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(firstEntry).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateEntryFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entryInList \u003d model.getFilteredEntryList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new EditEntryDescriptorBuilder(entryInList).build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_invalidEntryIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEntryList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_JAPANESE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor copyDescriptor \u003d new EditEntryDescriptor(DESC_JAPANESE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_JAPANESE)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_SPANISH)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 73,
      "-": 32,
      "gabrielsimbingyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/EditEntryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EditEntryDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptorWithSameValues \u003d new EditEntryDescriptor(DESC_JAPANESE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DESC_JAPANESE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DESC_JAPANESE.equals(DESC_JAPANESE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(DESC_SPANISH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor editedAmy \u003d new EditEntryDescriptorBuilder(DESC_JAPANESE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different translation -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_JAPANESE).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 21,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/play/AnswerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicTestHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonWordBankStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class AnswerCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final Entry entry \u003d new Entry(new Word(\"abc\"), new Translation(\"123\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private final Deck deck \u003d new Deck(new DeckName(\"test\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private LogicTestHelper logicTestHelper;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonWordBankStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            new JsonWordBankStorage(temporaryFolder.resolve(\"wordbank.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Logic logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logicTestHelper \u003d new LogicTestHelper(logic, this.model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void execute_answerCommandUntilDeckLimit_throwParseException()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        logicTestHelper"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .assertCommandSuccess(\"/stop\", \"Playmode stopped! Your score was not recorded!\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void execute_answerCommandWithStopCommandWord_throwParseException()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logicTestHelper.assertCommandSuccess(\"answer\", \"Your score was 0 / 1\", model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            logicTestHelper.assertParseException(\"another answer\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 28,
      "gabrielsimbingyang": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/play/PlayCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_DECK_SELECTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicTestHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonWordBankStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class PlayCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Entry entry \u003d new Entry(new Word(\"abc\"), new Translation(\"123\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Deck deck \u003d new Deck(new DeckName(\"test\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private LogicTestHelper logicTestHelper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonWordBankStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                new JsonWordBankStorage(temporaryFolder.resolve(\"wordbank.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper \u003d new LogicTestHelper(this.logic, this.model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_singlePlayCommandWithoutSelectedDeck_throwCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandException(\"/play\", MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_singlePlayCommandSelectedButEmptyDeck_throwCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandException(\"/play\", MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_singlePlayCommandWithSelectedAndFullDeck_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(entry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_doublePlayCommandWithSelectedDeck_throwCommandException() throws CommandException,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(entry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandException(\"/play\", \"Already in play mode\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/play/StopCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.commands.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.LogicTestHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.JsonWordBankStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class StopCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Entry entry \u003d new Entry(new Word(\"abc\"), new Translation(\"123\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Deck deck \u003d new Deck(new DeckName(\"test\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private LogicTestHelper logicTestHelper;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonWordBankStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                new JsonWordBankStorage(temporaryFolder.resolve(\"wordbank.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(entry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper \u003d new LogicTestHelper(this.logic, this.model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_stopCommandWithoutStartCommand_throwParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertParseException(\"/stop\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_stopCommandWithPlayCommand_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/stop\", \"Playmode stopped! Your score was not recorded!\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void execute_stopCommandWithPlayCommandTwice_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/stop\", \"Playmode stopped! Your score was not recorded!\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/play\", \"Playmode Started\", model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertCommandSuccess(\"/stop\", \"Playmode stopped! Your score was not recorded!\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        logicTestHelper.assertParseException(\"/stop\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandModeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class CommandModeParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final CommandModeParser parser \u003d new CommandModeParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(entry));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new AddCommand(entry), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + EntryUtil.getEditEntryDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 18,
      "-": 60,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_WORD \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_TRANSLATION \u003d \"      \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_WORD \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_TRANSLATION \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWord((String) null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWord(INVALID_WORD));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_validValueWithoutWhitespace_returnsWord() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(VALID_WORD));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_validValueWithWhitespace_returnsTrimmedWord() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String wordWithWhitespace \u003d WHITESPACE + VALID_WORD + WHITESPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(wordWithWhitespace));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTranslation((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTranslation(INVALID_TRANSLATION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_validValueWithoutWhitespace_returnsTranslation() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation expectedTranslation \u003d new Translation(VALID_TRANSLATION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedTranslation, ParserUtil.parseTranslation(VALID_TRANSLATION));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_validValueWithWhitespace_returnsTrimmedTranslation() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String translationWithWhitespace \u003d WHITESPACE + VALID_TRANSLATION + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation expectedTranslation \u003d new Translation(VALID_TRANSLATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedTranslation, ParserUtil.parseTranslation(translationWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 31,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/NewDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private NewDeckCommandParser parser \u003d new NewDeckCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_fieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_SPANISH,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_JAPANESE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_DECK_NAME, String.format(DeckName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                NewDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/RemoveDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private RemoveDeckCommandParser parser \u003d new RemoveDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemoveDeckCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/SelectDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.logic.commands.deck.SelectDeckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class SelectDeckCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private SelectDeckCommandParser parser \u003d new SelectDeckCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSLATION_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_SPANISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.AddCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(SPANISH).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // multiple words - last word accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_JAPANESE + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // multiple translations - last translation accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_SPANISH + TRANSLATION_DESC_JAPANESE + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(JAPANESE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_JAPANESE + TRANSLATION_DESC_JAPANESE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // missing word prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_SPANISH + TRANSLATION_DESC_SPANISH, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // missing translation prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_SPANISH + VALID_TRANSLATION_SPANISH, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_SPANISH + VALID_TRANSLATION_SPANISH,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + TRANSLATION_DESC_SPANISH, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid translation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_SPANISH + INVALID_TRANSLATION_DESC, Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + TRANSLATION_DESC_SPANISH, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 40,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSLATION_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.EditCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"-5\" + WORD_DESC_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"0\" + WORD_DESC_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC, Word.MESSAGE_CONSTRAINTS); // invalid word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSLATION_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                Translation.MESSAGE_CONSTRAINTS); // invalid translation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + INVALID_TRANSLATION_DESC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE + WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // translation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + TRANSLATION_DESC_JAPANESE + TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 46,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/statistics/StatisticsManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "class StatisticsManagerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void test_newStatisticsManagerShouldHaveOneLoginEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getStatistics().getEventLog().size(), 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getStatistics().getEventLog().get(0).getEventType(), EventType.LOGIN);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testGetLastLogin_ifEventsHas1Login_shouldBeNull() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertNull(sm.getLastLogin());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testGetLastLoginString_ifEventsHas1Login_shouldBePlaceholder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getLastLoginString(), \"None - first login.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testGetLastLogin_ifEventsHas2Logins_shouldBeCorrect() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event1 \u003d sm.getStatistics().getEventLog().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getLastLogin(), event1.getLocalDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testGetLastLogin_ifEventsHasSomeLoginLogoutEvents_shouldBeSecondLatestLogin() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event1 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event2 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event3 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getLastLogin(), event2.getLocalDateTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testGetLastLogin_ifEventsHasMoreRandomEvents_shouldBeSecondLatestLogin() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        StatisticsManager sm \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event1 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event2 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event event3 \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; ++i) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            ; // simulate blocking"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Event correctEvent \u003d sm.getStatistics().getEventLog()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .get(sm.getStatistics().getEventLog().size() - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogout();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        sm.getStatistics().registerAppLogin();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(sm.getLastLogin(), correctEvent.getLocalDateTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 111,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/statistics/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "class StatisticsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testTimesOpened_forNoArgsConstructor_shouldBeInitially0() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getTimesOpened(), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testEventLog_forNoArgsConstructor_shouldInitiallyBeEmpty() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testTimesOpened_forConstructorWithArgs_shouldBeCorrect() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cEvent\u003e eventLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int timesOpened \u003d 999;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics(timesOpened, eventLog);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getTimesOpened(), timesOpened);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testEventLog_forConstructorWithArgs_shouldBeCorrect() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cEvent\u003e eventLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        eventLog.add(new Event(EventType.LOGIN));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int timesOpened \u003d 999;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics(timesOpened, eventLog);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog(), eventLog);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testTimesOpened_for1RegisterLogin_shouldBeCorrect() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogin();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().get(0).getEventType(), EventType.LOGIN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testTimesOpened_for1RegisterLoginLogout_shouldBeCorrect() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogin();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogout();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().get(0).getEventType(), EventType.LOGIN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testTimesOpened_forMultipleLoginLogouts_shouldBeCorrect() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogin();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        statistics.registerAppLogout();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().size(), 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertEquals(statistics.getEventLog().get(0).getEventType(), EventType.LOGIN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; ++i) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            statistics.registerAppLogin();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; ++i) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            statistics.registerAppLogout();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(statistics.getEventLog().stream().filter(event -\u003e event.getEventType()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \u003d\u003d EventType.LOGIN).count(), 6);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 89,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(new WordBank(), new WordBank(modelManager.getWordBank()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEntry(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDeck(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        modelManager.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank wordBank \u003d new AddressBookBuilder().withDeck(JAPANESE_DECK).withDeck(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank differentWordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        modelManager \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // different wordBank -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWordBank, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        modelManager.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(wordBank, differentUserPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 17,
      "-": 105,
      "gabrielsimbingyang": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WordBankTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class WordBankTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final WordBank wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(Collections.emptyList(), wordBank.getDeckList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(newData, wordBank);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void resetData_withDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // Two decks with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(JAPANESE_DECK, editedJapaneseDeck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankStub newData \u003d new WordBankStub(newDecks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e wordBank.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.hasDeck(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertFalse(wordBank.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertTrue(wordBank.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck_emptyAddressBook_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wordBank.getDeckList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck_entryInAddressBook_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ObservableList deckListCopy \u003d wordBank.getDeckList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.addDeck(validDeck);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.removeDeck(validDeck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(deckListCopy, wordBank.getDeckList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertTrue(wordBank.hasDeck(editedJapaneseDeck));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toString_emptyAddressBook_returnsZeroDecks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String expectedString \u003d wordBank.getObservedEntries().asUnmodifiableObservableList().size() + \" decks\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(expectedString, wordBank.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * A stub ReadOnlyWordBank whose entries list can violate interface constraints."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static class WordBankStub implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBankStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 88,
      "gabrielsimbingyang": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeckName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidDeckName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidDeckName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeckName(invalidDeckName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidDeckNameLength_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        //Deck name of length 101 characters. Maximum deck name length is 100 characters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidDeckNameLength \u003d \"01234567890123456789012345678901234567890123456789\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"0123456789012345678901234567890123456789012345678910\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeckName(invalidDeckNameLength));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getDeckNameTest_validDeckName_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String test \u003d \"test\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeckName deckName \u003d new DeckName(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(deckName.getDeckName(), test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidDeckNameLength() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // maximum deck name length"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidLength(\"012345678901234567890123456789012345678901234567890123456789\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"0123456789012345678901234567890123456789\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // exceed maximum deck name length"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DeckName.isValidLength(\"012345678901234567890123456789012345678901234567890123456789\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"01234567890123456789012345678901234567890\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // below maximum deck name length"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidLength(\"012345678901234567890123456789012345678901234567890123456789\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + \"012345678901234567890123456789012345678\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidDeckName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null deck name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DeckName.isValidDeckName(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid deck name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DeckName.isValidDeckName(\"\")); // empty string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DeckName.isValidDeckName(\" \")); // spaces only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid deck name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"French\")); // allows alphabets"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Español\")); // allows special characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"日本語\")); // allows special characters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Korean 1\")); // allows numbers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Japanese Intermediate 2 Lesson 5\")); // long names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.scoring.BinaryScoring;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Deck deckTest \u003d new Deck(new DeckName(\"Test\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Entry validEntry \u003d new Entry(new Word(\"Hello\"), new Translation(\"Hola\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addQuizAttempt_validQuizAttempt_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ArrayList\u003cQuizAttempt\u003e quizAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        QuizAttempt validQuizAttempt \u003d new QuizAttempt(new BinaryScoring());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        quizAttempts.add(validQuizAttempt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.addQuizAttempt(validQuizAttempt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(quizAttempts, deckTest.getQuizAttempts());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setQuizAttempts_validQuizAttempts_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ArrayList\u003cQuizAttempt\u003e quizAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        QuizAttempt validQuizAttempt \u003d new QuizAttempt(new BinaryScoring());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        quizAttempts.add(validQuizAttempt);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.setQuizAttempts(quizAttempts);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(quizAttempts, deckTest.getQuizAttempts());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.isSameDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck name -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).withDeckName(VALID_WORD_JAPANESE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(editedJapaneseDeck));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same deck name -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedSpanishDeck \u003d new DeckBuilder(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(SPANISH_DECK.isSameDeck(editedSpanishDeck));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck japaneseCopy \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(japaneseCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(JAPANESE_DECK));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(SPANISH_DECK));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapanese \u003d new DeckBuilder(JAPANESE_DECK).withDeckName(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(editedJapanese));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setEntries() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        UniqueEntryList list \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.add(validEntry);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckTest.setEntries(list);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(list, deckTest.getEntries());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void hasEntry() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckTest.addEntry(validEntry);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertTrue(deckTest.hasEntry(validEntry));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeEntry_validEntry_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ObservableList\u003cEntry\u003e entryListCopy \u003d deckTest.getEntryList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.addEntry(validEntry);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.removeEntry(validEntry);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(entryListCopy, deckTest.getEntryList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_validEntry_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry otherEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.addEntry(validEntry);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ObservableList\u003cEntry\u003e entryListCopy \u003d deckTest.getEntryList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckTest.setEntry(validEntry, otherEntry);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(entryListCopy, deckTest.getEntryList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 94,
      "gabrielsimbingyang": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueDeckList.contains(editedJapaneseDeck));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.add(JAPANESE_DECK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(null, JAPANESE_DECK));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, JAPANESE_DECK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, JAPANESE_DECK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapanese \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, editedJapanese);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(editedJapanese);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, SPANISH_DECK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueIdentity_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, SPANISH_DECK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.remove(JAPANESE_DECK));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.remove(JAPANESE_DECK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(SPANISH_DECK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(JAPANESE_DECK, JAPANESE_DECK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDecks(listWithDuplicateDecks));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueDeckList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/EntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isSameEntry() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.isSameEntry(JAPANESE_1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.isSameEntry(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different translation -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word, same translation -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same word, same translation -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry japaneseCopy \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.equals(japaneseCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.equals(editedJapanese));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.equals(JAPANESE_1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(SPANISH));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different translation -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(editedJapanese));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/TranslationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TranslationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Translation(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidTranslation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidTranslation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Translation(invalidTranslation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidTranslation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null translation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Translation.isValidTranslation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // blank translation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Translation.isValidTranslation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Translation.isValidTranslation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid translation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // special characters local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"a1+be!@example1.com\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Translation validTranslation \u003d new Translation(\"I like green tea ice cream\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Object object \u003d (Object) new Translation(\"I like green tea ice cream\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertTrue(validTranslation.equals(validTranslation)); //same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertFalse(validTranslation.equals(null)); //null object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertTrue(validTranslation.equals(object));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 43,
      "gabrielsimbingyang": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/UniqueEntryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueEntryList uniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(uniqueEntryList.contains(JAPANESE_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueEntryList.contains(JAPANESE_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueEntryList.contains(editedJapanese));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_duplicateEntry_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.add(JAPANESE_1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_nullTargetEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(null, JAPANESE_1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_nullEditedEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_targetEntryNotInList_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, JAPANESE_1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryIsSameEntry_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, JAPANESE_1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, editedJapanese);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(editedJapanese);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, SPANISH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasNonUniqueIdentity_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, SPANISH));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_entryDoesNotExist_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.remove(JAPANESE_1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_existingEntry_removesEntry() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.remove(JAPANESE_1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_nullUniqueEntryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntries((UniqueEntryList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_uniqueEntryList_replacesOwnListWithProvidedUniqueEntryList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntries(expectedUniqueEntryList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntries((List\u003cEntry\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e entryList \u003d Collections.singletonList(SPANISH);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntries(entryList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_listWithDuplicateEntries_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e listWithDuplicateEntries \u003d Arrays.asList(JAPANESE_1, JAPANESE_1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntries(listWithDuplicateEntries));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            -\u003e uniqueEntryList.asUnmodifiableObservableList().remove(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void length_emptyList_returnsListLengthZero() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(uniqueEntryList.length(), 0);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void length_oneEntryList_returnsListLengthOne() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(new EntryBuilder().build());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(uniqueEntryList.length(), 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isEmpty_emptyList_returnsTrue() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueEntryList.isEmpty());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isEmpty_oneEntryList_returnsFalse() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(new EntryBuilder().build());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(uniqueEntryList.isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void get_emptyList_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e uniqueEntryList.get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/WordContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d new WordContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicateCopy \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void test_wordContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void test_wordDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // Keywords match phone, translation and address, but does not match word"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 25,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/WordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Word(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidWord \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Word(invalidWord));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidWord() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Word.isValidWord(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Word.isValidWord(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Word.isValidWord(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"David Roger Jackson Ray Jr 2nd\")); // long words"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/play/LeitnerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.model.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuestionAttempt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class LeitnerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static Leitner leitner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    private static Deck deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    static void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        deck \u003d new Deck(new DeckName(\"deck_1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; ++i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            deck.addEntry(new Entry(new Word(Integer.toString(i)), new Translation("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                Integer.toString(i))));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        leitner \u003d new Leitner(deck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void test_leitnerShuffleNewDeckTwice_shouldGiveDifferentDecks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Leitner leitner1 \u003d new Leitner(deck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        ArrayList\u003cEntry\u003e entryList1 \u003d leitner1.getEntries();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        assertNotEquals(entryList1, deck.getEntryList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void test_leitnerShufflePlayedOnceDeck_shouldGiveCorrectResults() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        QuizAttempt quizAttempt \u003d new QuizAttempt();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        HashMap\u003cString, Double\u003e qnToScore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; ++i) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double score \u003d Math.random();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizAttempt.getQuestionAttempts()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .add(new QuestionAttempt(Integer.toString(i), Integer.toString(i), score));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            qnToScore.put(Integer.toString(i), score);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        deck.addQuizAttempt(quizAttempt);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Leitner leitner2 \u003d new Leitner(deck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        quizAttempt.getQuestionAttempts().sort(Comparator"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .comparing(QuestionAttempt::getScore));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 99; ++i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            String s1 \u003d leitner2.getEntries().get(i).getWord().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            String s2 \u003d leitner2.getEntries().get(i + 1).getWord().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertTrue(qnToScore.get(s1) \u003c\u003d qnToScore.get(s2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    public void test_leitnerShufflePlayedMultipleDeck_shouldGiveCorrectResults() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        QuizAttempt quizAttempt1 \u003d new QuizAttempt();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        QuizAttempt quizAttempt2 \u003d new QuizAttempt();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; ++i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double score \u003d Math.random();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            QuestionAttempt temp \u003d new QuestionAttempt(Integer.toString(i), Integer.toString(i),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                score);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizAttempt1.getQuestionAttempts()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .add(temp);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        deck.addQuizAttempt(quizAttempt1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; ++i) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double score \u003d Math.random();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            QuestionAttempt temp \u003d new QuestionAttempt(Integer.toString(i), Integer.toString(i),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                score);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizAttempt2.getQuestionAttempts()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .add(temp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        deck.addQuizAttempt(quizAttempt2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Leitner leitner \u003d new Leitner(deck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        quizAttempt2.getQuestionAttempts().sort(Comparator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            .comparing(QuestionAttempt::getScore));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; ++i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Entry entry \u003d leitner.getEntries().get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals(entry.getTranslation().toString(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                quizAttempt2.getQuestionAttempts().get(i).getAnswer());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 79,
      "gabrielsimbingyang": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/play/ScoreTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.play;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class ScoreTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Score score \u003d new Score(INDEX_THIRD.getZeroBased(), INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getMaxScoreTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(score.getMaxScore(), INDEX_THIRD.getZeroBased());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getYourScoreTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(score.getYourScore(), INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getScoreInPercentageTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        double expectedPercentage \u003d ((double) INDEX_SECOND.getZeroBased() / INDEX_THIRD.getZeroBased()) * 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedPercentage, score.getScoreInPercentage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedString \u003d \"Score{maxScore\u003d\" + (double) INDEX_THIRD.getZeroBased() + \", yourScore\u003d\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + (double) INDEX_SECOND.getZeroBased() + \"}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedString, score.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/play/scoring/BinaryScoringTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class BinaryScoringTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private BinaryScoring binaryScoring \u003d new BinaryScoring();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void computeScore_sameGuess_returnsOne() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String guess \u003d JAPANESE_1.getWord().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(binaryScoring.computeScore(guess, guess), 1.0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void computeScore_wrongGuess_returnsZero() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String guess \u003d JAPANESE_1.getWord().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String answer \u003d SPANISH_3.getWord().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(binaryScoring.computeScore(guess, answer), 0.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/play/scoring/QuizAttemptTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.model.play.scoring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "class QuizAttemptTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private WordBank wordBankTest \u003d new WordBank();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Deck japaneseSampleDeckTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deck \u003d new Deck(new DeckName(\"Japanese\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry (new Word(\"Apple\"), new Translation(\"りんご\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry (new Word(\"Bridge\"), new Translation(\"橋\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry (new Word(\"Cat\"), new Translation(\"猫\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Deck spanishSampleDeckTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deck \u003d new Deck (new DeckName(\"Spanish\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry (new Word(\"Summer\"), new Translation(\"verano\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"Winter\"), new Translation(\"invierno\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"Spring\"), new Translation(\"primavera\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getSampleAddressBook_sameFieldsAddressBook_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBankTest.addDeck(japaneseSampleDeckTest());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBankTest.addDeck(spanishSampleDeckTest());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertEquals(wordBankTest, SampleDataUtil.getSampleAddressBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 35,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final JsonAdaptedWord INVALID_JsonAdaptedWord \u003d new JsonAdaptedWord(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final JsonAdaptedTranslation INVALID_JsonAdaptedTranslation \u003d new JsonAdaptedTranslation(\"      \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final JsonAdaptedWord VALID_JsonAdaptedWord \u003d new JsonAdaptedWord(JAPANESE_2.getWord());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final JsonAdaptedTranslation VALID_JsonAdaptedTranslation \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "            new JsonAdaptedTranslation(JAPANESE_2.getTranslation());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_validEntryDetails_returnsEntry() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(JAPANESE_2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(JAPANESE_2, entry.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_invalidJsonAdaptedWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                new JsonAdaptedEntry(INVALID_JsonAdaptedWord, VALID_JsonAdaptedTranslation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d Word.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_nullJsonAdaptedWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(null, VALID_JsonAdaptedTranslation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedWord.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_invalidJsonAdaptedTranslation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                new JsonAdaptedEntry(VALID_JsonAdaptedWord, INVALID_JsonAdaptedTranslation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d Translation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_nullJsonAdaptedTranslation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_JsonAdaptedWord, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                JsonAdaptedTranslation.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 20,
      "IlyaRin": 14,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableWordBankTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "//import seedu.address.testutil.entry.TypicalEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class JsonSerializableWordBankTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWordBankTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final Path TYPICAL_ENTRIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEntriesAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final Path INVALID_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEntryWordBank.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    private static final Path DUPLICATE_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEntryAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_typicalEntriesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ENTRIES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        WordBank addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        WordBank typicalEntriesAddressBook \u003d TypicalEntries.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        assertEquals(addressBookFromFile, typicalEntriesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_invalidEntryFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ENTRY_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //                JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void toModelType_duplicateEntries_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ENTRY_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //                JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        assertThrows(IllegalValueException.class, JsonSerializableWordBank.MESSAGE_DUPLICATE_DECK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 34,
      "gabrielsimbingyang": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"wordbank.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonWordBankStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class JsonWordBankStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWordBankStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWordBank\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return new JsonWordBankStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatWordBank.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void readAddressBook_invalidEntryAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidEntryWordBank.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //Commented out this test, will try to sort out the issue and re-include."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        WordBank original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        JsonWordBankStorage jsonAddressBookStorage \u003d new JsonWordBankStorage(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        // Save in new file and read back"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        System.out.println (original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        ReadOnlyWordBank readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        original.addDeck(FRENCH_DECK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        // Save and read without specifying file path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        original.addDeck(GERMAN_DECK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    //        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private void saveAddressBook(ReadOnlyWordBank addressBook, String filePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            new JsonWordBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new WordBank(), null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 18,
      "IlyaRin": 2,
      "-": 63,
      "gabrielsimbingyang": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        JsonWordBankStorage addressBookStorage \u003d new JsonWordBankStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //Commented out test, will try to fix and reinclude"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //         * {@link JsonWordBankStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonWordBankStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        WordBank original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //            storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        ReadOnlyWordBank retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    //        assertEquals(original, new WordBank(retrieved));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 54,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " *     {@code WordBank ab \u003d new AddressBookBuilder().withEntry(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private WordBank wordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public AddressBookBuilder(WordBank wordBank) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Adds a new {@code Deck} to the {@code WordBank} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public AddressBookBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        wordBank.addDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public WordBank build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 2,
      "-": 22,
      "gabrielsimbingyang": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the middle index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the last index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the entry in the {@code model}\u0027s entry list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Entry getEntry(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getFilteredEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/deck/DeckBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_DECK_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private DeckName deckName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code DeckBuilder} with the default details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckName \u003d new DeckName(DEFAULT_DECK_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code deckToCopy}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckName \u003d deckToCopy.getDeckName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code DeckName} of the {@code DeckName} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder withDeckName(String deckName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d new DeckName(deckName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Deck(deckName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/deck/TypicalDecks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck JAPANESE_DECK \u003d new DeckBuilder().withDeckName(\"Japanese\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck SPANISH_DECK \u003d new DeckBuilder().withDeckName(\"Spanish\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck KOREAN_DECK \u003d new DeckBuilder().withDeckName(\"Korean\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck FRENCH_DECK \u003d new DeckBuilder().withDeckName(\"French\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck GERMAN_DECK \u003d new DeckBuilder().withDeckName(\"German\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private TypicalDecks() {} // prevents instantiation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns an {@code WordBank} with all the typical decks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static WordBank getTypicalAddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank ab \u003d new WordBank();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            ab.addDeck(deck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAPANESE_DECK, SPANISH_DECK, KOREAN_DECK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 29,
      "gabrielsimbingyang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EditEntryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class to help with building EditEntryDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EditEntryDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private EditEntryDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.descriptor \u003d new EditEntryDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an {@code EditEntryDescriptor} with fields containing {@code entry}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder(Entry entry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setWord(entry.getWord());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setTranslation(entry.getTranslation());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Word} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder withWord(String word) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setWord(new Word(word));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Translation} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder withTranslation(String translation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setTranslation(new Translation(translation));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EntryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_WORD \u003d \"Apple Pear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_TRANSLATION \u003d \"りんご　梨\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Word word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Translation translation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d new Word(DEFAULT_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d new Translation(DEFAULT_TRANSLATION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Initializes the EntryBuilder with the data of {@code entryToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param entryToCopy Entry used to initialize the entry builder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d entryToCopy.getWord();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d entryToCopy.getTranslation();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Word} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param word Word to set the word field of the entry builder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Entry builder with the given word."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder withWord(String word) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d new Word(word);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Translation} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param translation Translation to set the translation field of the entry builder."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Entry builder with the given translation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder withTranslation(String translation) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d new Translation(translation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates an entry using the data fields in the entry builder"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return Entry with data from the entry builder"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(word, translation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EntryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class for Entry."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an add command string for adding the {@code entry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getAddCommand(Entry entry) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the part of command string for the given {@code entry}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getEntryDetails(Entry entry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sb.append(PREFIX_WORD + entry.getWord().word + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sb.append(PREFIX_TRANSLATION + entry.getTranslation().translation + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the part of command string for the given {@code EditEntryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getEditEntryDescriptorDetails(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.getWord().ifPresent(word -\u003e sb.append(PREFIX_WORD).append(word.word).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.getTranslation().ifPresent(translation -\u003e sb.append(PREFIX_TRANSLATION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(translation.translation).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/TypicalEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.WordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_1 \u003d new EntryBuilder().withWord(\"Apple\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"りんご\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_2 \u003d new EntryBuilder().withWord(\"Bridge\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"橋\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_3 \u003d new EntryBuilder().withWord(\"Cat\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"猫\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_4 \u003d new EntryBuilder().withWord(\"Deadline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"締め切り\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_1 \u003d new EntryBuilder().withWord(\"Summer\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"verano\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_2 \u003d new EntryBuilder().withWord(\"Winter\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"invierno\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_3 \u003d new EntryBuilder().withWord(\"Spring\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"primavera\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    // Manually added - Entry\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE \u003d new EntryBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH \u003d new EntryBuilder().withWord(VALID_WORD_SPANISH)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private TypicalEntries() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns an {@code WordBank} with all the typical entries."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return WordBank with all the typical entries in it"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static WordBank getTypicalAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        WordBank ab \u003d new WordBank();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            ab.addEntry(entry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the typical entries in a list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return List of typical entries"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static List\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAPANESE_1, JAPANESE_2, JAPANESE_3, JAPANESE_4,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                SPANISH_1, SPANISH_2, SPANISH_3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 58,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/panels/StatisticsPanelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import java.util.concurrent.ThreadLocalRandom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.Score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "import seedu.address.model.play.scoring.QuizAttempt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "class StatisticsPanelTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static List\u003cList\u003cQuizAttempt\u003e\u003e listsToMerge;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static List\u003cQuizAttempt\u003e correctMostRecent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int maxTotalScore \u003d 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int minTotalScore \u003d 10;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int attempts \u003d 500;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int maxLists \u003d 100;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private int minLists \u003d 10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private long startDate \u003d LocalDateTime.of(2020, 5, 1, 0, 0).atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        .toEpochSecond();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private long endDate \u003d LocalDateTime.of(2020, 12, 1, 0, 0).atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        .toEpochSecond();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        listsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        int numberOfLists \u003d rand.nextInt(maxLists - minLists + 1) + minLists;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // generate random number of buckets"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfLists; ++i) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            listsToMerge.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // generate many random quiz attempts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // each with randomized scores (between 1 and 100) and takenAts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        // and place each quiz attempt in a random bucket"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (int i \u003d 0; i \u003c attempts; ++i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            QuizAttempt quizAttempt \u003d new QuizAttempt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double totalScore \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                rand.nextInt((maxTotalScore - minTotalScore) + 1) + minTotalScore;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            double yourScore \u003d rand.nextDouble() * totalScore;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            Score score \u003d new Score(totalScore, yourScore);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizAttempt.setScore(score);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            LocalDateTime takenAt \u003d LocalDateTime"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                .ofInstant(Instant.ofEpochSecond(ThreadLocalRandom.current().nextLong("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    startDate,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    endDate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                )), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            quizAttempt.setTakenAt(takenAt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            // System.out.println(quizAttempt.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            int listIdx \u003d rand.nextInt(numberOfLists);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            listsToMerge.get(listIdx).add(quizAttempt);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //for(int i\u003d0;i\u003cnumberOfLists;++i){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //    System.out.println(listsToMerge.get(i).size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (var list : listsToMerge) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            list.sort(Comparator.comparing(QuizAttempt::getTakenAt));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (var list : listsToMerge) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                System.out.println(list.get(list.size() - 1).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                System.out.println(list.get(list.size() - 2).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                System.out.println(list.get(list.size() - 3).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //            } catch (Exception ignored) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            temp.addAll(list);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        temp.sort(Comparator.comparing(QuizAttempt::getTakenAt).reversed());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        correctMostRecent \u003d temp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        correctMostRecent \u003d temp.subList(0, 10); // this is our correct 10 most recent elements"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testMergeSortedListsAndRetrieveFirstK_forKEquals10_shouldGiveCorrectResult() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int k \u003d 10;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ans \u003d StatisticsPanel.mergeSortedListsAndRetrieveFirstK(listsToMerge, k);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (int i \u003d 0; i \u003c k; ++i) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (var i : ans) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(i.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(ans.size(), k); ++i) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //            System.out.println("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                \"-----------\" + i + \", \" + ans.get(i).getTakenAtAndScoreInPercentage() + \" | \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                    + correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                correctMostRecent.get(i).getTakenAtAndScoreInPercentage(), ans.get(i)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    .getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testMergeSortedListsAndRetrieveFirstK_forKEquals20_shouldGiveCorrectResult() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int k \u003d 20;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ans \u003d StatisticsPanel.mergeSortedListsAndRetrieveFirstK(listsToMerge, k);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (int i \u003d 0; i \u003c k; ++i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (var i : ans) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(i.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(ans.size(), k); ++i) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //            System.out"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            //                .println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + i + \", \" + ans.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                correctMostRecent.get(i).getTakenAtAndScoreInPercentage(), ans.get(i)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    .getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testMergeSortedListsAndRetrieveFirstK_forKEquals30_shouldGiveCorrectResult() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int k \u003d 30;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ans \u003d StatisticsPanel.mergeSortedListsAndRetrieveFirstK(listsToMerge, k);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (int i \u003d 0; i \u003c k; ++i) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (var i : ans) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(i.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(ans.size(), k); ++i) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                correctMostRecent.get(i).getTakenAtAndScoreInPercentage(), ans.get(i)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    .getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testMergeSortedListsAndRetrieveFirstK_forKEquals50_shouldGiveCorrectResult() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int k \u003d 50;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ans \u003d StatisticsPanel.mergeSortedListsAndRetrieveFirstK(listsToMerge, k);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (int i \u003d 0; i \u003c k; ++i) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (var i : ans) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(i.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(ans.size(), k); ++i) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                correctMostRecent.get(i).getTakenAtAndScoreInPercentage(), ans.get(i)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    .getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void testMergeSortedListsAndRetrieveFirstK_forKEquals100_shouldGiveCorrectResult() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        int k \u003d 100;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        List\u003cQuizAttempt\u003e ans \u003d StatisticsPanel.mergeSortedListsAndRetrieveFirstK(listsToMerge, k);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (int i \u003d 0; i \u003c k; ++i) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(correctMostRecent.get(i).getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        for (var i : ans) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //            System.out.println(i.getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(ans.size(), k); ++i) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                correctMostRecent.get(i).getTakenAtAndScoreInPercentage(), ans.get(i)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                    .getTakenAtAndScoreInPercentage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geoboom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geoboom": 171,
      "gabrielsimbingyang": 19
    }
  }
]
