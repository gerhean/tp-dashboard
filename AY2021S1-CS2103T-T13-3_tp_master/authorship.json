[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "# FitEgo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "## What is this project about?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* FitEgo helps fitness instructors keep track of his/her customers easily, via CLI as he’s a fast typer so that he can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "spend more time on his clients / his routine rather than manually using alternative software like Excel to track"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "administrative matters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* For the detailed documentation of this project,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "see the **[FitEgo Product Website](https://ay2021s1-cs2103t-t13-3.github.io/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "## Attribution"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* This is **a project for CS2103T Software Engineering (SE) class in NUS**.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * The project simulates an ongoing software project for a desktop application for managing user contacts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* This project uses libraries from [ControlsFX](https://github.com/controlsfx/controlsfx)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* This project uses an icon made by Freepik from www.flaticon.com"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 2,
      "benclmnt": 18,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.2\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    archiveName \u003d \u0027FitEgo.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "tanweijie123": 1,
      "benclmnt": 5,
      "-": 70
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Icon made by Freepik from www.flaticon.com"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "- muscle.png (Used for Application icon)"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 2,
      "-": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "We are looking for a good internships! \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "You can reach our supervisor at `damithc[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "### Dhafin Razaq Oktoyuzan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "\u003cimg src\u003d\"images/dhafinrazaq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "[[github](https://github.com/dhafinrazaq)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "#### Developer \u0026 Deliverables in-charge"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* Ensure project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Bennett Clement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003cimg src\u003d\"images/benclmnt.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "[[github](https://github.com/benclmnt)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "[[portfolio](team/benclmnt.md)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "#### Developer \u0026 Code Quality in-charge"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* Looks after code quality, ensures adherence to coding standards within the project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Maguire Ong"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003cimg src\u003d\"images/maguireong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "[[github](http://github.com/maguireong)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "#### Developer \u0026 Integration in-charge"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* In charge of versioning of the code, maintaining the code repository, integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Kelvin Wong Jian Quan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cimg src\u003d\"images/kelvinvin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "[[github](http://github.com/kelvinvin)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "[[portfolio](https://github.com/kelvinvin?tab\u003drepositories)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "#### Developer \u0026 Documentation in-charge"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Tan Wei Jie"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/tanweijie123.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "[[github](http://github.com/tanweijie123)]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "#### Developer \u0026 Testing in-charge"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* Ensures the testing of the project is done properly and on time."
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 3,
      "maguireong": 5,
      "tanweijie123": 23,
      "kelvinvin": 4,
      "benclmnt": 2,
      "-": 33
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `cdel 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "The UI consists of a `MainWindow` that is made up of several parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `StatusBarFooter`, `Homepage` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "The `UI` component uses JavaFx and ControlsFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "The `UI` component interacts with these external API: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* `Logic` : Performs the Execution of user\u0027s commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* `Model` : Listens for changes to data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. The command execution can affect the `Model` (e.g. deleting a Client)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"cdel 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "![Interactions Inside the Logic Component for the `cdel 1` Command](images/DeleteClientSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteClientCommandParser` and `DeleteClientCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Client` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Client` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T13-3/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Logging"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "and logging destinations."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- The logging level can be controlled using the `logLevel` setting in the configuration file "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "(See [Section 3.2](#configuration), “Configuration”)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "to the specified logging level"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- Currently log messages are output through both `Console` and to a `.log` file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Logging Levels**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **SEVERE** : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **WARNING** : Can continue, but with caution"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **INFO** : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **FINE** : Details that is not usually noteworthy but may be useful in debugging "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Certain properties of the application can be controlled(e.g. user prefs file location, logging level), "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "through the configuration file (default: `config.json`)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Delete Session feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The delete feature allows user to cancel a session, and delete all schedules associated to the session."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The delete session mechanism is facilitated by `DeleteSessionCommand` which extends `Command`. The format of the "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "command is given by: "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "```sdel INDEX [f/]```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "When using this command, the `INDEX` should refer to the index shown in the SessionList on the right panel."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The user can follow up with an optional force parameters to delete all schedules associated to the session."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Example Commands**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1. `sdel 1` : This command deletes the first session if no schedules are associated to it"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1. `sdel 1 f/` : This command deletes the first session, and all schedules associated to it"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `DeleteSession` command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "![DeleteSessionActivityDiagram](images/DeleteSessionActivityDiagram.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "In the following sequence diagram, we trace the execution for when the user decides to enter the DeleteSession command "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "`sdel 1 f/` into FitEgo. For simplicity, we will refer to this command input as commandText. We also assume that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "there are currently 2 associated schedules to the first session in FitEgo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "![DeleteSessionSequenceDiagram](images/tracing/DeleteSessionSequenceDiagram.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "![DeleteSessionParseArgsRef](images/tracing/DeleteSessionParseArgsRef.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteSessionCommand` "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The sequence diagram above shows how the `DeleteSessionCommand` is executed in FitEgo. The LogicManager receives user "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "command as commandText and parses it with `AddressBookParser`. It will parse the command and pass the remaining"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "arguments to `DeleteSessionCommandParser` to construct a `DeleteSessionCommand`. This `DeleteSessionCommand` is "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "returned to the `LogicManager` which will then executes it with reference to the model argument."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "The model will first get the current `FilteredSessionList` instance to get the session to be deleted. It will then check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "whether there exist any `Schedule` associated to the session. If there exists such `Schedule` and the boolean `isForced` "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "is set to true, the model will remove them from `AddressBook`. It will then create a `CommandResult` to relay feedback "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "message back to the UI and return control back to `LogicManager`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "In designing this feature, we had to consider the alternative ways in which we can choose to handle Session deletion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **Alternative 1 (current choice):** Delete session only after all associated schedules are deleted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Pros: "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        1. Easier to maintain data integrity"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Cons:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        1. Extra logic inside the method implementation "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        2. May have performance issues in terms of response time if there are a lot of Schedules or Sessions"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **Alternative 2:** Mark session as deleted and treat schedules with deleted session as invalid"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Pros: "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        1. Easier to implement the method. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        2. No need to handle additional force flag option"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Cons: "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        1. We must keep track of deleted sessions, which might make the application bloat up over time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        2. Harder to maintain data integrity over time"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "- **Alternative 3:** Delete the session without checking for associated schedules"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Pros: Easy to implement"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - Cons: A schedule might have invalid session, breaking data integrity"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Add Schedule feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "The add schedule feature allows user to create a Schedule associated with a Client and a Session. "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "In other words, it allows user to schedule a Client to a Session."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "The add Schedule mechanism is facilitated by `AddScheduleCommand` which extends `Command`. The format of the "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "command is given by: "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "```schadd c/CLIENT_INDEX s/SESSION_INDEX```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "When using this command, the `CLIENT_INDEX` should refer to the index shown in the Client List on the left panel, and is used to specify the Client. The `SESSION_INDEX` should refer to the index shown in the Session List on the right panel, and is used to specify the Session."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `AddSchedule` command. Notice how it checks for overlapping Schedule first."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "![AddScheduleActivityDiagram](images/AddScheduleActivityDiagram.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Example Commands**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Assume the current state of Client, Session, and Schedule is as illustrated on the following simplified object diagram:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "![OverlappingScheduleObjectDiagram0](images/OverlappingScheduleObjectDiagram0.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Now, consider two cases of a Schedule Command to be invoked."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Case 1**:  `schadd c/2 s/1`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Invoking `schadd c/2 s/1` will add a Schedule associated with Andy (the second Client in the Client List) and endurance training from 12/12/2020 1400 - 1600 (the first Session in the Session List). This process can be traced by referring to the following simplified sequence diagram:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  ![AddScheduleSequenceDiagram](images/AddScheduleSequenceDiagram.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Thus, the result can be illustrated by the following object diagram, shown by a new created Schedule:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "![OverlappingScheduleObjectDiagram1](images/OverlappingScheduleObjectDiagram1.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Case 2:** `schadd c/1 s/1`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "On the other hand, invoking `schadd c/1 s/1` will result in an error shown to the user as there is an overlapping Schedule (John is already scheduled to endurance training from 12/12/2020 1400 - 1600)."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Step 2. The user executes `cdel 5` command to delete the 5th Client in the address book. The `cdel` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `cdel 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 3. The user executes `cadd n/David …​` to add a new Client. The `cadd` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 4. The user now decides that adding the Client was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Step 5. The user then decides to execute the command `clist`. Commands that do not modify the address book, such as `clist`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `cadd n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  * Pros: Will use less memory (e.g. for `cdel`, just save the Client being deleted)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Edit Session feature"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The proposed edit session mechanism is facilitated by `AddressBook`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "maguireong"
        },
        "content": "These operation is exposed in the `Model` interface as `Model#setSession()`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Given below is an example usage scenario and how the edit session mechanism behaves at each step."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The `AddressBook` will be initialized with the initial client, session and schedule list."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 2. The user executes `sedit 1 g/coolgym` command to edit the 1st Session in the address book. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The `sedit` command calls `Model#setSession()`, causing changes to be made in the address book after the `sedit 1 g/coolgym` command executes."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The following sequence diagram shows how the edit session operation works:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "maguireong"
        },
        "content": "![EditSessionSequenceDiagram](images/EditSessionSequenceDiagram.png)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `EditSessionCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the edit session command:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "maguireong"
        },
        "content": "![EditSessionActivityDiagram](images/EditSessionActivityDiagram.png)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Edit Schedule feature"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The proposed edit schedule mechanism is facilitated by `AddressBook`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "maguireong"
        },
        "content": "These operation is exposed in the `Model` interface as `Model#setSchedule()`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Given below is an example usage scenario and how the edit schedule mechanism behaves at each step."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The `AddressBook` will be initialized with the initial client, session and schedule list."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Step 2. The user executes `schedit c/1 s/1 us/2` command to edit the Schedule with Session 1 and Client 1 in the address book. "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The `schedit` command calls `Model#setSchedule()`, causing changes to be made in the address book after the `schedit c/1 s/1 us/2` command executes."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The following sequence diagram shows how the edit schedule operation works:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "maguireong"
        },
        "content": "![EditScheduleSequenceDiagram](images/EditScheduleSequenceDiagram.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `EditScheduleCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the edit schedule command:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "maguireong"
        },
        "content": "![EditScheduleActivityDiagram](images/EditScheduleActivityDiagram.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "maguireong"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "maguireong"
        },
        "content": "##### Aspect: How edit schedule executes"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* **Alternative 1 (current choice):** Retrieve Schedule using Client and Session Index."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  * Pros: More troublesome to implement. Clearer to retrieve."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  * Cons: Require user to know the Client and Session Index separately."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* **Alternative 2:** Retrieve Schedule using Schedule Index"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  * Pros: Easier to retrieve."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  * Cons: Implementation is more confusing as User there\u0027s a conflict between Index and user-typed String index."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* is a fitness instructor who have trouble managing a significant number of clients and sessions"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* favours a All-in-One software tracker"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* is reasonably comfortable using CLI apps while appreciates a nice GUI that can show his weekly schedule"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* prefers a simple and minimalistic view, as he does not like clutters."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Value proposition**: to help a fitness instructor keeps track of his customers easily, via CLI as he’s a fast typer."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "He can spend more time on his clients/his routine rather than manually using alternative software like Excel to track"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "administrative matters."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| Priority | As a ...                                     | I want to ...                    | So that I can ...                                                         |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | new trainer                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | add a new client               |                                                                        |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | edit a client                  | change the details of a client                                         |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | view a Client\u0027s detail         | view at all of the client\u0027s details at a glance                        |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | delete a client                | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | find a client by name          | locate details of clients without having to go through the entire list |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | tag my client         | I know their allergy / injury history and can advise them an appropriate training / diet schedule |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | create a Session               |                                                                        |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | edit a session                 | change the details of a session                                        |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | view a session\u0027s detail        | view at all of the session\u0027s details at a glance                       |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| `* * *`  | busy fitness trainer                          | filter sessions by time        | view only the upcoming or other important sessions                             |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* * *`  | trainer                                       | delete a Session               | cancel all schedules if there is an urgent need                        |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | add a new schedule             |                                                                        |"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | edit a schedule                | change the details of a schedule                                       |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | view a schedule\u0027s detail       | view at all of the schedule\u0027s details at a glance                      |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* * *`  | trainer                                       | delete a schedule              | remove schedule that are cancelled or completed                        |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `* *`    | trainer                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* *`    | forgetful fitness trainer                     | track clients\u0027 payments        | remind those who have not paid up                                      |"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* *`    | busy fitness trainer                          | query if a particular time slot is open     | add new clients to that time slot                         |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* *`    | fitness trainer                               | track clients\u0027 weight over time| keep track of my clients progress over time                            |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `* *`    | fitness trainer                               | store clients\u0027 session feedback| utilise previous sessions and plan exercises for upcoming sessions     |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| `*`      | trainer with many clients in the address book | sort clients by name           | locate a client easily                                                 |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `*`      | user                                          | change software background between light and dark mode | customise my experience                        |"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| `*`      | trainer focused on coaching pre-NS teen       | track client\u0027s date of birth   | adjust the fitness intensity depending on IPPT period                  |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "maguireong"
        },
        "content": "(For all use cases below, the **System** is the `FitEgo` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Use case: Add a Client**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1.  User requests to add a specific Client in the list"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "maguireong"
        },
        "content": "2.  FitEgo adds the Client"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Use case: Edit a Client**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1.  User requests to list Clients"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "2.  FitEgo shows a list of Clients"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "3.  User requests to edit a specific Client in the list"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "4.  FitEgo edits the Client according to the specified details"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    * 3a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Use case: Delete a Client**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1.  User requests to list Clients"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "2.  FitEgo shows a list of Clients"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "maguireong"
        },
        "content": "3.  User requests to delete a specific Client in the list"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "4.  FitEgo deletes the Client"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* 2b. User requests to force delete a specific Client in the Client List."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    * 2b1. FitEgo force deletes the Client and its associated Schedules."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    * 3a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* 3b. The given index refers to a client associated with one or more Schedule."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    * 3b1. FitEgo shows an error message."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Use case: Tag a Client**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1.  User requests to list Clients"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "2.  FitEgo shows a list of Clients"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "3.  User requests to tag a specific Client from the list"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "4.  FitEgo changes the Client\u0027s current tag(s) according to the specified details"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 2a. No tag is defined."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 3a. The given tag is invalid."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * 3a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Use case: Find Clients**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "1.  User requests to find some Client based on keyword or text."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "2.  FitEgo displays the client\u0027s whose name matches the keyword or text."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* 2a. The search result is empty."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    2a1. FitEgo displays no clients found."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Use case: View a Client**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "1.  User requests to list Clients."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "2.  FitEgo shows a list of Clients."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "3.  User requests to view a specific Client in the list"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "4.  FitEgo opens the client\u0027s profile in a new window."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    * 3a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* 4a. Previous Client\u0027s profile window is not closed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    * 4a1. The previous client\u0027s profile will be closed."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    * 4a2. The current client\u0027s profile will be displayed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Use case: Create a Session**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1.  User requests to add a specific Session in the list"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "2.  FitEgo adds the Session."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 1a. The session overlaps with an existing Session."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * 1a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 1b. The Session is missing some required details."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * 1b1. FitEgo shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Use case ends."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Use case: Edit a Session**"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1.  FitEgo shows a list of Sessions"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "maguireong"
        },
        "content": "2.  User requests to edit a specific Session in the list (i.e. gym, exercise type, start time and duration)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "maguireong"
        },
        "content": "3.  FitEgo edits the Session according to the specified details"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* 2a. The given index is invalid or request to edit is absent."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    * 2a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Use case: Deleting a Session**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1.  User requests to list Sessions"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "2.  FitEgo shows a list of Sessions"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "3.  User requests to delete a specific Session in the list"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "4.  FitEgo deletes the Session"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * 3a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "*  3b. The Session has schedules associated to it."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    * 3b1. FitEgo shows a help message."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Use case resumes at step 2.     "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "**Use case: View Session within time period**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1.  FitEgo shows a list of Sessions"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "2.  User requests to filter the Session List by a period"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "3.  FitEgo filters the Session List according to the specified period and updates its title."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* 2a. The given period is invalid."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    * 2a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Use case resumes at step 2.     "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Use case: Add a Schedule**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1. FitEgo shows a list of Clients and list of Sessions"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "2. User requests to add a specific Schedule between a specified Client from Client List and Session from Session List"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "3. FitEgo adds the Schedule"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "- 2a. The Client index or Session index is invalid"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  - 2a1. FitEgo shows an error message"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "- 2b. The Schedule to be added is overlapping with another Schedule"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  - 2b1. FitEgo shows an error message"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Use case: Edit a Schedule**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1.  FitEgo shows a list of Schedule"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "maguireong"
        },
        "content": "2.  User requests to edit a specific Schedule in the list (i.e. updated session index, update payment, update weight)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "maguireong"
        },
        "content": "3.  FitEgo edits the Schedule according to the specified details"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* 2a. The given index is invalid or request to schedule is absent."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    * 2a1. FitEgo shows an error message."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Use case: Delete a Schedule**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1. FitEgo shows a list of Clients and list of Sessions"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "2. User requests to delete a Schedule asssociated with a specified Client from the Client List and Session from the Session List"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "3. FitEgo deletes the Schedule"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "- 2a. The Client index or Session index is invalid"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  - 2a1. FitEgo shows an error message"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "- 2b. No Schedule is associated with the specified Client and Session"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "  - 2b1. FitEgo shows an error message"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Use case: Open User Guide in Browser**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "1.  User requests to view Help window. "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "2.  FitEgo displays help window with the User Guide link."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "3.  User selects the link to access the User Guide. "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "4.  FitEgo opens the User Guide. "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* 3a. User closes the help window. "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    * 3a1. FitEgo closes the help window"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\t"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "2.  Should be able to hold up to 1000 clients and sessions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "3.  A fitness instructor with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "4.  The source code should be open source."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "5.  The application should be usable without internet connection"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "6.  The user interface should be intuitive enough for users who are not IT-savvy"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "7.  The product can be downloaded freely from Github."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "8.  The user should be able to read the data files."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "9.  The user should be able to modify the data files."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "10.  The user should be able to use the application on different machines just by moving the data file"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "from your previous machine to your new machine."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* **API**: Application Programming Interface"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ":information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Adding a Client"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. Adding a Client while all Clients are being shown"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Test case: `cadd n/David …` \u003cbr\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: First contact is added to the list. Details of the added contact shown in the status message."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Deleting a Client"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. Deleting a Client while all Clients are being shown"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Prerequisites: List all Clients using the `clist` command. Multiple Clients in the list."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Test case: `cdel 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Test case: `cdel 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: No Client is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Other incorrect client delete commands to try: `cdel`, `cdel x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Adding a Session"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1. Adding a Session while all Clients are being shown."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    1. Test case: `sadd g/Machoman Gym ex/Endurance at/29/09/2020 1600 t/120` \u003cbr\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: Session is added to the list, and it is shown in order. Details of the added session shown in the"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       status message."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    1. Test case: `sadd g/machoman` \u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: No Session is added. Error details shown in the status message."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    1. Other incorrect AddSession commands to try: "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        `sadd g/machoman ex/endurance at/29/09/2020 t/120` (wrong date format),"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        `sadd g/machoman ex/endurance at/29/09/2020 1600 t/0` (invalid duration) \u003cbr\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: Similar to previous."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Editing a Session"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. Editing a Session while all Sessions are being shown"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Prerequisites: Multiple Sessions in the list can be viewed on the right panel of the GUI."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    "
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Test case: `sedit 1 g/Machoman`\u003cbr\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: First Session\u0027s gym location is edited."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Details of the edited session is shown in the status message."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Test case: `sedit 1 at/29/09/2020 1600 t/120`\u003cbr\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: First Session timing is edited."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Details of the edited session is shown in the status message."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Other incorrect edit commands to try: `sedit`, `sedit x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      "
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Deleting a Session"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "1. Deleting a Session while all Sessions are being shown"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Test case: `sdel 1 f/` \u003cbr\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: The session in index 1 (as shown in the Session List) will be deleted alongside all schedules associated"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       to the session. Details of the deleted session is shown in the status message."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Test case: `sdel 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: If there are no schedules associated to the session in index 1 (as shown in the Session List), similar to"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       previous. Else, it will not delete the session and error message will be shown in the status message"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       "
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Other incorrect DeleteSession commands to try: `sdel`, `sdel x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "       Expected: It will not delete the session and error message will be shown in the status message."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Viewing Sessions within Period"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. Viewing Sessions within Period while the Session List is non-empty"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Prerequisites: Multiple Sessions in the list can be viewed on the right panel of the GUI."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Test case: `sview p/+1d`\u003cbr\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Expected: The right panel only displays Sessions with start time from 0000hrs today to 2359hrs the next day."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Indication that Session List has been successfully updated is shown in the status message."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Test case: `sview p/past`\u003cbr\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Expected: The right panel only displays Sessions that have already ended before time of execution."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Indication that Session List has been successfully updated is shown in the status message."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   1. Other incorrect edit commands to try: `sview`, `sview p/+2s` (where unit of time is not d/m/y), `...` \u003cbr\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      "
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "### Adding a Schedule"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1. Adding a Schedule while all Clients and Sessions are being shown"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Prerequisites: Multiple Clients and Sessions in the list can be viewed on the left and right panel of the GUI respectively."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   "
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schadd c/1 s/1`\u003cbr\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: Add a Schedule associated with Client of index 1 in the Client List and Session of index 1 in the Session List."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Details of the added Schedule is shown in the status message."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schadd s/1 c/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: Add a Schedule associated with Client of index 2 in the Client List and Session of index 1 in the Session List."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Details of the added Schedule is shown in the status message."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Other incorrect Add Schedule commands to try: `schadd c/1`, `schadd c/0 s/2`, `schadd c/x s/y`, `...` (where x is larger than the Client List size or y is larger than the Session List size)\u003cbr\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: No Schedule is added. Error details shown in the status message."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Editing a Schedule"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. Editing a Schedule while all Schedules are being shown"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Prerequisites: Multiple Schedules in the list can be viewed on the main panel of the GUI."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schedit c/1 s/1 us/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: Edit Schedule with client index 1 and session index 1 is edited to session index 2."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Details of the edited schedule is shown in the status message."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schedit c/2 s/1 us/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: Edit Schedule with client index 2 and session index 1 is edited to session index 2."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Details of the edited schedule is shown in the status message."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schedit c/1 s/1 pd/paid`\u003cbr\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     Expected: Edit Schedule with client index 1 and session index 1 payment update to be paid. "
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     In the right panel, the client\u0027s name in the related session will be indicated as green. "
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     Details of the edited schedule is shown in the status message."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "         "
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schedit c/1 s/1 pd/unpaid`\u003cbr\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Expected: Edit Schedule with client index 1 and session index 1 payment update to be unpaid. "
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    In the right panel, the client\u0027s name in the related session will be indicated as red. "
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Details of the edited schedule is shown in the status message."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    "
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   1. Test case: `schedit c/1 s/1 r/text`\u003cbr\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       Expected: Edit Schedule with client index 1 and session index 1 remark to \"text\". "
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "       In the right panel, the client\u0027s name in the related session will be indicated as red. "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       Details of the edited schedule is shown in the status message."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Other incorrect edit commands to try: `schedit c/1`, `schedit c/1 s/2`, `schedit c/x s/y us/y`, `...` (where x is larger than the client list size or y is larger than the session list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "### Deleting a Schedule"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1. Deleting a Schedule while all Clients and Sessions are being shown"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Prerequisites: Multiple Clients and Sessions in the list can be viewed on the left and right panel of the GUI respectively."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   "
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schdel c/1 s/1`\u003cbr\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: Delete the Schedule associated with Client of index 1 in the Client List and Session of index 1 in the Session List."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Details of the deleted Schedule is shown in the status message."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Test case: `schdel s/1 c/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: Delete the Schedule associated with Client of index 2 in the Client List and Session of index 1 in the Session List."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Details of the added Schedule is shown in the status message."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "   1. Other incorrect Delete Schedule commands to try: `schdel c/1`, `schdel c/0 s/2`, `schdel c/x s/y`, `...` (where x is larger than the Client List size or y is larger than the Session List size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "      Expected: No Schedule is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   1. Test case: Open `data/addressbook.json` and change one of the schedule\u0027s `clientEmail` to an email that "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      does not exist inside the `clients` list"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      Expected: FitEgo notices a invalid storage format and start with an empty addressbook"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      "
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "   2. Test case: Open `data/addressbook.json` and change one of the schedule\u0027s `startTime` or `endTime` so that the"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      resulting interval does not exist inside the `sessions` list"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "      Expected: Similar as previous"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 140,
      "maguireong": 165,
      "tanweijie123": 84,
      "kelvinvin": 65,
      "benclmnt": 249,
      "-": 317
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "This user guide will serve as an introduction to your next must-have app - FitEgo!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "FitEgo is a **desktop app for fitness instructors to manage their clients and schedules, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, FitEgo can get your client management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "1. Download the latest `fitego.jar` from [here](https://github.com/AY2021S1-CS2103T-T13-3/tp/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your FitEgo program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  Some example commands you can try:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   * **`clist`** : Lists all clients."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   * **`cadd n/Jane Doe p/91234567 e/jane@gmail.com`** : Adds a client named `Jane Doe` to the clients list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "   * **`cdel`**`3` : Deletes the third client shown in the current list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. Read [How to use](#how-to-use-fitego) for a quick understanding of commands in FitEgo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. Refer to the [Keyword](#keyword) below for more details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### How to interpret notations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Below are a few blocks which you might want to pay attention to. The different background and icon represents different message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "[comment]: \u003c\u003e (Copy the blocks below and edit your message)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Explains the rationale behind our design. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "[comment]: \u003c\u003e (This only appears in Github CSS)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Good to learn, but not necessary to know to use FitEgo. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":star: **Feature:**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Important to know."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":heavy_check_mark: **Example:**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "An example to follow. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "May have irreversible effect when used. Backup and caution is recommended."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### How to use FitEgo"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "There are 3 major entities in FitEgo: clients, sessions, and schedules."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "There are 5 major verbs in FitEgo: add, edit, delete, view, list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "#### Clients"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Clients are customers that is trained by the user (fitness instructor)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "All client\u0027s commands using the prefix `c`. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "#### Sessions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Sessions are a timeslot that is scheduled for a training session. It contains information about the gym, the session\u0027s main exercise type, start time and the duration of sessions. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Each session can have more than 1 client, to model a trainer instructing a fitness class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "We consider two sessions as overlapping if another session starts before the current session ends."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":information_source: **Info:**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "FitEgo doesn\u0027t allow user to create overlapping sessions. This is to protect users from scheduling overlapping sessions"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "at different gyms. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "All session\u0027s commands have prefix `s`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "#### Schedules"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Schedules are what defines you and your client\u0027s interaction. Each schedule contains information about the client and the "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "attended session. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "- You can add in details about your client\u0027s weight progress"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "- You can add exercises done during the session as remark in schedule"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "- You can track whether your client has paid for the session attended"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of a schedule:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Client   | Session                                                      | Weight | Remark                                                       | Payment Status |"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| -------- | ------------------------------------------------------------ | ------ | ------------------------------------------------------------ | -------------- |"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| John Doe | Endurance training at Machoman Gym (24/10/2020 1200 - 1400)  | 70 kg  | Planks (20 x 30 seconds), body weight squats (5 sets of 25 reps) | paid           |"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Bernice  | Body building training at Getwell Gym (27/10/2020 1300 - 1500) | 85 kg  | Chinup (5 sets of 5 reps), muscle strain after bench press   | unpaid         |"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "All schedules\u0027 commands have prefix `sch`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### General Note"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. Once you learn the entity, you can now combine it with the verb. For example:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - `cadd`: Add a client, `sadd`: Creates a session, `schadd`: Creates a schedule"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    - `cedit`: Edit a client\u0027s details, `sedit`: Edit a session\u0027s details, `schedit`: Edit a schedule\u0027s details"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    - `cdel`: Remove a client, `sdel`: Delete a session, `schdel`: Delete a schedule"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "1. The program will automatically save after every command execution to guarantee that your data will never disappear. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Although there are a lot of commands, once you learn the verb and entities, it is so easy to use FitEgo!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "# UI-orientation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "![AnnotatedUi](images/AnnotatedUi.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "From the above image, the GUI is made up of several components. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Component | Description |"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| --------------- | ---------------------------------------- | "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Toolbar         | Displays the toolbar for this program. You can access the `exit` and `help` command from here.  | "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Command Box     | Displays a text box for your input. You can type your command here.          | "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Result Display  | Displays the result of your command. If the execution is successful, it will display a success message. Otherwise, it will prompt you an error message | "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Client List     | Displays the list of clients in a list view. You can modify this list using [client\u0027s command](#client-related-keywords) |"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Main Window     | Displays the main window of this program. It consist of the statistics of this program, today\u0027s schedule and quote of the day | "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Session List    | Displays the list of your sessions in a list view. You can modify this list using [session\u0027s command](#session-related-keywords) | "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Status Bar Footer | Displays the current date and time of the program. If you notice this is incorrect, your PC might be using a different timezone| "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can type input into the Command Box and it will display the command starting with the input. \u003cbr/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "![autocomplete_sample](images/autocomplete_sample.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "For example, in the above image, if you enter `c` and commands that starts with \"c\" is displayed. \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "For advanced users, you can use the \"TAB\" key and FitEgo will auto-complete the first suggestion into the command box, thus increasing your typing speed!   "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "# Keyword"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/injured-thigh` or as `n/John Doe`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/injured-thigh`, `t/injured-thigh t/allergy-dairy` etc."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "## Main Keywords"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Viewing home : `home`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Shows / Returns to the home page "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "![homepage](images/homepage.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "The homepage will display the statistics of your program, today\u0027s schedule and quote of the day. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Shows a message explaning how you can access the help page."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "By default, you can click enter and a browser will open the User Guide. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "You may also press \"ESC\" key to close this window. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Clearing all data in the program : `clear` "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can delete all data (client, session, schedule) using the `clear` keyword. All of your existing data will be removed. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "By using this command, you will delete all of your data, and by design of the system, it will be automatically saved. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "You will not be able to retrieve your previous data unless you have backed up the data file into an external location. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "FitEgo data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "## Client-related Keywords"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "All of client-related keywords are described in this section. All of the commands here will interact with the Client List which is located at the left of this program. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/ClientPanel.png\" alt\u003d\"client_panel\" width\u003d\"250\" height\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Listing all clients : `clist`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can view the list of all clients in FitEgo. The list of clients will be shown at the Client List. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "By default, Client List will display all the clients. In case you used [`cfind`](#locating-clients-by-name-cfind) or any filter-typed commands, "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "you can use `clist` to view the entire list of clients.  "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Format: `clist`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Adding a Client: `cadd`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can add a client."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format: `cadd n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** \u003cbr/\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "A client can have any number of tags (including 0). Each tag can include"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "alphanumeric characters or dash (`-`), but you are not allowed to start or end"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "a tag with a dash. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `cadd n/Jane Doe p/91234567 e/jane@gmail.com`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* `cadd n/John Doe p/91231367 e/jojo@gmail.com t/injured-thigh`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Editing a Client : `cedit`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can edit a client in the Client List."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format: `cedit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Edits the client at the specified `INDEX`. The index refers to the index number shown in the displayed Client List. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* When editing tags, the existing tags of the client will be removed, i.e. adding of tags is not cumulative"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* You can remove all of the client’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `cedit 1 n/Janie Doe` Edits the name of the first client to be `Janie Doe`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `cedit 1 t/`Removes all of the tags of the first client."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Locating Clients by Name: `cfind`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can find clients whose name contain any of the given keywords."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format: `cfind KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The search is case-insensitive, e.g. `hans` will match `Hans`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The order of the keywords does not matter, e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* Only the name is searched"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Partial names will be matched, e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Clients matching any substring will be returned (i.e. `OR` search),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `cfind John` returns `john` and `John Doe`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* `cfind alex david` returns `Alex Yeoh`, `David Li` as shown in the image below. \u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/findAlexDavidResult.png\" alt\u003d\"result for \u0027find alex david\u0027\" width\u003d\"400\" height\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Deleting a Client : `cdel`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can delete a client currently shown in the Client List."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format: `cdel INDEX`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Deletes the client at the specified `INDEX`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The index refers to the index number shown in the displayed Client List."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `clist` followed by `cdel 2` deletes the second client in the Client List."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `cfind Bernice` followed by `cdel 1` deletes the first client in the resulting Client List."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If the second session in the Client List is not associated with any schedule, `clist` followed by `cdel 2` deletes the session."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If the second session in the Client List is associated with one or more schedules, `list` followed by `cdel 2` returns an error message ."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":star: **Feature:**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "To force delete a client (and his associated schedules), pass in the optional force flag after the `INDEX`. "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Any string after the force flag (`f/`) will be ignored."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If there are one or more associated schedules associated with the second session in the Client List, `list` followed by `cdel 2 f/` will delete all schedules associated with the second session, then delete the session."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "### Viewing a Client : `cview`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can view the detail of a client from the Client List."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Format: `cview INDEX`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Views the client at the specified `INDEX`. The selected client will be displayed in the main window. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The index refers to the index number shown in the displayed Client List."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `clist` followed by `cview 2` opens the second client in FitEgo."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `cfind Bernice` followed by `cview 1` opens the first client (Bernice) in the resulting Client List."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "   The result of these commands is shown in the image below."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/cview_sample.png\" alt\u003d\"result for \u0027cview 1\u0027\" width\u003d\"100%\"/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "  \u003e This profile window will be updated when more functionalities are available."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "## Session-related Keywords "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "All session-related keywords are described in this section. All of the commands here will interact with the "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Session List which is located at the right of this program. "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/SessionPanel.png\" alt\u003d\"session_panel\" width\u003d\"250\" height\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "The `ALL` at the top of this panel represents the current settings of session view. You can change the period "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "of session view using [`sview`](#viewing-sessions-within-period-sview) command. "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Adding a Session: `sadd`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can create a session."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Format: `sadd g/GYM_NAME ex/EXERCISE_TYPE at/START_TIME t/DURATION`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* Start time should be of format \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* Duration is in minutes"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* Duration should be a positive integer (larger than 0)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** \u003cbr/\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    The session\u0027s time should not overlap with previously created sessions. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `sadd g/Machoman Gym ex/Endurance at/29/09/2020 1600 t/120` - Adds a session at gym `Machoman` with exercise type `Endurance` at `29/09/2020 1600hrs` that lasts for `120` minutes."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Editing a Session: `sedit`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can edit the details of the session identified by the index number used in the displayed Session List."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Edits the session at the specified `INDEX`. The index refers to the index number shown in the displayed Session List. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "maguireong"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `sedit 1 g/Machoman at/29/09/2020 1600 t/120 ` - Edits the gym of the first session to be `Machoman`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `sedit 2 at/29/09/2020 1600 t/120 ` - Edits the start time and duration of the second session to be `29/09/2020 1600 with a duration of 120 minutes`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Deleting a Session: `sdel`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can delete the session specified by the index number used in the displayed Session List and all schedules associated with"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "the specified session."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Format: `sdel INDEX [f/]`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Deletes the session at the specified `INDEX`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The index refers to the index number shown in the displayed Session List."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If there are no schedules associated with the second session in the Session List, `sview p/all` followed by `sdel 2` deletes the second session."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If there are one or more associated schedules associated with the second session in the Session List, `sview p/all` followed by `sdel 2` displays an error message to the user."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ":star: **Feature:**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "To force deletion of session (and all associated schedules), pass in the optional force flag after the `INDEX`. "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    Any string after the force flag (`f/`) will be ignored."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* If there are one or more schedules associated with the second session, "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  `list` followed by `sdel 2 f/` will delete all schedules associated with the second session, then delete the session "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  itself"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Viewing Sessions within Period: `sview`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can filter the Session List to view sessions within requested period. This helps you to prioritise your sessions as needed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format: `sview p/PERIOD`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Filters the Session List to display sessions within the specified period."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * On top of the Session List, you can find the type of the period you are viewing."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * The recognized periods are as follows:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | Period | Sessions displayed |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | -------- | -------- |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | all| All sessions (including past ones)|"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | future | All sessions that have not started|"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | past | All sessions that have already ended|"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | week | All sessions within the next 7 days|"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | `+[x][unit]` | Sessions within next x time units|"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | `-[x][unit]` | Sessions within past x time units|"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * The recognised units are as follows:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | Unit* | Time unit parsed |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | -------- | -------- |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | d | day |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | w | week |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | m | month |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " | y | year |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  * units are case insensitive"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cimg src\u003d\"images/sview_sample.png\" alt\u003d\"result for \u0027sview p/+2w\u0027\"/\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Sample picture of the result of running `sview p/+2w`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `sview p/all` - Display all sessions stored in FitEgo."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `sview p/+0D` - Display all sessions today."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `sview p/-1d` - Display all sessions from the past 1 day to today (yesterday and today)."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `sview p/+2w` - Display all sessions from today to 2 weeks later. (e.g. If today is Friday, display from today to the Friday that falls 2 weeks later)."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "---"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "## Schedule-related Keywords "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "All schedule-related keywords are described in this section. All of the commands here will interact with the "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Session List which is located at the right of this program. To check if you have  scheduled a session with a client, "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "you can check if the session contains the client\u0027s name. "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cimg src\u003d\"images/SchedulePanel.png\" alt\u003d\"schedule_panel\" width\u003d\"250\" height\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "If Session List shows a client\u0027s name in red, it represents that this client has not paid"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "for his session. Otherwise, the client\u0027s name will be shown in green. "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "### Adding a Schedule: `schadd`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can schedule your client for a session."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Format: `schadd c/CLIENT_INDEX s/SESSION_INDEX`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* This will create a schedule associated with the specified client and session."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The client is specified by `CLIENT_INDEX`, and the session is specified by `SESSION_INDEX`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `CLIENT_INDEX` refers to the index number shown in the Client List, and **must be a positive integer** 1, 2, 3, … ."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `SESSION_INDEX` refers to the index number shown in the Session List, and **must be a positive integer** 1, 2, 3, … ."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `schadd c/1 s/1` - Schedules the first client in the Client List with the first session in the Session List"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "### Editing a Schedule: `schedit`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Edits the details of the schedule identified by the client index and session index."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "Format: `schedit c/CLIENT_INDEX s/SESSION_INDEX [us/UPDATED_SESSION_INDEX] [pd/PAYMENT_STATUS] [r/REMARK]`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* Edits the schedule that consists of the client and session indicated by `CLIENT_INDEX` and `SESSION_INDEX`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `CLIENT_INDEX` refers to the index number shown in the Client List. The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `SESSION_INDEX` and `UPDATED_SESSION_INDEX` refers to the index number shown in the Session List. The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* `PAYMENT_STATUS` can either be `paid` or `unpaid`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* `REMARK` can be any string"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* At least one of the optional fields must be provided"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "* Existing values will be updated to the input values"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `schedit c/1 s/1 us/2` - Reschedules the first client in the Client List to the second session in the Session List instead of the first session"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `schedit c/1 s/1 pd/paid` - Indicates that the first client in the Client List has paid for the second session in the Session List"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "*  `schedit c/1 s/1 r/did 5 pushups` - Edits the schedule containing client index 1 and session index 1 to have remark of doing 5 pushups"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `schedit c/1 s/1 r/` - Clears the schedule containing client index 1 and session index 1 remarks"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "### Deleting a Schedule: `schdel`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "You can deschedule a client from a session."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Format: `schdel c/CLIENT_INDEX s/SESSION_INDEX`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* This will delete the schedule associated with the specified client and session."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* The client is identified by `CLIENT_INDEX`, and the Session is identified by `SCHEDULE_INDEX`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `CLIENT_INDEX` refers to the index number shown in the Client List. The index **must be a positive integer** 1, 2, 3, … ."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `SESSION_INDEX` refers to the index number shown in the Session List. The index **must be a positive integer** 1, 2, 3, … ."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "* `schdel c/1 s/1` - Deletes the schedule associated with the first client in the Client List and first session in the Session List"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "# FAQ"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "# Command Summary"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Action | Format | Example |"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| -------- | -------- | --------- |"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| Open Home Page | `home` | `home`| "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| Open Help Window | `help` | `help`|"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| Clear all data | `clear` | `clear` |"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Exit this program | `exit` | `exit`|"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Add Client Info | `cadd n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]`| `cadd n/Jane Doe p/91234567 e/jane@gmail.com`|"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Edit Client Info | `cedit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]`| `cedit 1 n/Janie Doe`|"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Delete Client Info |`cdel INDEX [f/]` |`cdel 1`|"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| List All Clients | `clist`  |  `clist`  |"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "| View a Client\u0027s Full Profile | `cview INDEX` | `cview 1`|"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| Find Client by Name | `cfind KEYWORD [MORE_KEYWORDS]`| `cfind John Doe`|"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Add a Session | `sadd g/GYM_NAME ex/EXERCISE_TYPE at/START_TIME t/DURATION` | `sadd g/Machoman Gym ex/Endurance at/29/09/2020 1600 t/120` |"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Update Session Info |`sedit INDEX g/GYM_NAME at/START_TIME t/DURATION ` | `sedit 1 g/Machoman at/29/09/2020 1600 t/120`|"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| Delete a Session |`sdel INDEX [f/]` | `sdel 1` |"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "| View Sessions within Period|`sview p/PERIOD ` | `sview p/all`|"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Create a Schedule |`schadd c/CLIENT_INDEX s/SESSION_INDEX`| `schadd c/1 s/3`|"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "| Edit a Schedule |`schedit c/CLIENT_INDEX s/SESSION_INDEX [us/UPDATED_SESSION_INDEX] [pd/PAYMENT_STATUS] [r/REMARK]`| `schedit c/1 s/1 us/1 pd/paid r/did 5 pushups` |"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "| Delete a Schedule |`schdel c/CLIENT_INDEX s/SESSION_INDEX`  | `schdel c/2 s/3` |"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "# Acknowledgement"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* Icon made by Freepik from [flaticon](www.flaticon.com)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* This project uses libraries from [ControlsFX](https://github.com/controlsfx/controlsfx)"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 37,
      "maguireong": 16,
      "tanweijie123": 68,
      "kelvinvin": 272,
      "benclmnt": 70,
      "-": 105
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "title: FitEgo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T13-3/tp/actions/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T13-3/tp/actions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "**FitEgo is a desktop application for fitness instructors to keep track of his/her customers easily, so that he can"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "spend more time on his clients / his routine rather than manually tracking administrative matters using alternative software like Excel.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* If you are interested in using FitEgo, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "* If you are interested about developing FitEgo, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 8,
      "-": 13
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Changes the remark of an existing Client in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the Client identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"by the index number used in the last Client listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param index of the Client in the filtered Client list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param remark of the Client to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of Client data. We achieve that by working with the `Client` model. Each field in a Client is implemented as a separate class (e.g. a `Name` object represents the Client’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a Client."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Create a new `Remark` in `seedu.address.model.Client`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each Client."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Simply add the following to [`seedu.address.ui.ClientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`ClientCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Then insert the following into [`main/resources/view/ClientListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`ClientListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "maguireong"
        },
        "content": "## Modify `Client` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Since `ClientCard` displays data from a `Client`, we need to update `Client` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Modify `Client`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "maguireong"
        },
        "content": "We change the constructor of `Client` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "maguireong"
        },
        "content": "### Update other usages of `Client`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Unfortunately, a change to `Client` will cause other commands to break, you will have to modify these commands to use the updated `Client`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "maguireong"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Client` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "maguireong"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedClient` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedClient` to work with our new `Client`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Now that we have finalized the `Client` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`ClientCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public ClientCard(Client Client, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    remark.setText(Client.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "maguireong"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Client`. Since all fields in a `Client` are immutable, we create a new instance of a `Client` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "maguireong"
        },
        "content": "save it with `Model#setClient()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Client: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Client: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_Client_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client ClientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d new Client(ClientToEdit.getName(), ClientToEdit.getPhone(), ClientToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                ClientToEdit.getAddress(), remark, ClientToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.setClient(ClientToEdit, editedClient);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_ClientS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedClient));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * {@code ClientToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private String generateSuccessMessage(Client ClientToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return String.format(message, ClientToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "maguireong": 39,
      "-": 355
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Client` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Client`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "The `address` field in `Client` is actually an instance of the `seedu.address.model.Client.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditClientDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Let’s try removing references to `Address` in `EditClientDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. Safe delete the field `address` in `EditClientDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Client` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `ClientCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "A quick look at the `ClientCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`ClientCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`ClientCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "**`invalidClientAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    \"name\": \"client with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "maguireong": 14,
      "-": 89
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditClientDescriptor`. Recall that we can verify the contents of `editClientDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       Client ClientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       Client editedClient \u003d createEditedClient(ClientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       if (!ClientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_Client);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       model.setClient(ClientToEdit, editedClient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       model.updateFilteredClientList(PREDICATE_SHOW_ALL_ClientS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_Client_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "maguireong"
        },
        "content": "       Clients.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maguireong"
        },
        "content": "           source.getClientList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                 .map(JsonAdaptedClient::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "maguireong"
        },
        "content": "1. It appears that a `JsonAdaptedClient` is created for each `Client` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    5.  Add a new field to `Client`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "maguireong": 13,
      "-": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 1,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The Client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_INVALID_SESSION_DISPLAYED_INDEX \u003d \"The Session index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_INVALID_SCHEDULE_DISPLAYED_INDEX \u003d \"The Schedule index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d Clients listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if the {@code sentence} contains a part of the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *   Ignores case, and matching by substring."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *   An empty string search will return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"c de\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"\") \u003d\u003d true //empty substring"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param search a search string to search within the sentence, ignore case."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String search) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (search \u003d\u003d null || search.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return sentence.toLowerCase().contains(search.toLowerCase());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if {@code s} represents a non-negative unsigned integer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static boolean isNonNegativeInteger(String s) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 18,
      "tanweijie123": 23,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Clients */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Sessions */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Returns the list of Clients associated to a Session*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    List\u003cClient\u003e getAssociatedClientList(Session session);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Returns the list of Sessions associated to a Client*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    List\u003cSession\u003e getAssociatedSessionList(Client client);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /** Returns the list of Schedules associated to a Session*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    List\u003cSchedule\u003e getAssociatedScheduleList(Session session);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 3,
      "maguireong": 3,
      "kelvinvin": 11,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return model.getFilteredSessionList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cClient\u003e getAssociatedClientList(Session sessionKey) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return model.findClientBySession(sessionKey);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cSession\u003e getAssociatedSessionList(Client clientKey) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return model.findSessionByClient(clientKey);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public List\u003cSchedule\u003e getAssociatedScheduleList(Session sessionKey) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return model.findScheduleBySession(sessionKey);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 4,
      "maguireong": 3,
      "kelvinvin": 17,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /** A Scene to display on the Main GUI. (if required) */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Supplier\u003c? extends Pane\u003e pane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.pane \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Constructs a {@code CommandResult} with a stored Runnable function to run during execution"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param pane a Pane to display on the MAIN GUI."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public CommandResult(String feedbackToUser, Supplier\u003c? extends Pane\u003e pane) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this(feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean hasFunctionToRun() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return !(pane \u003d\u003d null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public Supplier\u003c? extends Pane\u003e getPane() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 25,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.ui.Homepage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " * Displays the homepage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays / Returns to homepage.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String SHOWING_SUCCESS_MESSAGE \u003d \"Homepage displayed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Supplier\u003cAnchorPane\u003e run \u003d () -\u003e Homepage.getHomePage().getRoot();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return new CommandResult(SHOWING_SUCCESS_MESSAGE, run);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/AddClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Adds a Client to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class AddClientCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cadd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Client to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_TAG + \"injured-thigh \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_TAG + \"allergy-dairy \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Client added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This Client already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public AddClientCommand(Client client) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                || (other instanceof AddClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddClientCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 13,
      "tanweijie123": 7,
      "benclmnt": 7,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/DeleteClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Deletes a Client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DeleteClientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cdel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \": Deletes the Client identified by the index number used in the displayed Client list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_FORCE_DELETE_CLIENT_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \": Cannot delete the Client identified by the index number because there are schedules tied to it.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"To force delete, pass in f/ true as an option. BEWARE, YOU WILL LOSE ALL RELATED SCHEDULES.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) f/\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 f/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final boolean isForced;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Creates a normal mode DeleteClient to delete the Client at {@code targetIndex}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @param targetIndex index of to-be deleted Client"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public DeleteClientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.isForced \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Creates a increased privilege mode DeleteClient to force delete the Client at {@code targetIndex}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * if {@code isForced} is true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @param targetIndex index of to-be deleted Client"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @param isForced true if the ClientSession have increased privilege"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public DeleteClientCommand(Index targetIndex, boolean isForced) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.isForced \u003d isForced;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // Do not delete Client unless user use the force flag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithClient(clientToDelete) \u0026\u0026 !isForced) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new CommandResult(MESSAGE_FORCE_DELETE_CLIENT_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assert isForced || !model.hasAnyScheduleAssociatedWithClient(clientToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model.deleteClientAssociatedSchedules(clientToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                || (other instanceof DeleteClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteClientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 33,
      "maguireong": 9,
      "kelvinvin": 8,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/EditClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Edits the details of an existing Client in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class EditClientCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cedit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Client identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"by the index number used in the displayed Client list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This Client already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param index of the Client in the filtered Client list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param editClientDescriptor details to edit the Client with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public EditClientCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!clientToEdit.isUnique(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithClient(clientToEdit)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            model.editSchedulesAssociatedWithClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!(other instanceof EditClientCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand e \u003d (EditClientCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Stores the details to edit the Client with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * corresponding field value of the Client."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 13,
      "maguireong": 42,
      "tanweijie123": 1,
      "benclmnt": 5,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/FindClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Finds and lists all Clients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class FindClientCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cfind\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all Clients whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"the specified substring (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" al bob c\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final NameContainsSubstringPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public FindClientCommand(NameContainsSubstringPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                || (other instanceof FindClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindClientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 4,
      "tanweijie123": 12,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/ListClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Lists all Clients in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ListClientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clist\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all Clients\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 4,
      "kelvinvin": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/ViewClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.ui.ClientInfoPage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " * View the selected clients\u0027 profile."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class ViewClientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cview\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the full details of the selected client index\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String MESSAGE_VIEW_CLIENT_SUCCESS \u003d \"Viewing Client: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ViewClientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assert(client !\u003d null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Client clientToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.client \u003d clientToView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Supplier\u003cAnchorPane\u003e run \u003d () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            ClientInfoPage cip \u003d new ClientInfoPage(client);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return cip.getRoot();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_CLIENT_SUCCESS, clientToView), run);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                || (other instanceof ViewClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewClientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/AddScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Adds a schedule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class AddScheduleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schadd\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedule a client with a session. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"CLIENT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"SESSION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Schedule added: \\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This Schedule overlaps with an existing Schedule\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final Index clientIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final Index sessionIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Creates an AddScheduleCommand to add the specified {@code Schedule}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public AddScheduleCommand(Index clientIndex, Index sessionIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(clientIndex, sessionIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientIndex \u003d clientIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cClient\u003e lastShownClientList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (clientIndex.getZeroBased() \u003e\u003d lastShownClientList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Client clientToSchedule \u003d lastShownClientList.get(clientIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSession\u003e lastShownSessionList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (sessionIndex.getZeroBased() \u003e\u003d lastShownSessionList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Session sessionToSchedule \u003d lastShownSessionList.get(sessionIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithClientAndSession(clientToSchedule, sessionToSchedule)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule scheduleToAdd \u003d new Schedule(clientToSchedule, sessionToSchedule);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model.addSchedule(scheduleToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, scheduleToAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || (other instanceof AddScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 clientIndex.equals(((AddScheduleCommand) other).clientIndex)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 sessionIndex.equals(((AddScheduleCommand) other).sessionIndex));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 85,
      "benclmnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/DeleteScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class DeleteScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schdel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deschedule a client from a session. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"CLIENT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"SESSION\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"1 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule deleted: \\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_NOT_FOUND \u003d \"No schedule associated with client: \\n%1$s \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"and session:\\n%2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final Index clientIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final Index sessionIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Creates an DeleteScheduleCommand to delete the specified {@code Schedule}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public DeleteScheduleCommand(Index clientIndex, Index sessionIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(clientIndex, sessionIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientIndex \u003d clientIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cClient\u003e lastShownClientList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (clientIndex.getZeroBased() \u003e\u003d lastShownClientList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSession\u003e lastShownSessionList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (sessionIndex.getZeroBased() \u003e\u003d lastShownSessionList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Client client \u003d lastShownClientList.get(clientIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Session session \u003d lastShownSessionList.get(sessionIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithClientAndSession(client, session)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Schedule scheduleToDelete \u003d model.findScheduleByClientAndSession(client, session);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            model.deleteSchedule(scheduleToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, scheduleToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_SCHEDULE_NOT_FOUND, client, session));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || (other instanceof DeleteScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 clientIndex.equals(((DeleteScheduleCommand) other).clientIndex)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 sessionIndex.equals(((DeleteScheduleCommand) other).sessionIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 83,
      "benclmnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/EditScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_UPDATED_SESSION_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SCHEDULES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Edits the details of an existing Client in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \": schedules a client with another session. \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"CLIENT (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"SESSION (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"[\" + PREFIX_UPDATED_SESSION_INDEX + \"UPDATED SESSION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + \"[\" + PREFIX_PAYMENT_STATUS + \"PAID OR UNPAID?] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + PREFIX_CLIENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + PREFIX_SESSION_INDEX + \"1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_UPDATED_SESSION_INDEX + \"1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            + PREFIX_PAYMENT_STATUS + \"paid \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_REMARK + \"Did 5 pushups\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_EDIT_SCHEDULE_SUCCESS \u003d \"Schedule Edited: \\n%1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This Schedule overlaps with an existing Schedule\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_NOT_FOUND \u003d \"No schedule is associated with this client and session\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final Index sessionIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final Index clientIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final EditScheduleDescriptor editScheduleDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param clientIndex of the Client in the filtered client list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param sessionIndex of the Session in the filtered session list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param editScheduleDescriptor details to edit the schedule with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public EditScheduleCommand(Index clientIndex, Index sessionIndex, EditScheduleDescriptor editScheduleDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(clientIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(sessionIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(editScheduleDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.clientIndex \u003d clientIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.editScheduleDescriptor \u003d new EditScheduleDescriptor(editScheduleDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cSession\u003e lastShownSessionList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e lastShownClientList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (clientIndex.getZeroBased() \u003e\u003d lastShownClientList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (sessionIndex.getZeroBased() \u003e\u003d lastShownSessionList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d lastShownClientList.get(clientIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session session \u003d lastShownSessionList.get(sessionIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule scheduleToEdit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithClientAndSession(client, session)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            scheduleToEdit \u003d model.findScheduleByClientAndSession(client, session);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule editedSchedule \u003d createEditedSchedule(scheduleToEdit, editScheduleDescriptor,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                lastShownSessionList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!scheduleToEdit.isUnique(editedSchedule) \u0026\u0026 model.hasSchedule(editedSchedule)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //target, edited"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.setSchedule(scheduleToEdit, editedSchedule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates and returns a {@code Schedule} with the details of {@code scheduleToEdit}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * edited with {@code editScheduleDescriptor}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static Schedule createEditedSchedule(Schedule scheduleToEdit, EditScheduleDescriptor editScheduleDescriptor,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                                                 List\u003cSession\u003e lastShownSessionList) throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assert scheduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assert lastShownSessionList !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d scheduleToEdit.getClient();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Session session \u003d scheduleToEdit.getSession();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            if (editScheduleDescriptor.getUpdatedSessionIndex().isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                if (editScheduleDescriptor.getUpdatedSessionIndex().get().getZeroBased()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        \u003e\u003d lastShownSessionList.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                session \u003d lastShownSessionList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        .get(editScheduleDescriptor.getUpdatedSessionIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // get new PaymentStatus else return previous PaymentStatus"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        PaymentStatus updatedPayment \u003d editScheduleDescriptor"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .getPaymentStatus().orElse(scheduleToEdit.getPaymentStatus());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // get new remark else return previous remark"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Remark remark \u003d editScheduleDescriptor.getRemark().orElse(scheduleToEdit.getRemark());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new Schedule(client, session, updatedPayment, remark);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!(other instanceof EditScheduleCommand)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand e \u003d (EditScheduleCommand) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return clientIndex.equals(e.clientIndex)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 sessionIndex.equals(e.sessionIndex)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 editScheduleDescriptor.equals(e.editScheduleDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Stores the details to edit the Schedule with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * corresponding field value of the Schedule."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static class EditScheduleDescriptor {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private Index clientIndex;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private Index sessionIndex;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private Index updateSessionIndex;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        private PaymentStatus paymentStatus;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditScheduleDescriptor() {}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditScheduleDescriptor(EditScheduleDescriptor toCopy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setClientIndex(toCopy.clientIndex);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setSessionIndex(toCopy.sessionIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setUpdatedSessionIndex(toCopy.updateSessionIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            setUpdatedPayment(toCopy.paymentStatus);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            setUpdatedRemark(toCopy.remark);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return CollectionUtil.isAnyNonNull(updateSessionIndex, paymentStatus, remark);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setClientIndex(Index clientIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.clientIndex \u003d clientIndex;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cIndex\u003e getClientIndex() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(clientIndex);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setSessionIndex(Index sessionIndex) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cIndex\u003e getSessionIndex() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(sessionIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setUpdatedSessionIndex(Index updateSessionIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.updateSessionIndex \u003d updateSessionIndex;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cIndex\u003e getUpdatedSessionIndex() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(updateSessionIndex);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public Optional\u003cPaymentStatus\u003e getPaymentStatus() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return Optional.ofNullable(paymentStatus);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setUpdatedPayment(PaymentStatus updatedPayment) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            this.paymentStatus \u003d updatedPayment;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setUpdatedRemark(Remark remark) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (!(other instanceof EditScheduleDescriptor)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            EditScheduleDescriptor e \u003d (EditScheduleDescriptor) other;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return getClientIndex().equals(e.getClientIndex())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    \u0026\u0026 getSessionIndex().equals(e.getSessionIndex())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    \u0026\u0026 getUpdatedSessionIndex().equals(e.getUpdatedSessionIndex())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    \u0026\u0026 getPaymentStatus().equals(e.getPaymentStatus())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 46,
      "maguireong": 193,
      "tanweijie123": 1,
      "benclmnt": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/session/AddSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_EXERCISE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_GYM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Adds a session"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class AddSessionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sadd\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Session to FitEgo. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_GYM + \"GYM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_EXERCISE_TYPE + \"EXERCISE_TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_GYM + \"Machoman \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_EXERCISE_TYPE + \"Bodybuilder \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_START_TIME + \"29/09/2020 1600 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + PREFIX_DURATION + \"120 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Session added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"This Session overlaps with an existing Session in FitEgo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Session toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Creates an AddSession to add the specified {@code Session}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public AddSessionCommand(Session session) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        toAdd \u003d session;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (model.hasSession(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assert !model.hasSession(toAdd) : \"Should not re-add existing session\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model.addSession(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof AddSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSessionCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/session/DeleteSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Deletes a Session identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteSessionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sdel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \": Deletes the Session identified by the index number used in the displayed Session list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_DELETE_SESSION_SUCCESS \u003d \"Deleted Session: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_FORCE_DELETE_SESSION_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \": Cannot delete the Session identified by the index number because there are schedules tied to it.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"To force delete, pass in f/ as an option. BEWARE, YOU WILL LOSE ALL RELATED SCHEDULES.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) f/\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 f/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final boolean isForced;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Creates a normal mode DeleteSession to delete the Session at {@code targetIndex}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param targetIndex index of to-be deleted session"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeleteSessionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.isForced \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Creates a increased privilege mode DeleteSession to force delete the Session at {@code targetIndex}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * if {@code isForced} is true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param targetIndex index of to-be deleted session"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param isForced true if the DeleteSession have increased privilege"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeleteSessionCommand(Index targetIndex, boolean isForced) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.isForced \u003d isForced;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session sessionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Do not delete session unless user use the force flag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithSession(sessionToDelete) \u0026\u0026 !isForced) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new CommandResult(MESSAGE_FORCE_DELETE_SESSION_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assert isForced || !model.hasAnyScheduleAssociatedWithSession(sessionToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model.deleteSessionAssociatedSchedules(sessionToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model.deleteSession(sessionToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof DeleteSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSessionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 1,
      "benclmnt": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/session/EditSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_EXERCISE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_GYM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sedit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Session identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"by the index number used in the displayed Session list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"[\" + PREFIX_GYM + \"GYM] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"[\" + PREFIX_EXERCISE_TYPE + \"EXERCISE_TYPE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + PREFIX_GYM + \"Machoman \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + PREFIX_START_TIME + \"29/09/2020 1600 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            + PREFIX_DURATION + \"120 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_EDIT_SESSION_SUCCESS \u003d \"Edited Session: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"This Session already exists in the FitEgo.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final EditSessionDescriptor editSessionDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param index of the Session in the filtered session list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @param editSessionDescriptor details to edit the session with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionCommand(Index index, EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(editSessionDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.editSessionDescriptor \u003d new EditSessionDescriptor(editSessionDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session sessionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session editedSession \u003d createEditedSession(sessionToEdit, editSessionDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!sessionToEdit.isUnique(editedSession) \u0026\u0026 model.hasSession(editedSession)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.setSession(sessionToEdit, editedSession);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (model.hasAnyScheduleAssociatedWithSession(sessionToEdit)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            model.editSchedulesAssociatedWithSession(sessionToEdit, editedSession);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SESSION_SUCCESS, editedSession));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates and returns a {@code Session} with the details of {@code SessionToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * edited with {@code editSessionDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static Session createEditedSession(Session sessionToEdit, EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assert sessionToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Gym updatedGym \u003d editSessionDescriptor.getGym().orElse(sessionToEdit.getGym());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ExerciseType updatedExerciseType \u003d editSessionDescriptor"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .getExerciseType().orElse(sessionToEdit.getExerciseType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Interval updatedInterval \u003d editSessionDescriptor.getInterval().orElse(sessionToEdit.getInterval());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new Session(updatedGym, updatedExerciseType, updatedInterval);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!(other instanceof EditSessionCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand e \u003d (EditSessionCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 editSessionDescriptor.equals(e.editSessionDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Stores the details to edit the Session with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * corresponding field value of the Session."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static class EditSessionDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private Gym gym;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private ExerciseType exerciseType;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private Interval interval;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditSessionDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public EditSessionDescriptor(EditSessionDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setGym(toCopy.gym);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setExerciseType(toCopy.exerciseType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            setInterval(toCopy.interval);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maguireong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(gym, exerciseType, interval);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setGym(Gym gym) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.gym \u003d gym;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cGym\u003e getGym() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(gym);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setExerciseType(ExerciseType exerciseType) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.exerciseType \u003d exerciseType;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cExerciseType\u003e getExerciseType() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(exerciseType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setInterval(Interval interval) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.interval \u003d interval;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public Optional\u003cInterval\u003e getInterval() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return Optional.ofNullable(interval);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (!(other instanceof EditSessionDescriptor)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            EditSessionDescriptor e \u003d (EditSessionDescriptor) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return getGym().equals(e.getGym())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    \u0026\u0026 getExerciseType().equals(e.getExerciseType())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    \u0026\u0026 getInterval().equals(e.getInterval());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 5,
      "maguireong": 183,
      "tanweijie123": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/session/ViewSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SESSIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Finds and lists all Sessions in address book regardless of date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ViewSessionCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sview\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters the sessions shown in the Session List \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            + \"to the period specified. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            + \"Possible periods -\u003e \u0027week\u0027, \u0027all\u0027, \u0027future\u0027, \u0027past\u0027. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Variable periods are also possble with this format: (+/-)#(D/W/M/Y). \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Parameters: \" + PREFIX_PERIOD + \"PERIOD \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PERIOD + \"week \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            + \"or \" + COMMAND_WORD + \" \" + PREFIX_PERIOD + \"+1W\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String MESSAGE_SHOW_SESSIONS_SUCCESS \u003d \"Session List updated with requested period!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final Pattern VALID_PATTERN \u003d Pattern.compile(\"^(\\\\+|-)\\\\d+[DdWwMmYy]$\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_WEEK_SESSIONS_PERIOD \u003d \"week\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_ALL_SESSIONS_PERIOD \u003d \"all\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_FUTURE_SESSIONS_PERIOD \u003d \"future\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_PAST_SESSIONS_PERIOD \u003d \"past\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Predicate\u003cSession\u003e PREDICATE_SHOW_UPCOMING_WEEK_SESSIONS \u003d (session) -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            session.getStartTime().isBefore(LocalDateTime.now().truncatedTo(DAYS).plusDays(8).minusMinutes(1))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    \u0026\u0026 session.getStartTime().isAfter(LocalDateTime.now().truncatedTo(DAYS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Predicate\u003cSession\u003e PREDICATE_SHOW_FUTURE_SESSIONS \u003d (session) -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            session.getStartTime().isAfter(LocalDateTime.now());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Predicate\u003cSession\u003e PREDICATE_SHOW_PAST_SESSIONS \u003d (session) -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            session.getEndTime().isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Uses a hashmap to get the corresponding predicate for the period specified."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final HashMap\u003cString, Predicate\u003cSession\u003e\u003e PREDICATE_HASH_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        PREDICATE_HASH_MAP.put(VALID_WEEK_SESSIONS_PERIOD, PREDICATE_SHOW_UPCOMING_WEEK_SESSIONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        PREDICATE_HASH_MAP.put(VALID_FUTURE_SESSIONS_PERIOD, PREDICATE_SHOW_FUTURE_SESSIONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        PREDICATE_HASH_MAP.put(VALID_PAST_SESSIONS_PERIOD, PREDICATE_SHOW_PAST_SESSIONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        PREDICATE_HASH_MAP.put(VALID_ALL_SESSIONS_PERIOD, PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private String period;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ViewSessionCommand(String period) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Predicate\u003cSession\u003e pred \u003d PREDICATE_HASH_MAP.get(period);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (pred \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            //Matches the pattern"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            assert(VALID_PATTERN.matcher(period).matches());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            boolean before \u003d (this.period.charAt(0) \u003d\u003d \u0027-\u0027) ? true : false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            int amountOfUnit \u003d Integer.parseInt(this.period.substring(1, this.period.length() - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            ChronoUnit unit \u003d getUnitOfTime(this.period.charAt(this.period.length() - 1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            assert(unit !\u003d null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            //truncatedTo will make all time period to \u003cDate\u003e 0000H. In order to retrieve that terminating day,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            // need to add 1 day. Eg +0d \u003d today \u003d\u003d\u003e Gets Today\u0027s 0000H to Today\u0027s 2359"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (before) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                pred \u003d (session) -\u003e session.getStartTime().isAfter(LocalDateTime.now().truncatedTo(DAYS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .minus(amountOfUnit, unit))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u0026\u0026 session.getStartTime().isBefore(LocalDateTime.now().truncatedTo(DAYS)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .plusDays(1).minusMinutes(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                pred \u003d (session) -\u003e session.getStartTime().isBefore(LocalDateTime.now().truncatedTo(DAYS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .plus(amountOfUnit, unit).plusDays(1).minusMinutes(1))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u0026\u0026 session.getStartTime().isAfter(LocalDateTime.now().truncatedTo(DAYS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        model.updateFilteredSessionList(pred);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_SESSIONS_SUCCESS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ChronoUnit getUnitOfTime(char c) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027d\u0027:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027M\u0027:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027m\u0027:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027Y\u0027:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027y\u0027:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return ChronoUnit.YEARS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027W\u0027:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        case \u0027w\u0027:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return null; //It should never reach here, because it matches the pattern"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                || (other instanceof ViewSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 period.equals(((ViewSessionCommand) other).period)); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 47,
      "kelvinvin": 74,
      "benclmnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.DeleteClientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.FindClientCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.ListClientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.ViewClientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.AddScheduleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.DeleteScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.AddSessionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.DeleteSessionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.session.ViewSessionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.client.AddClientCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.client.DeleteClientCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.client.EditClientCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.client.FindClientCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.client.ViewClientCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.schedule.AddScheduleCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.schedule.DeleteScheduleCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.schedule.EditScheduleCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.AddSessionCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.DeleteSessionCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.session.EditSessionCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.session.ViewSessionCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Creates a Function that can throw ParseException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private interface ParseFunction\u003cT, U\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        U apply(T args) throws ParseException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Used a hashmap to get related function."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static final HashMap\u003cString, ParseFunction\u003cString, Command\u003e\u003e commandMapper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Client-Related Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(AddClientCommand.COMMAND_WORD, (args) -\u003e new AddClientCommandParser().parse(args));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(EditClientCommand.COMMAND_WORD, (args) -\u003e new EditClientCommandParser().parse(args));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(DeleteClientCommand.COMMAND_WORD, (args) -\u003e new DeleteClientCommandParser().parse(args));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(FindClientCommand.COMMAND_WORD, (args) -\u003e new FindClientCommandParser().parse(args));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(ViewClientCommand.COMMAND_WORD, (args) -\u003e new ViewClientCommandParser().parse(args));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(ListClientCommand.COMMAND_WORD, (args) -\u003e new ListClientCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Session-Related Commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(AddSessionCommand.COMMAND_WORD, (args) -\u003e new AddSessionCommandParser().parse(args));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        commandMapper.put(EditSessionCommand.COMMAND_WORD, (args) -\u003e new EditSessionCommandParser().parse(args));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        commandMapper.put(DeleteSessionCommand.COMMAND_WORD, (args) -\u003e new DeleteSessionCommandParser().parse(args));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        commandMapper.put(ViewSessionCommand.COMMAND_WORD, (args) -\u003e new ViewSessionCommandParser().parse(args));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Schedule-Related Commands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(AddScheduleCommand.COMMAND_WORD, (args) -\u003e new AddScheduleCommandParser().parse(args));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        commandMapper.put(DeleteScheduleCommand.COMMAND_WORD, (args) -\u003e new DeleteScheduleCommandParser().parse(args));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        commandMapper.put(EditScheduleCommand.COMMAND_WORD, (args) -\u003e new EditScheduleCommandParser().parse(args));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Common-Application Commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(ClearCommand.COMMAND_WORD, (args) -\u003e new ClearCommand());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(ExitCommand.COMMAND_WORD, (args) -\u003e new ExitCommand());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(HelpCommand.COMMAND_WORD, (args) -\u003e new HelpCommand());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandMapper.put(HomeCommand.COMMAND_WORD, (args) -\u003e new HomeCommand());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Gets the full set of commands available in this program"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @return a List of String"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static List\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return commandMapper.keySet().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (commandMapper.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return commandMapper.get(commandWord).apply(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 6,
      "maguireong": 6,
      "tanweijie123": 55,
      "kelvinvin": 7,
      "benclmnt": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 4,
      "benclmnt": 1,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/AddClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new AddClientCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class AddClientCommandParser implements Parser\u003cAddClientCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddClientCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * and returns an AddClientCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public AddClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d new Client(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return new AddClientCommand(client);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 6,
      "tanweijie123": 11,
      "benclmnt": 8,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Prefix PREFIX_FORCE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "benclmnt": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/DeleteClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_FORCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.DeleteClientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new DeleteClientCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DeleteClientCommandParser implements Parser\u003cDeleteClientCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteClientCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * and returns a DeleteClientCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public DeleteClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FORCE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new DeleteClientCommand(index,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    argMultimap.getValue(PREFIX_FORCE).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteClientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 9,
      "kelvinvin": 7,
      "benclmnt": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/EditClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Parses input arguments and creates a new EditClientCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class EditClientCommandParser implements Parser\u003cEditClientCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditClientCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * and returns an EditClientCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public EditClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    EditClientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(EditClientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new EditClientCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 11,
      "maguireong": 7,
      "benclmnt": 10,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/FindClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.FindClientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new FindClientCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class FindClientCommandParser implements Parser\u003cFindClientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindClientCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * and returns a FindClientCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public FindClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return new FindClientCommand(new NameContainsSubstringPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 8,
      "benclmnt": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/ViewClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.ViewClientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new ViewClientCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class ViewClientCommandParser implements Parser\u003cViewClientCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewClientCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * and returns a ViewClientCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ViewClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return new ViewClientCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewClientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 10,
      "benclmnt": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/AddScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.AddScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Parses input arguments and creates a new AddScheduleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class AddScheduleCommandParser implements Parser\u003cAddScheduleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddScheduleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * and returns an AddScheduleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public AddScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index clientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index sessionIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SESSION_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new AddScheduleCommand(clientIndex, sessionIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Prefix PREFIX_CLIENT_INDEX \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Prefix PREFIX_SESSION_INDEX \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Prefix PREFIX_PAYMENT_STATUS \u003d new Prefix(\"pd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Prefix PREFIX_UPDATED_SESSION_INDEX \u003d new Prefix(\"us/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 13,
      "maguireong": 1,
      "benclmnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/DeleteScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.DeleteScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Parses input arguments and creates a new AddScheduleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class DeleteScheduleCommandParser implements Parser\u003cDeleteScheduleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteScheduleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * and returns an DeleteScheduleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public DeleteScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    DeleteScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index clientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index sessionIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SESSION_INDEX).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new DeleteScheduleCommand(clientIndex, sessionIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/EditScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_UPDATED_SESSION_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleCommandParser implements Parser\u003cEditScheduleCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditScheduleCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * and returns an EditScheduleCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        PREFIX_UPDATED_SESSION_INDEX, PREFIX_PAYMENT_STATUS, PREFIX_REMARK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT_INDEX, PREFIX_SESSION_INDEX)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    EditScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index clientIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index sessionIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            clientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            sessionIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SESSION_INDEX).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    EditScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor editScheduleDescriptor \u003d new EditScheduleDescriptor();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SESSION_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editScheduleDescriptor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    .setSessionIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SESSION_INDEX).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLIENT_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editScheduleDescriptor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    .setClientIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                            .get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_UPDATED_SESSION_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editScheduleDescriptor"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    .setUpdatedSessionIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_UPDATED_SESSION_INDEX)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                            .get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAYMENT_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            editScheduleDescriptor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    .setUpdatedPayment(ScheduleParserUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                            .parsePaymentStatus(argMultimap.getValue(PREFIX_PAYMENT_STATUS).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            editScheduleDescriptor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    .setUpdatedRemark(new Remark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!editScheduleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new ParseException(EditScheduleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new EditScheduleCommand(clientIndex, sessionIndex, editScheduleDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 19,
      "maguireong": 72,
      "benclmnt": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/ScheduleParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.model.schedule.PaymentStatus.MESSAGE_INVALID_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.model.schedule.PaymentStatus.VALUE_PAID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.model.schedule.PaymentStatus.VALUE_UNPAID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class ScheduleParserUtil extends ParserUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses a {@code String payment status} into a {@code PaymentStatus}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static PaymentStatus parsePaymentStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String trimmedPaymentStatus \u003d status.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (trimmedPaymentStatus.equals(VALUE_PAID)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new PaymentStatus(VALUE_PAID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } else if (trimmedPaymentStatus.equals(VALUE_UNPAID)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new PaymentStatus(VALUE_UNPAID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PAYMENT_STATUS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/AddSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_EXERCISE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_GYM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.AddSessionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class AddSessionCommandParser implements Parser\u003cAddSessionCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSessionCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * and returns an AddSessionCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public AddSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GYM, PREFIX_EXERCISE_TYPE, PREFIX_START_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GYM, PREFIX_EXERCISE_TYPE, PREFIX_START_TIME, PREFIX_DURATION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Gym gym \u003d SessionParserUtil.parseGym(argMultimap.getValue(PREFIX_GYM).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Interval interval \u003d SessionParserUtil.parseIntervalFromStartAndDuration("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                argMultimap.getValue(PREFIX_START_TIME).get(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                argMultimap.getValue(PREFIX_DURATION).get()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ExerciseType exerciseType \u003d SessionParserUtil.parseExerciseType("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                argMultimap.getValue(PREFIX_EXERCISE_TYPE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session session \u003d new Session(gym, exerciseType, interval);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new AddSessionCommand(session);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "benclmnt": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_GYM \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_TYPE \u003d new Prefix(\"ex/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Prefix PREFIX_FORCE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 1,
      "benclmnt": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/DeleteSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_FORCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.DeleteSessionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parses input arguments and creates a new DeleteSessionCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteSessionCommandParser implements Parser\u003cDeleteSessionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSessionCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * and returns a DeleteSessionCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeleteSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FORCE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new DeleteSessionCommand(index, argMultimap.getValue(PREFIX_FORCE).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/EditSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_EXERCISE_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_GYM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionCommandParser implements Parser\u003cEditSessionCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSessionCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * and returns an EditSessionCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GYM, PREFIX_EXERCISE_TYPE, PREFIX_START_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            index \u003d SessionParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    EditSessionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor editSessionDescriptor \u003d new EditSessionDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GYM).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editSessionDescriptor.setGym(SessionParserUtil.parseGym(argMultimap.getValue(PREFIX_GYM).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXERCISE_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editSessionDescriptor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                    .setExerciseType(SessionParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                            .parseExerciseType(argMultimap.getValue(PREFIX_EXERCISE_TYPE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            editSessionDescriptor"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    .setInterval("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                            SessionParserUtil.parseIntervalFromStartAndDuration(argMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                                            .getValue(PREFIX_START_TIME).get(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                                    argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!editSessionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            throw new ParseException(EditSessionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new EditSessionCommand(index, editSessionDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 3,
      "maguireong": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/SessionParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Contains utility methods used for parsing strings in the various *SessionParser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class SessionParserUtil extends ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses a {@code String gym} into a {@code Gym}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws ParseException if the given {@code gym} is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static Gym parseGym(String gym) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(gym);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String trimmedGym \u003d gym.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!Gym.isValidGym(trimmedGym)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Gym(gym);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses a {@code String exerciseType} into an {@code ExerciseType}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws ParseException if the given {@code exerciseType} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static ExerciseType parseExerciseType(String exerciseType) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(exerciseType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String trimmedExerciseType \u003d exerciseType.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!ExerciseType.isValidExerciseType(trimmedExerciseType)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(ExerciseType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new ExerciseType(trimmedExerciseType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parses a {@code String startTime, @code String duration} into an {@code Interval}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws ParseException if the given {@code interval} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static Interval parseIntervalFromStartAndDuration(String startTime, String duration) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(startTime, duration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (isInvalidDateTime(startTime)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!isInteger(duration)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        LocalDateTime start \u003d parseStringToDateTime(startTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        int dur \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!Interval.isValidInterval(dur)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Interval(start, dur);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses a {@code String startTime, @code String duration} into an {@code Interval}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws ParseException if the given {@code interval} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static Interval parseIntervalFromStartAndEnd(String startTime, String endTime) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (isInvalidDateTime(startTime)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (isInvalidDateTime(endTime)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        LocalDateTime start \u003d parseStringToDateTime(startTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        LocalDateTime end \u003d parseStringToDateTime(endTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        int dur \u003d (int) Duration.between(start, end).toMinutes();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!Interval.isValidInterval(dur)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new Interval(start, dur);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Standardize the output format for DateTime string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param dateTime the LocalDateTime object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return the String object of datetime parsed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static String parseDateTimeToString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return dateTime.format(Interval.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Standardize the input format for DateTime string."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param input the string to parse into LocalDateTime."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return the LocalDateTime object converted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static LocalDateTime parseStringToDateTime(String input) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return LocalDateTime.parse(input, Interval.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Tries to parse a String input as LocalDateTime"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param input a String to check whether if it is a valid date time pattern."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return true if input is a invalid date time pattern, false otherwise."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isInvalidDateTime(String input) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            LocalDateTime.parse(input, Interval.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Tries to parse a String input as Integer"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param input a String to check whether if it contains an integer."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return true if input is integer, false otherwise."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 27,
      "benclmnt": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/session/ViewSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.PREDICATE_HASH_MAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_PATTERN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.session.ViewSessionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ViewSessionCommandParser implements Parser\u003cViewSessionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Checks if a period provided by the user is recognised"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param period a String to check whether if it is a valid period."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return true if period is valid, false otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static boolean isValidPeriod(String period) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return PREDICATE_HASH_MAP.containsKey(period) || VALID_PATTERN.matcher(period).matches();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewSessionCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * and returns an ViewSessionCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ViewSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isEmpty() || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                || !isValidPeriod(argMultimap.getValue(PREFIX_PERIOD).get())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return new ViewSessionCommand(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 2,
      "kelvinvin": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final UniqueList\u003cClient\u003e clients;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final UniqueList\u003cSession\u003e sessions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final UniqueList\u003cSchedule\u003e schedules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        clients \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        sessions \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        schedules \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates an AddressBook using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Replaces the contents of the Client list with {@code Clients}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * {@code Clients} must not contain duplicate Clients."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.clients.setAll(clients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        setSessions(newData.getSessionList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        setSchedules(newData.getScheduleList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    //// Client-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns true if a Client with the same identity as {@code Client} exists in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Adds a Client to the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * The Client must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        clients.add(p);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Replaces the given Client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * The Client identity of {@code editedClient} must not be the same as another existing Client in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        clients.set(target, editedClient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SESSION-RELATED \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Replaces the contents of the Session list with {@code Session}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code Sessions} must not contain duplicate Sessions."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.sessions.setAll(sessions);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.sessions.sort();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    //// Client-level operations"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if a Session with the same identity as {@code Session} exists in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return sessions.contains(session);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Adds a Session to the session list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The Session must not already exist in the session list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void addSession(Session s) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        sessions.add(s);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Replaces the given Session {@code target} in the list with {@code editedSession}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The Session identity of {@code editedSession} must not be the same as another existing Session."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(editedSession);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        sessions.set(target, editedSession);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Removes {@code key} from this {@code SessionList}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code key} must exist in the session list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void removeSession(Session key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        sessions.remove(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Sorts {@code session} from this {@code SessionList} in ascending startDate order."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void sortSession() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessions.sort();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SCHEDULE-RELATED \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Replaces the contents of the Schedule list with {@code Schedule}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code Schedule} must not contain duplicate Schedules."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void setSchedules(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.schedules.setAll(schedules);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    //// Client-level operations"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same identity as {@code Schedule} exists in the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return schedules.contains(schedule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Adds a Schedule to the schedule list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * The Schedule must not already exist in the schedule list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        schedules.add(schedule);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Replaces the given Schedule {@code target} in the list with {@code editedSchedule}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * The Schedule identity of {@code editedSchedule} must not be the same as another existing Schedule."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(editedSchedule);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        schedules.set(target, editedSchedule);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Removes {@code key} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code key} must exist in the schedule list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void removeSchedule(Schedule key) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        schedules.remove(key);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return String.format(\"%s\\n%s\\n%s\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                clients.asUnmodifiableObservableList().size() + \" Clients\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                sessions.asUnmodifiableObservableList().size() + \" Sessions\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                schedules.asUnmodifiableObservableList().size() + \" Schedules\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return sessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getScheduleList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return schedules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Finds all {@code Schedule} that contains {@code session} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * {@code sessionKey} must exist in the schedule list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return A list of clients that are associated to {@code sessionKey} in the {@code ScheduleList}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cClient\u003e findClientBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Stream\u003cSchedule\u003e schedulesContainingSession \u003d schedules.findAllMatch(s-\u003e s.getSession().equals(sessionKey));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Stream\u003cClient\u003e clientsInSession \u003d schedulesContainingSession.map(Schedule::getClient);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return clientsInSession.collect(Collectors.toList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Finds all {@code Session} that contains {@code session} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * {@code clientKey} must exist in the schedule list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return A list of session that are associated to {@code clientKey} in the {@code ScheduleList}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cSession\u003e findSessionByClient(Client clientKey) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Stream\u003cSchedule\u003e schedulesContainingSession \u003d schedules.findAllMatch(s-\u003e s.getClient().equals(clientKey));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Stream\u003cSession\u003e sessionsInClient \u003d schedulesContainingSession.map(Schedule::getSession);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return sessionsInClient.collect(Collectors.toList());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Finds all {@code Schedule} that contains {@code session} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code sessionKey} must exist in the schedule list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @return A list of schedules that are associated to {@code sessionKey} in the {@code ScheduleList}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public List\u003cSchedule\u003e findScheduleBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Stream\u003cSchedule\u003e schedulesContainingSession \u003d schedules.findAllMatch(s-\u003e s.getSession().equals(sessionKey));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return schedulesContainingSession.collect(Collectors.toList());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Finds the {@code Schedule} that contains {@code client} and {@code session} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code clientKey} and {@code sessionKey} must exist in the schedule list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @return A list of schedules that are associated to {@code clientKey} and"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code sessionKey} in the {@code ScheduleList}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Optional\u003cSchedule\u003e schedulesContainingClientAndSession \u003d schedules.findAnyMatch(s-\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                s.getClient().equals(clientKey) \u0026\u0026 s.getSession().equals(sessionKey));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return schedulesContainingClientAndSession.get();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 clients.equals(((AddressBook) other).clients));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // todo: add equality check for sessions and schedules"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return clients.hashCode();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 75,
      "maguireong": 24,
      "tanweijie123": 66,
      "kelvinvin": 33,
      "benclmnt": 1,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CheckExisting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " * This interface provides a weaker equality check."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public interface CheckExisting\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if 2 elements has the same unique identifier."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * This defines a weaker notion of equality between two elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean isUnique(T other);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    Predicate\u003cSession\u003e PREDICATE_SHOW_ALL_SESSIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Predicate\u003cSchedule\u003e PREDICATE_SHOW_ALL_SCHEDULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns true if a Client with the same identity as {@code Client} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Deletes every Schedule with the same client as {@code client}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void deleteClientAssociatedSchedules(Client client);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Deletes the given Client."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * The Client must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Adds the given Client."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * {@code client} must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Replaces the given Client {@code target} with {@code editedClient}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * The Client identity of {@code editedClient} must not be the same as another existing Client in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Client list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Updates the filter of the filtered Client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if a Session with the same identity as {@code Session} exists in the Session List."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    boolean hasSession(Session session);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Deletes every Schedule with the same session as {@code session}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    void deleteSessionAssociatedSchedules(Session session);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Deletes the given Session."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The Session must exist in the Session List."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    void deleteSession(Session session);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Adds the given Session."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code client} must not already exist in the Session List."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    void addSession(Session session);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Replaces the given Session {@code target} with {@code editedSession}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code target} must exist in the Session List."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The Session identity of {@code editedSession} must not be the same as another existing Session"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *     in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    void setSession(Session target, Session editedSession);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Sorts the Session List by session\u0027s natural order."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    void sortSession();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Session list */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Updates the filter of the filtered Session list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    void updateFilteredSessionList(Predicate\u003cSession\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same identity as {@code Schedule} exists in the Schedule List."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    boolean hasSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same session as {@code session} exists in the Schedule List."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    boolean hasAnyScheduleAssociatedWithSession(Session session);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Edits every Schedule with the same session as {@code sessionToEdit} into {@code editedSession}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void editSchedulesAssociatedWithSession(Session sessionToEdit, Session editedSession);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same client as {@code Client} exists in the Schedule List."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    boolean hasAnyScheduleAssociatedWithClient(Client toEdit);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Edits every Schedule with the same client as {@code client}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void editSchedulesAssociatedWithClient(Client toEdit, Client editedClient);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same client as {@code client} and schedule as"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code schedule} exists in the Schedule List."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    boolean hasAnyScheduleAssociatedWithClientAndSession(Client client, Session session);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Deletes the given Schedule."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * The Schedule must exist in the Schedule List."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void deleteSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Adds the given Schedule."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code client} must not already exist in the Schedule List."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void addSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Replaces the given Schedule {@code target} with {@code editedSchedule}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code target} must exist in the Schedule List."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * The Schedule identity of {@code editedSchedule} must not be the same as another existing Schedule"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *     in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void setSchedule(Schedule target, Schedule editedSchedule);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Schedule list */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Updates the filter of the filtered Schedule list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Finds all {@code Clients} in {@code Schedule List} that are associated to {@code sessionKey}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws NullPointerException if {@code sessionKey} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    List\u003cClient\u003e findClientBySession(Session sessionKey);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Finds all {@code Sessions} in {@code Schedule List} that are associated to {@code clientKey}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws NullPointerException if {@code clientKey} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    List\u003cSession\u003e findSessionByClient(Client clientKey);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Finds a {@code Schedule} in {@code Schedule List} that are associated to {@code sessionKey}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws NullPointerException if {@code sessionKey} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    List\u003cSchedule\u003e findScheduleBySession(Session sessionKey);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Finds a {@code Schedule} in {@code Schedule List} that are associated"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * to {@code clientKey} and {@code sessionKey}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws NullPointerException if {@code clientKey} or {@code sessionKey} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 77,
      "maguireong": 17,
      "tanweijie123": 31,
      "kelvinvin": 18,
      "benclmnt": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents the in-memory model of the FitEgo\u0027s data (client + session + schedule)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final FilteredList\u003cSession\u003e filteredSessions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final FilteredList\u003cSchedule\u003e filteredSchedules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        filteredSessions \u003d new FilteredList\u003c\u003e(this.addressBook.getSessionList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        filteredSchedules \u003d new FilteredList\u003c\u003e(this.addressBook.getScheduleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sortSession();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return addressBook.hasClient(client);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void deleteClientAssociatedSchedules(Client client) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSchedule\u003e associatedSchedules \u003d addressBook.getScheduleList()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .filter(schedule -\u003e client.isUnique(schedule.getClient()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule schedule : associatedSchedules) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            this.deleteSchedule(schedule);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        logger.info(String.format(\"User force delete Client %s\\n causing %d schedules to be deleted\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                client.toString(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                associatedSchedules.size()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.removeClient(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.setClient(target, editedClient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SessionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return addressBook.hasSession(session);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void deleteSessionAssociatedSchedules(Session session) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cSchedule\u003e associatedSchedules \u003d addressBook.getScheduleList()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .filter(schedule -\u003e session.isUnique(schedule.getSession()))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (Schedule schedule : associatedSchedules) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            this.deleteSchedule(schedule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        logger.info(String.format(\"User force delete Session %s\\n causing %d schedules to be deleted\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                session.toString(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                associatedSchedules.size()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void deleteSession(Session session) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBook.removeSession(session);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBook.addSession(session);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sortSession();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireAllNonNull(target, editedSession);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBook.setSession(target, editedSession);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sortSession();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void sortSession() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBook.sortSession();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Session List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return filteredSessions;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        filteredSessions.setPredicate(predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sortSession();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.hasSchedule(schedule);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same client as {@code Client} exists in the Schedule List."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean hasAnyScheduleAssociatedWithClient(Client clientToEdit) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(clientToEdit);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.getScheduleList()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .map(Schedule::getClient)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .anyMatch(clientToEdit::isUnique);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Edits every Schedule with the same client as {@code client}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void editSchedulesAssociatedWithClient(Client clientToEdit, Client editedClient) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSchedule\u003e associatedSchedules \u003d addressBook.getScheduleList()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .filter(schedule -\u003e clientToEdit.isUnique(schedule.getClient()))"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule schedule : associatedSchedules) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            this.setSchedule(schedule, new Schedule(editedClient, schedule.getSession()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same session as {@code session} exists in the Schedule List."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean hasAnyScheduleAssociatedWithSession(Session session) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.getScheduleList()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .map(Schedule::getSession)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .anyMatch(session::isUnique);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Edits every Schedule with the same session as {@code sessionToEdit} into {@code editedSession}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void editSchedulesAssociatedWithSession(Session sessionToEdit, Session editedSession) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(sessionToEdit, editedSession);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSchedule\u003e associatedSchedules \u003d addressBook.getScheduleList()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .filter(schedule -\u003e sessionToEdit.isUnique(schedule.getSession()))"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule schedule : associatedSchedules) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            this.setSchedule(schedule, new Schedule(schedule.getClient(), editedSession));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a Schedule with the same client as {@code client} and schedule as"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code schedule} exists in the Schedule List."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean hasAnyScheduleAssociatedWithClientAndSession(Client client, Session session) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(client, session);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.getScheduleList()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .anyMatch(schedule -\u003e schedule.getClient().equals(client) \u0026\u0026 schedule.getSession().equals(session));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void deleteSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        addressBook.removeSchedule(schedule);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        addressBook.addSchedule(schedule);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULES);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(target, editedSchedule);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        addressBook.setSchedule(target, editedSchedule);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Schedule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return filteredSchedules;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        filteredSchedules.setPredicate(predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Client-Session Association \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cClient\u003e findClientBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        requireNonNull(sessionKey);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return addressBook.findClientBySession(sessionKey);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public List\u003cSession\u003e findSessionByClient(Client clientKey) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        requireNonNull(clientKey);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return addressBook.findSessionByClient(clientKey);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(clientKey, sessionKey);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.findScheduleByClientAndSession(clientKey, sessionKey);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public List\u003cSchedule\u003e findScheduleBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(sessionKey);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return addressBook.findScheduleBySession(sessionKey);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util-related \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 filteredSessions.equals(other.filteredSessions)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 filteredSchedules.equals(other.filteredSchedules);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 132,
      "maguireong": 20,
      "tanweijie123": 33,
      "kelvinvin": 35,
      "benclmnt": 20,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an unmodifiable view of the Clients list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * This list will not contain any duplicate Clients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    ObservableList\u003cSession\u003e getSessionList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    ObservableList\u003cSchedule\u003e getScheduleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 2,
      "maguireong": 4,
      "tanweijie123": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class UniqueList\u003cT extends CheckExisting\u003cT\u003e \u0026 Comparable\u003cT\u003e\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isUnique);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Replaces the {@code target} in the list with {@code editedTarget}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The T identity of {@code editedTarget} must not be the same as another existing T in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set(T target, T edited) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!target.isUnique(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setAll(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Replaces the contents of this list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * It must not contain duplicate objects."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setAll(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns all elements T in the internal list that matches {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Stream\u003cT\u003e findAllMatch(Predicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return internalUnmodifiableList.stream().filter(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns an element T in the internal list that matches {@code predicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Optional\u003cT\u003e findAnyMatch(Predicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return internalUnmodifiableList.stream().filter(predicate).findAny();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                || (other instanceof UniqueList\u003c?\u003e // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueList\u003c?\u003e) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Sorts elements in the list using T\u0027s compareTo method."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        internalList.sort(Comparable::compareTo);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Returns true if {@code elements} contains are unique."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Note that this only compares using CheckExisiting::isUnique"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        for (int i \u003d 0; i \u003c elements.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            for (int j \u003d i + 1; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                if (elements.get(i).isUnique(elements.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 9,
      "tanweijie123": 125,
      "kelvinvin": 18,
      "benclmnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Represents a Client\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.CheckExisting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Represents a Client in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Client implements CheckExisting\u003cClient\u003e, Comparable\u003cClient\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns true if both Clients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * This defines a weaker notion of equality between two Clients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean isUnique(Client otherClient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 (otherClient.getPhone().equals(getPhone()) || otherClient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns true if both Clients have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * This defines a stronger notion of equality between two Clients."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int compareTo(Client client) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.getName().compareTo(client.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 18,
      "tanweijie123": 3,
      "kelvinvin": 6,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Represents a Client\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Represents a Client\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.fullName.compareTo(other.fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 2,
      "kelvinvin": 5,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsSubstringPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any substring given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class NameContainsSubstringPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public NameContainsSubstringPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                || (other instanceof NameContainsSubstringPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsSubstringPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Represents a Client\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateEntityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/EntityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class EntityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/PaymentStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class PaymentStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String VALUE_PAID \u003d \"paid\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String VALUE_UNPAID \u003d \"unpaid\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final PaymentStatus PAYMENT_STATUS_UNPAID \u003d new PaymentStatus(VALUE_UNPAID);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_INVALID_PAYMENT_STATUS \u003d \"Payment Status must be either paid or unpaid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Constructs a {@code PaymentStatus}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @param status Whether paid or not paid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public PaymentStatus(String status) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        checkArgument(isValidPaymentStatus(status), MESSAGE_INVALID_PAYMENT_STATUS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assert status.equals(VALUE_PAID) || status.equals(VALUE_UNPAID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.value \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if paid, or false if unpaid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean isPaid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assert isValidPaymentStatus(value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return value.equals(VALUE_PAID) ? true : false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if a given string is a valid payment status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static boolean isValidPaymentStatus(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return test.equals(VALUE_PAID) || test.equals(VALUE_UNPAID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || (other instanceof PaymentStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 value.equals(((PaymentStatus) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a Schedule\u0027s remark in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Remark can be any string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/SameSchedulePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class SameSchedulePredicate implements Predicate\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public SameSchedulePredicate(Schedule schedule) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean test(Schedule otherSchedule) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return schedule.isUnique(otherSchedule);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                || (other instanceof SameSchedulePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 schedule.equals(((SameSchedulePredicate) other).schedule)); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 22,
      "tanweijie123": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.CheckExisting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Schedule implements CheckExisting\u003cSchedule\u003e, Comparable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private PaymentStatus paymentStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Schedule(Client client, Session session, PaymentStatus paymentStatus, Remark remark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(client, session);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.paymentStatus \u003d paymentStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Every field must be present and not null. payment is set to not paid. remark is set to an empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Schedule(Client client, Session session) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        requireAllNonNull(client, session);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.paymentStatus \u003d PaymentStatus.PAYMENT_STATUS_UNPAID;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.remark \u003d Remark.EMPTY_REMARK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Session getSession() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public PaymentStatus getPaymentStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return paymentStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean isPaid() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return paymentStatus.isPaid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if both Schedules have the same identity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean isUnique(Schedule otherSchedule) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (otherSchedule \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (otherSchedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return otherSchedule.client.equals(this.client) \u0026\u0026 otherSchedule.session.equals(this.session);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns true if both Schedule have the same identity."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!(other instanceof Schedule)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule otherSchedule \u003d (Schedule) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return otherSchedule.client.equals(this.client) \u0026\u0026 otherSchedule.session.equals(this.session)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                \u0026\u0026 otherSchedule.paymentStatus.equals(paymentStatus) \u0026\u0026 otherSchedule.remark.equals(this.remark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return Objects.hash(client, session);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int compareTo(Schedule other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.getSession().compareTo(other.getSession());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String paymentStatusString \u003d \"Payment status: \" + paymentStatus;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String remarkPresent \u003d !remark.equals(Remark.EMPTY_REMARK) ? \"Remark: \" + remark : \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return \"Client \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + client"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + \" with session \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + session"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + paymentStatusString"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + remarkPresent;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 99,
      "tanweijie123": 3,
      "kelvinvin": 6,
      "benclmnt": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/ExerciseType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a Session\u0027s exercise type in FitEgo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExerciseType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ExerciseType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Exercise types can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * The first character of the exercise type must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Constructs an {@code Exercise Type}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param value A valid value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public ExerciseType(String value) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        checkArgument(isValidExerciseType(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if a given string is a valid exercise type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isValidExerciseType(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof ExerciseType // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 value.equals(((ExerciseType) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Gym.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a Session\u0027s gym in FitEgo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGym(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Gym {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gyms can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * The first character of the gym must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Constructs an {@code Gym}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Gym(String address) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        checkArgument(isValidGym(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if a given string is a valid gym."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isValidGym(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof Gym // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 address.equals(((Gym) other).address)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return address.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Interval.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a Session\u0027s interval in FitEgo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInterval(int)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Interval {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String DATE_TIME_PATTERN \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private static final String SIMPLE_DATE_TIME_PATTERN \u003d \"EE dd MMM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private static final String TIME_12HR_PATTERN \u003d \"hh:mm a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final DateTimeFormatter SIMPLE_DATE_TIME_PATTERN_FORMATTER \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            SIMPLE_DATE_TIME_PATTERN);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final DateTimeFormatter TIME_12HR_PATTERN_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_12HR_PATTERN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_DATE_TIME_CONSTRAINTS \u003d \"Start time must follow \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + DATE_TIME_PATTERN + \" pattern\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Intervals can start at any time, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"but duration must be a positive integer and \" + MESSAGE_DATE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final int durationInMinutes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Constructs an {@code Gym}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param start    A valid start datetime."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param duration A valid duration."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Interval(LocalDateTime start, int duration) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireNonNull(start);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        checkArgument(isValidInterval(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.durationInMinutes \u003d duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if a given string is a valid gym."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static boolean isValidInterval(int duration) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return duration \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getFormattedStartDateTime(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.start.format(formatter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.start.plusMinutes(durationInMinutes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return getStart().format(DATE_TIME_FORMATTER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + getEnd().format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getTime12hrPattern() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return getStart().format(TIME_12HR_PATTERN_FORMATTER)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                + getEnd().format(TIME_12HR_PATTERN_FORMATTER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof Interval // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 start.equals(((Interval) other).start)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 durationInMinutes \u003d\u003d ((Interval) other).durationInMinutes); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 16,
      "benclmnt": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/IntervalContainsDatetimePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Tests that a {@code Session}\u0027s {@code interval} contains datetime given (interval\u0027s start and end time inclusive)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class IntervalContainsDatetimePredicate implements Predicate\u003cSession\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final LocalDateTime datetime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public IntervalContainsDatetimePredicate(LocalDateTime datetime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean test(Session session) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Interval sessionInterval \u003d session.getInterval();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return !datetime.isBefore(sessionInterval.getStart()) \u0026\u0026 !datetime.isAfter(sessionInterval.getEnd());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                || (other instanceof IntervalContainsDatetimePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                \u0026\u0026 datetime.equals(((IntervalContainsDatetimePredicate) other).datetime)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Session.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.CheckExisting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a training Session in FitEgo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Session implements CheckExisting\u003cSession\u003e, Comparable\u003cSession\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Gym gym;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Interval interval;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final ExerciseType exerciseType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Session(Gym gym, ExerciseType exerciseType, Interval interval) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        requireAllNonNull(gym, exerciseType, interval);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.exerciseType \u003d exerciseType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.gym \u003d gym;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    //Getters / Setters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Gym getGym() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return gym;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Interval getInterval() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return interval;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return interval.getStart();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return interval.getEnd();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public ExerciseType getExerciseType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return exerciseType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if both Sessions have overlapping intervals"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Two sessions are defined as duplicate if and only if at least one time boundary lies strictly inside"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * the other session\u0027s interval"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * This defines a different notion of equality between two Sessions compared to {@code equals}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean isUnique(Session otherSession) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (otherSession \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (otherSession \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (otherSession.getStartTime().isAfter(getStartTime())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // other session start time is \u003e this session start time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // this session: 2 - 4pm, other session: 4 - 6pm -\u003e do not overlap"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // this session: 2 - 4.01pm, other session: 4 - 6pm -\u003e overlap"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return getEndTime().isAfter(otherSession.getStartTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // other session start time is \u003c\u003d this session start time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return otherSession.getEndTime().isAfter(getStartTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns true if both Session have the same identity and data fields."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * This defines a stronger notion of equality between two Sessions."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!(other instanceof Session)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session otherSession \u003d (Session) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return otherSession.getGym().equals(getGym())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 otherSession.getInterval().equals(getInterval())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u0026\u0026 otherSession.getExerciseType().equals(getExerciseType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return Objects.hash(gym, interval, exerciseType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int compareTo(Session session) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.getStartTime().compareTo(session.getStartTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        builder.append(\" Start: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .append(SessionParserUtil.parseDateTimeToString(getStartTime()))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .append(\" End: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .append(SessionParserUtil.parseDateTimeToString(getEndTime()))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .append(\" Gym: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .append(gym)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .append(\" Exercise Type: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .append(exerciseType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 2,
      "maguireong": 5,
      "tanweijie123": 10,
      "kelvinvin": 9,
      "benclmnt": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric or hyphen.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            + \"Hyphen is not allowed as the start or the end of a tag.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([\\\\p{Alnum}]+)[\\\\p{Alnum}-]*([\\\\p{Alnum}]+)$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new Client[]{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"injured-thigh\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"allergy-nuts\", \"injured-thigh\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"injured-back\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"allergy-dairy\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"injured-thumb\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                getTagSet(\"allergy-nuts\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static Session[] getSampleSession() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return new Session[]{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new Session(new Gym(\"Getwell gym\"), new ExerciseType(\"Endurance\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    new Interval(SessionParserUtil.parseStringToDateTime(\"29/09/2020 1300\"), 120)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new Session(new Gym(\"Machoman gym\"), new ExerciseType(\"Bodybuilder\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    new Interval(SessionParserUtil.parseStringToDateTime(\"29/09/2020 1600\"), 150))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            //INFO: if you reach here, it means the date input above is wrong."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            System.err.println(\"Default data not initialised. \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new UnsupportedOperationException(); //cannot return null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static Schedule[] getSampleSchedule() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return new Schedule[]{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                new Schedule("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        getTagSet(\"allergy-nuts\", \"injured-thigh\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    new Session(new Gym(\"Getwell gym\"), new ExerciseType(\"Endurance\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        new Interval(SessionParserUtil.parseStringToDateTime(\"29/09/2020 1300\"), 120))),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                new Schedule("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        getTagSet(\"injured-thigh\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    new Session(new Gym(\"Machoman gym\"), new ExerciseType(\"Bodybuilder\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        new Interval(SessionParserUtil.parseStringToDateTime(\"29/09/2020 1600\"), 150)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            //INFO: if you reach here, it means the date input above is wrong."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            System.err.println(\"Default data not initialised. \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new UnsupportedOperationException(); //cannot return null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        for (Session sampleSession : getSampleSession()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            sampleAb.addSession(sampleSession);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule sampleSchedule : getSampleSchedule()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            sampleAb.addSchedule(sampleSchedule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 28,
      "maguireong": 15,
      "tanweijie123": 16,
      "benclmnt": 14,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given Client details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Converts this Jackson-friendly adapted Client object into the model\u0027s {@code Client} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Client."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new Client(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 19,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.schedule.ScheduleParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class JsonAdaptedSchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String START_TIME_FIELD \u003d \"session start time\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String END_TIME_FIELD \u003d \"session end time\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final String clientEmail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final String paymentStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given Schedule details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"clientEmail\") String clientEmail,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                               @JsonProperty(\"sessionStart\") String start,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                               @JsonProperty(\"sessionEnd\") String end,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                               @JsonProperty(\"paymentStatus\") String paymentStatus,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                               @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientEmail \u003d clientEmail;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.paymentStatus \u003d paymentStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public JsonAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientEmail \u003d source.getClient().getEmail().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        start \u003d SessionParserUtil.parseDateTimeToString(source.getSession().getStartTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        end \u003d SessionParserUtil.parseDateTimeToString(source.getSession().getEndTime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        paymentStatus \u003d source.getPaymentStatus().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Converts this Jackson-friendly adapted Schedule object to get its model\u0027s {@code Email} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Email."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Email getClientEmail() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (clientEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (!Email.isValidEmail(clientEmail)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Email(clientEmail);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Converts this Jackson-friendly adapted Schedule object to get its model\u0027s {@code Interval} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted id."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Interval getSessionInterval() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    START_TIME_FIELD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (SessionParserUtil.isInvalidDateTime(start)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    END_TIME_FIELD));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (SessionParserUtil.isInvalidDateTime(end)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return SessionParserUtil.parseIntervalFromStartAndEnd(start, end);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Converts this Jackson-friendly adapted Schedule object to get its model\u0027s {@code PaymentStatus} object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted payment status."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public PaymentStatus getPaymentStatus() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (paymentStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    PaymentStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return ScheduleParserUtil.parsePaymentStatus(paymentStatus);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Converts this Jackson-friendly adapted Schedule object to get its model\u0027s {@code remark} object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted remark value."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Remark getRemark() throws IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 105,
      "benclmnt": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class JsonAdaptedSession {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Session\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final String gym;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final String exerciseType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Constructs a {@code JsonAdaptedSession} with the given Session details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public JsonAdaptedSession(@JsonProperty(\"gym\") String gym,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                              @JsonProperty(\"exerciseType\") String exerciseType,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                              @JsonProperty(\"start\") String start,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                              @JsonProperty(\"end\") String end) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.gym \u003d gym;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.exerciseType \u003d exerciseType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Converts a given {@code Session} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public JsonAdaptedSession(Session source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        gym \u003d source.getGym().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        exerciseType \u003d source.getExerciseType().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        start \u003d SessionParserUtil.parseDateTimeToString(source.getStartTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        end \u003d SessionParserUtil.parseDateTimeToString(source.getEndTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Converts this Jackson-friendly adapted Session object into the model\u0027s {@code Session} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Session."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public Session toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        /* To do the same as Client\u0027s toModelType codes, we need to create field-typed classes */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (gym \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gym.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!Gym.isValidGym(gym)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Gym modelGym \u003d new Gym(gym);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (exerciseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    ExerciseType.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!ExerciseType.isValidExerciseType(exerciseType)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(ExerciseType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ExerciseType modelExerciseType \u003d new ExerciseType(exerciseType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (start \u003d\u003d null || SessionParserUtil.isInvalidDateTime(start)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (end \u003d\u003d null || SessionParserUtil.isInvalidDateTime(end)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        final LocalDateTime startDateTime \u003d SessionParserUtil.parseStringToDateTime(start);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        final LocalDateTime endDateTime \u003d SessionParserUtil.parseStringToDateTime(end);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        final int duration \u003d (int) startDateTime.until(endDateTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!Interval.isValidInterval(duration)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new IllegalValueException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Interval modelInterval \u003d new Interval(startDateTime, duration);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Session(modelGym, modelExerciseType, modelInterval);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "tanweijie123": 49,
      "benclmnt": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 1,
      "benclmnt": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate Client(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"Session list contains duplicate Session(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"Schedule list contains duplicate Schedule(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String CLIENT_NOT_FOUND \u003d \"Clients list is missing the expected client for Schedule(s).\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String SESSION_NOT_FOUND \u003d \"Sessions list is missing the expected session for Schedule(s).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final List\u003cJsonAdaptedSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private final List\u003cJsonAdaptedSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given Clients."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                                       @JsonProperty(\"sessions\") List\u003cJsonAdaptedSession\u003e sessions,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                                       @JsonProperty(\"schedules\") List\u003cJsonAdaptedSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.sessions.addAll(sessions);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.schedules.addAll(schedules);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.sessions.addAll(source.getSessionList().stream().map(JsonAdaptedSession::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.schedules.addAll(source.getScheduleList().stream().map(JsonAdaptedSchedule::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : this.clients) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (addressBook.hasClient(client)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            addressBook.addClient(client);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        for (JsonAdaptedSession jsonAdaptedSession : this.sessions) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            Session session \u003d jsonAdaptedSession.toModelType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (addressBook.hasSession(session)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            addressBook.addSession(session);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (JsonAdaptedSchedule jsonAdaptedSchedule : this.schedules) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Email clientEmail \u003d jsonAdaptedSchedule.getClientEmail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Interval sessionInterval \u003d jsonAdaptedSchedule.getSessionInterval();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Client client \u003d getClientWithEmail(clientEmail, addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Session session \u003d getSessionWithInterval(sessionInterval, addressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            if (client \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                throw new IllegalValueException(CLIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            } else if (session \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                throw new IllegalValueException(SESSION_NOT_FOUND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            PaymentStatus payment \u003d jsonAdaptedSchedule.getPaymentStatus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Remark remark \u003d jsonAdaptedSchedule.getRemark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            Schedule schedule \u003d new Schedule(client, session, payment, remark);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            if (addressBook.hasSchedule(schedule)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            addressBook.addSchedule(schedule);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns the {@code Client} with the same {@code Email} from {@code addressBook} or null if not found."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Client getClientWithEmail(Email email, AddressBook addressBook) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Client client : addressBook.getClientList()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            if (client.getEmail().equals(email)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                return client;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns the {@code Session} with the same {@code id} from {@code addressBook} or null if not found."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Session getSessionWithInterval(Interval interval, AddressBook addressBook) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Session session : addressBook.getSessionList()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            if (session.getInterval().equals(interval)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                return session;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 50,
      "maguireong": 11,
      "tanweijie123": 16,
      "kelvinvin": 7,
      "benclmnt": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.model.session.Interval.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private static final String nextSessionStart \u003d \"Next Session: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label nextSession;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates a {@code ClientCode} with the given {@code Client} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ClientCard(Client client, int displayedIndex, Session session) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (session !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            nextSession.setText(nextSessionStart + session.getInterval().getFormattedStartDateTime("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            nextSession.setText(nextSessionStart + \" - \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 12,
      "kelvinvin": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientInfoPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class ClientInfoPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static final String FXML \u003d \"ClientInfoPage.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final Client client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ImageView imgProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblPhone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblEmail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblAddress;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Displays a client\u0027s profile in a separate window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * It should display all the details pertaining to this {@code Client}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param client The client to display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public ClientInfoPage(Client client) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //TODO: update profile image"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblName.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblPhone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblEmail.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblAddress.setText(client.getAddress().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        client.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (!(other instanceof ClientInfoPage)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ClientInfoPage card \u003d (ClientInfoPage) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return client.equals(card.client);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Panel containing the list of Clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public final Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ClientListPanel(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        clientListView.setItems(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Updates the content of the Client ListView"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        clientListView.setItems(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        clientListView.setItems(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                List\u003cSession\u003e associatedSessions \u003d logic.getAssociatedSessionList(client);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                associatedSessions.sort(Session::compareTo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                if (associatedSessions.size() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    setGraphic(new ClientCard(client, getIndex() + 1, associatedSessions.get(0)).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    setGraphic(new ClientCard(client, getIndex() + 1, null).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * When the user click on any profile in ListView, it will display it on the Main GUI."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void onMouseClicked_displayClientInfo() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Client toView \u003d clientListView.getFocusModel().getFocusedItem();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ClientInfoPage cip \u003d new ClientInfoPage(toView);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        mainWindow.setMainDisplay(cip.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 44,
      "tanweijie123": 11,
      "kelvinvin": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public CommandBox(MainWindow mainWindow, CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        bindAutoComplete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        bindPastCommands();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Binds Autocomplete to Command Text Field."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Autocomplete will not appear in the following scenario"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *    1. When TextField is blank"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *    2. When the list.size() \u003d 1 \u0026 TextField is exactly list.get(0)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * The reason for point 2 is that the AutoComplete will \"consume\" the enter, thus the instruction is not executed,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *    or, it will take the focus off \"help\" window."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * It is also recommended not to have command that are substring of another command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *    Eg. \"help\" and \"helptask\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void bindAutoComplete() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        TextFields.bindAutoCompletion(commandTextField,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            t -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                if (t.getUserText().isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                List\u003cString\u003e list \u003d AddressBookParser.getCommandList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .filter(x -\u003e x.startsWith(t.getUserText()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .sorted()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                if (list.size() \u003d\u003d 1 \u0026\u0026 list.get(0).equalsIgnoreCase(t.getUserText())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Scroll Past Commands using Key.UP and Key.DOWN"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void bindPastCommands() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_PRESSED, k -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (k.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                List\u003cString\u003e pastCommandList \u003d mainWindow.getPastCommandList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                int cursor \u003d mainWindow.getPastCommandListCursor() - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                if (cursor \u003e\u003d 0) { //Allow to scroll up if within range"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    commandTextField.setText(pastCommandList.get(cursor));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    mainWindow.setPastCommandListCursor(cursor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else if (k.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                List\u003cString\u003e pastCommandList \u003d mainWindow.getPastCommandList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                int cursor \u003d mainWindow.getPastCommandListCursor() + 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                if (cursor \u003c (pastCommandList).size()) { //Allow to scroll down if within range"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    commandTextField.setText(pastCommandList.get(cursor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    mainWindow.setPastCommandListCursor(cursor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                } else if (cursor \u003d\u003d (pastCommandList).size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    mainWindow.setPastCommandListCursor(cursor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 69,
      "kelvinvin": 3,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.controlsfx.control.HyperlinkLabel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t13-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private HyperlinkLabel helpMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE + \"[\" + USERGUIDE_URL + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Create event that on click / ENTER, it will open the browser to the UG."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        helpMessage.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                Desktop.getDesktop().browse(new URL(USERGUIDE_URL).toURI());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Create an event on ESC click, it will close this window"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        root.addEventHandler(KeyEvent.KEY_PRESSED, k -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (k.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                root.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        setFocusOnLink();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Focuses on the link. Enables the user to click enter to visit the link."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setFocusOnLink() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            TextFlow text \u003d (TextFlow) helpMessage.getChildrenUnmodifiable().get(0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            Hyperlink link \u003d (Hyperlink) text.getChildren().get(1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            link.requestFocus();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            System.err.println(\"Unable to focus on link\"); // do nothing if un-castable"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 43,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Homepage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class Homepage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static final String FXML \u003d \"Homepage.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static Homepage homepage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private GridPane gridpane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ListView\u003cSchedule\u003e todaySchedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblCurrentlyDetails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblContent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Label lblQotd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Homepage(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Initialise a Singleton Homepage GUI with an addressbook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param addressBook Address Book that this homepage reference from."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static Homepage getHomePage(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (Homepage.homepage \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            Homepage.homepage \u003d new Homepage(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return getHomePage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Gets the Singleton Homepage GUI. To get homepage successfully, it must be initialised"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *     first with an addressbook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static Homepage getHomePage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        homepage.update();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return homepage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        updateContent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        updateQotd();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Updates the Statistics shown in Homepage"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void updateStatistics() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assert(Homepage.homepage !\u003d null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        int clients \u003d addressBook.getClientList().size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        int sessions \u003d addressBook.getSessionList().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        int schedule \u003d addressBook.getScheduleList().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String display \u003d String.format(\"%-10d Clients\\n%-10d Sessions \\n%-10d Schedules\", clients, sessions, schedule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblCurrentlyDetails.setText(display);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Updates the content shown in Homepage"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void updateContent() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assert(Homepage.homepage !\u003d null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblContent.setText(\"Today\u0027s Schedule - \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                + LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"EEEE dd MMMM\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        todaySchedule.setItems(this.addressBook.getScheduleList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        todaySchedule.setCellFactory(listView -\u003e new Homepage.ScheduleListViewCell());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Updates the Quote of the day shown in homepage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void updateQotd() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.lblQotd.setText(\"Quote of the day:\\nDo Something Today That Your Future Self Will Thank You For\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    class ScheduleListViewCell extends ListCell\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        protected void updateItem(Schedule schedule, boolean empty) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            super.updateItem(schedule, empty);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (empty || schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                lbl.setText(schedule.getClient().getName() + \"\\n\" + schedule.getSession().getGym() + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        + schedule.getSession().getInterval().toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setGraphic(lbl);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private List\u003cString\u003e pastCommandList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private int pastCommandListCursor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Homepage homepage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private RightSideBar rightSideBar;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Pane mainDisplay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Pane rightDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ColumnConstraints gPaneLeft;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ColumnConstraints gPaneCentre;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ColumnConstraints gPaneRight;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.pastCommandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.pastCommandListCursor \u003d -1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addDynamicGridPaneChange(primaryStage.getScene());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(this, logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        homepage \u003d Homepage.getHomePage(this.logic.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        setMainDisplay(homepage.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        rightSideBar \u003d new RightSideBar(this, logic);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        rightDisplay.getChildren().add(rightSideBar.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this, this::executeCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public List\u003cString\u003e getPastCommandList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return this.pastCommandList;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public int getPastCommandListCursor() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return this.pastCommandListCursor;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setPastCommandListCursor(int cursor) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.pastCommandListCursor \u003d cursor;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            statusBarFooter.setDisplayString(\"Executing: \" + commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            pastCommandList.add(commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            pastCommandListCursor \u003d pastCommandList.size();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (commandResult.hasFunctionToRun()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setMainDisplay(commandResult.getPane().get());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            clientListPanel.update();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            rightSideBar.update(commandResult, commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            homepage.update();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Sets the main gui."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Note: Only use this to set main display, so that it can bind to the entire screen."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param display The Pane to display"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setMainDisplay(Pane display) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        mainDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AnchorPane.setTopAnchor(display, 0.0);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AnchorPane.setBottomAnchor(display, 0.0);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AnchorPane.setLeftAnchor(display, 0.0);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AnchorPane.setRightAnchor(display, 0.0);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        mainDisplay.getChildren().add(display);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Adds listener to width property such that if it is below a certain px, it will change to 2-grid mode."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * \u003c900px (2 grid); \u003e\u003d900 (3 grid)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param scene the scene which listener is added to."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void addDynamicGridPaneChange(Scene scene) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        scene.widthProperty().addListener((obs, oldWidth, newWidth) -\u003e {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            System.out.println(\"Width changed! old\u003d\" + oldWidth + \"; new\u003d\" + newWidth);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            //if width \u003c 800, change to 2 grid-style"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (newWidth.doubleValue() \u003c 900.0 \u0026\u0026 oldWidth.doubleValue() \u003e\u003d 900.0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                this.gPaneRight.setPercentWidth(0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                this.gPaneCentre.setPercentWidth(75);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else if (newWidth.doubleValue() \u003e\u003d 900.0 \u0026\u0026 oldWidth.doubleValue() \u003c 900) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                this.gPaneCentre.setPercentWidth(60);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                this.gPaneRight.setPercentWidth(15);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 4,
      "tanweijie123": 91,
      "kelvinvin": 3,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RightSideBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.ViewSessionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class RightSideBar extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static final String FXML \u003d \"RightSideBar.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RightSideBar.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private String previousCommand \u003d \"ALL\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private ListView\u003cSession\u003e sessionListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Creates a {@code RightSideBar} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public RightSideBar(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessionListView.setItems(logic.getFilteredSessionList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        sessionListView.setCellFactory(listView -\u003e new RightSideBar.SessionListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Updates the content of the Session ListView"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void update(CommandResult commandResult, String commandText) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String requiredPeriod \u003d requiredPeriod(commandResult, commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        title.setText(requiredPeriod);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessionListView.setItems(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessionListView.setItems(logic.getFilteredSessionList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessionListView.setCellFactory(listView -\u003e new SessionListViewCell());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Filters and returns the requiredPeriod according to the commandText"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private String requiredPeriod(CommandResult commandResult, String commandText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        if (commandResult.getFeedbackToUser().equals(ViewSessionCommand.MESSAGE_SHOW_SESSIONS_SUCCESS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u0026\u0026 commandText.contains(PREFIX_PERIOD.toString())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            int startOfPeriod \u003d commandText.indexOf(PREFIX_PERIOD.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            String period \u003d commandText.substring(startOfPeriod + 2).toUpperCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.previousCommand \u003d period;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return period;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this.previousCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Session} using a {@code SessionCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    class SessionListViewCell extends ListCell\u003cSession\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        protected void updateItem(Session session, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            super.updateItem(session, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            if (empty || session \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                List\u003cSchedule\u003e associatedSchedules \u003d logic.getAssociatedScheduleList(session);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                if (associatedSchedules.size() \u003e 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    setGraphic(new SessionCard(session, getIndex() + 1, associatedSchedules).getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    setGraphic(new SessionCard(session, getIndex() + 1, null).getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 4,
      "maguireong": 28,
      "tanweijie123": 33,
      "kelvinvin": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SessionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.model.session.Interval.SIMPLE_DATE_TIME_PATTERN_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class SessionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private static final String FXML \u003d \"SessionListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label dayOfWeek;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label sessionTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label gymName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private FlowPane associatedClient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates a {@code ScheduleCard} with the given {@code Schedule}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public SessionCard(Session session, int displayedIndex, List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        sessionTime.setText(session.getInterval().getTime12hrPattern());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        gymName.setText(session.getGym().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        dayOfWeek.setText(session.getInterval().getFormattedStartDateTime(SIMPLE_DATE_TIME_PATTERN_FORMATTER));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        if (schedules !\u003d null \u0026\u0026 schedules.size() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            schedules.forEach(schedule -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                Label clientLabel \u003d new Label(schedule.getClient().getName().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                if (schedule.isPaid()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    clientLabel.setId(\"paidClient\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                    clientLabel.setId(\"notPaidClient\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                associatedClient.getChildren().add("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        clientLabel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (!(other instanceof SessionCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        SessionCard card \u003d (SessionCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return session.equals(card.session);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 14,
      "kelvinvin": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Pair\u003cString, LocalDateTime\u003e displayString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.displayString \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        initTiming();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Sets the display text on status footer. Default display time of 3 seconds"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param display the displayed text."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setDisplayString(String display) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        setDisplayString(display, 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Sets the display text on status footer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param display the displayed text."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * @param seconds the amount of seconds to display"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void setDisplayString(String display, int seconds) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        this.displayString \u003d new Pair\u003c\u003e(display, LocalDateTime.now().plusSeconds(seconds));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void initTiming() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        //Reference: https://stackoverflow.com/questions/42383857/javafx-live-time-and-date/42384436"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            checkDisplayValidity();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (displayString \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                saveLocationStatus.setText(currentTime.format(DateTimeFormatter.ofPattern(\"dd MMMM yyyy HH:mm:ss\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                saveLocationStatus.setText(currentTime.format(DateTimeFormatter.ofPattern(\"dd MMMM yyyy HH:mm:ss\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        + \" - \" + displayString.getKey());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private void checkDisplayValidity() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        if (displayString !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            if (displayString.getValue().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                displayString \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 53,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/muscle.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/ClientInfoPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"centre-anchor-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cImageView fx:id\u003d\"imgProfile\" fitHeight\u003d\"128.0\" fitWidth\u003d\"128.0\" layoutX\u003d\"21.0\" layoutY\u003d\"23.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.topAnchor\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cImage url\u003d\"@../images/default-profile-picture.jpg\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel fx:id\u003d\"lblName\" layoutX\u003d\"190.0\" layoutY\u003d\"24.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"390.0\" style\u003d\"-fx-font-size: 20\" styleClass\u003d\"cell_big_label\" text\u003d\"{name:placeholder}\" AnchorPane.leftAnchor\u003d\"192.0\" AnchorPane.rightAnchor\u003d\"20.0\" AnchorPane.topAnchor\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel layoutX\u003d\"192.0\" layoutY\u003d\"59.0\" styleClass\u003d\"cell_small_label\" text\u003d\"Phone\" AnchorPane.leftAnchor\u003d\"192.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel fx:id\u003d\"lblPhone\" layoutX\u003d\"248.0\" layoutY\u003d\"59.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"338.0\" styleClass\u003d\"cell_small_label\" text\u003d\"{phone:placeholder}\" AnchorPane.leftAnchor\u003d\"250.0\" AnchorPane.rightAnchor\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel layoutX\u003d\"192.0\" layoutY\u003d\"89.0\" styleClass\u003d\"cell_small_label\" text\u003d\"Email\" AnchorPane.leftAnchor\u003d\"192.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel fx:id\u003d\"lblEmail\" layoutX\u003d\"248.0\" layoutY\u003d\"89.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"338.0\" styleClass\u003d\"cell_small_label\" text\u003d\"{email:placeholder}\" AnchorPane.leftAnchor\u003d\"250.0\" AnchorPane.rightAnchor\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel layoutX\u003d\"192.0\" layoutY\u003d\"119.0\" styleClass\u003d\"cell_small_label\" text\u003d\"Address\" AnchorPane.leftAnchor\u003d\"192.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cLabel fx:id\u003d\"lblAddress\" layoutX\u003d\"248.0\" layoutY\u003d\"119.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"338.0\" styleClass\u003d\"cell_small_label\" text\u003d\"{address:placeholder}\" AnchorPane.leftAnchor\u003d\"250.0\" AnchorPane.rightAnchor\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        \u003cLabel layoutX\u003d\"192.0\" layoutY\u003d\"149.0\" styleClass\u003d\"cell_small_label, clientInfoPage-tag\" text\u003d\"Tags\" AnchorPane.leftAnchor\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" layoutX\u003d\"20.0\" layoutY\u003d\"179.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"18.0\" prefWidth\u003d\"569.0\" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.rightAnchor\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 29,
      "benclmnt": 2
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cLabel fx:id\u003d\"nextSession\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nextSession\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" onMouseClicked\u003d\"#onMouseClicked_displayClientInfo\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here... or type \u0026quot;help\u0026quot; to open User Guide\" styleClass\u003d\"persistent-prompt\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import org.controlsfx.control.HyperlinkLabel?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003cHyperlinkLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/Homepage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cGridPane AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"65.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"25.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"60.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cAnchorPane GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"NEVER\" GridPane.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cLabel layoutX\u003d\"21.0\" layoutY\u003d\"14.0\" styleClass\u003d\"heading\" text\u003d\"Currently you have: \" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.topAnchor\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cLabel fx:id\u003d\"lblCurrentlyDetails\" layoutX\u003d\"14.0\" layoutY\u003d\"51.0\" styleClass\u003d\"cell_small_label, labelContent\" text\u003d\"placeholder:Details\" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cAnchorPane GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"NEVER\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cLabel fx:id\u003d\"lblContent\" layoutX\u003d\"14.0\" layoutY\u003d\"31.0\" styleClass\u003d\"cell_small_label, labelContent\" text\u003d\"placeholder:Command\" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cListView fx:id\u003d\"todaySchedule\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"20.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cAnchorPane GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"NEVER\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cLabel fx:id\u003d\"lblQotd\" styleClass\u003d\"heading, cell_small_label, qotd\" text\u003d\"QOTD:placeholder\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003cAnchorPane GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" GridPane.rowSpan\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"400.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                                \u003c!-- Image (No attribution) from https://www.pngkey.com/detail/u2t4i1u2u2r5w7q8_2-3-3-4-4-5-5-6/ --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                                \u003cImage url\u003d\"@../images/fitness_mascot.png\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "   \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      \u003cString fx:value\u003d\"homepage\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "      \u003cString fx:value\u003d\"centre-anchor-pane\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "   \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 62
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"FitEgo\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    \u003cImage url\u003d\"@/images/muscle.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cColumnConstraints fx:id\u003d\"gPaneLeft\" hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cColumnConstraints fx:id\u003d\"gPaneCentre\" hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cColumnConstraints fx:id\u003d\"gPaneRight\" hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"15.0\" minWidth\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "              \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"mainDisplay\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"rightDisplay\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "tanweijie123": 32,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/view/RightSideBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"right-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "      \u003cListView fx:id\u003d\"sessionListView\" AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "   \u003cLabel fx:id\u003d\"title\" text\u003d\"ALL\" AnchorPane.leftAnchor\u003d\"78.0\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "maguireong": 5,
      "tanweijie123": 9
    }
  },
  {
    "path": "src/main/resources/view/SessionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cLabel fx:id\u003d\"dayOfWeek\" text\u003d\"\\$dayOfWeek\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cLabel fx:id\u003d\"sessionTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sessionTime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cLabel fx:id\u003d\"gymName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gymName\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"associatedClient\" layoutX\u003d\"20.0\" layoutY\u003d\"179.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"18.0\" prefWidth\u003d\"569.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(fifthClientIndex.equals(fifthClientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(fifthClientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(fifthClientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/muscle.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.ListClientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String deleteCommand \u003d \"cdel 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String listCommand \u003d ListClientCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(listCommand, ListClientCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String addCommand \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void getFilteredSessionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredSessionList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 9,
      "tanweijie123": 2,
      "kelvinvin": 9,
      "benclmnt": 4,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "benclmnt": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.commands.HomeCommand.SHOWING_SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class HomeCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(new HomeCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/AddClientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class AddClientCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(new AddClientCommand(validClient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(AddClientCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandFailure(new AddClientCommand(clientInList), model, AddClientCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 8,
      "tanweijie123": 4,
      "benclmnt": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/AddClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class AddClientCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddClientCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        CommandResult commandResult \u003d new AddClientCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(String.format(AddClientCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddClientCommand addClientCommand \u003d new AddClientCommand(validClient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                AddClientCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addClientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddClientCommand addAliceCommand \u003d new AddClientCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddClientCommand addBobCommand \u003d new AddClientCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddClientCommand addAliceCommandCopy \u003d new AddClientCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteClientAssociatedSchedules(Client client) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteSessionAssociatedSchedules(Session session) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public void deleteSession(Session session) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithSession(Session session) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithSession(Session sessionToEdit, Session editedSession) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClient(Client toEdit) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithClient(Client toEdit, Client editedClient) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClientAndSession(Client client, Session session) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public void sortSession() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cSession\u003e findSessionByClient(Client clientKey) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public List\u003cSchedule\u003e findScheduleBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cClient\u003e findClientBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * A Model stub that contains a single Client."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return this.client.isUnique(client);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * A Model stub that always accept the Client being added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isUnique);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 72,
      "maguireong": 35,
      "tanweijie123": 44,
      "kelvinvin": 16,
      "benclmnt": 10,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/ClientCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ClientCommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_TAG_INJURY \u003d \"injury-thigh\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_TAG_ALLERGY \u003d \"allergy-dairy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String TAG_DESC_ALLERGY \u003d \" \" + PREFIX_TAG + VALID_TAG_ALLERGY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String TAG_DESC_INJURY \u003d \" \" + PREFIX_TAG + VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_INJURY, VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * - the address book, filtered Client list and selected Client in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the Client at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        model.updateFilteredClientList(new NameContainsSubstringPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(1, model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 16,
      "tanweijie123": 2,
      "benclmnt": 16,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/DeleteClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * {@code DeleteClientCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DeleteClientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteClientCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(deleteClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandFailure(deleteClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteClientCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(deleteClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandFailure(deleteClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteFirstCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteSecondCommand \u003d new DeleteClientCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand deleteFirstCommandCopy \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 18,
      "kelvinvin": 15,
      "benclmnt": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/EditClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * EditClientCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class EditClientCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(EditClientCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(editClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d clientInList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(EditClientCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(editClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(INDEX_FIRST_CLIENT, new EditClientDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(EditClientCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(editClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(EditClientCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(editClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(editClientCommand, model, EditClientCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // edit Client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(editClientCommand, model, EditClientCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(editClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand editClientCommand \u003d new EditClientCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(editClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        final EditClientCommand standardCommand \u003d new EditClientCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand commandWithSameValues \u003d new EditClientCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(standardCommand.equals(new EditClientCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(standardCommand.equals(new EditClientCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 28,
      "maguireong": 43,
      "benclmnt": 11,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "maguireong": 7,
      "benclmnt": 9,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/FindClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class FindClientCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand findFirstCommand \u003d new FindClientCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand findSecondCommand \u003d new FindClientCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand findFirstCommandCopy \u003d new FindClientCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_singleSubstring_noClientsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\"abcdefghijklmnopqrstuvwxyz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_singleSubstringIgnoreCase_twoClientsFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\"mEi\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredClientList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_multipleSubstring_multipleClientsFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\"Ali Geo Mei Carl\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, GEORGE), model.getFilteredClientList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_multipleSubstring_noClientsFound() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d preparePredicate(\"abcde fghij klmno pqrst uvwxyz\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d new FindClientCommand(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private NameContainsSubstringPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return new NameContainsSubstringPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 125,
      "benclmnt": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/ListClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ListClientCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(new ListClientCommand(), model, ListClientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(new ListClientCommand(), model, ListClientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 3,
      "kelvinvin": 3,
      "benclmnt": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/client/ViewClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class ViewClientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewClientCommand \u003d new ViewClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(ViewClientCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(clientToView, viewClientCommand.getClient());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewClientCommand \u003d new ViewClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(ViewClientCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        expectedModel.updateFilteredClientList(x -\u003e x.isUnique(clientToView));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(clientToView, viewClientCommand.getClient());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewClientCommand \u003d new ViewClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandFailure(viewClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewClientCommand \u003d new ViewClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandFailure(viewClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewFirstCommand \u003d new ViewClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewSecondCommand \u003d new ViewClientCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand viewFirstCommandCopy \u003d new ViewClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 91,
      "benclmnt": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/AddScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.testutil.ScheduleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class AddScheduleCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Clients and Sessions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addSession(session);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static List\u003cSession\u003e getTypicalSessions() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GETWELL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void constructor_nullClientAndSessionIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddScheduleCommand(null, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_scheduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule validSchedule \u003d new ScheduleBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddScheduleCommand command \u003d new AddScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedModel.addSchedule(validSchedule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_duplicateSchedule_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule validSchedule \u003d new ScheduleBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddScheduleCommand command \u003d new AddScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model.addSchedule(validSchedule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(CommandException.class, AddScheduleCommand.MESSAGE_DUPLICATE_SCHEDULE, ("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            )-\u003e command.execute(model));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddScheduleCommand firstAddCommand \u003d new AddScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddScheduleCommand secondAddCommand \u003d new AddScheduleCommand(INDEX_SECOND_CLIENT, INDEX_SECOND_SESSION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(firstAddCommand.equals(firstAddCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddScheduleCommand thirdAddCommand \u003d new AddScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(firstAddCommand.equals(thirdAddCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(firstAddCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(firstAddCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(firstAddCommand.equals(secondAddCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteClientAssociatedSchedules(Client client) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteSessionAssociatedSchedules(Session session) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteSession(Session session) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithSession(Session session) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithSession(Session sessionToEdit, Session editedSession) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClient(Client toEdit) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithClient(Client toEdit, Client editedClient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClientAndSession(Client client, Session session) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public void sortSession() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cSession\u003e findSessionByClient(Client clientKey) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public List\u003cSchedule\u003e findScheduleBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cClient\u003e findClientBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 292,
      "kelvinvin": 15,
      "benclmnt": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/DeleteScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.DeleteScheduleCommand.MESSAGE_SCHEDULE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.showScheduleAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalClients;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_CLIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalSchedules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getTypicalSessions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class DeleteScheduleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Clients and Sessions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addSession(session);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule schedule : getTypicalSchedules()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addSchedule(schedule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule scheduleToDelete \u003d model.getFilteredScheduleList().get(INDEX_FIRST_SCHEDULE.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteScheduleCommand \u003d new DeleteScheduleCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteScheduleCommand.MESSAGE_SUCCESS, scheduleToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedModel.deleteSchedule(scheduleToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(deleteScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteScheduleCommand \u003d new DeleteScheduleCommand(outOfBoundIndex, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(deleteScheduleCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_invalidSessionIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSessionList().size() + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteScheduleCommand \u003d new DeleteScheduleCommand(INDEX_FIRST_CLIENT, outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(deleteScheduleCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        showScheduleAtIndex(model, INDEX_FIRST_SCHEDULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule scheduleToDelete \u003d model.getFilteredScheduleList().get(INDEX_FIRST_SCHEDULE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteScheduleCommand \u003d new DeleteScheduleCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteScheduleCommand.MESSAGE_SUCCESS, scheduleToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedModel.deleteSchedule(scheduleToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        showNoSchedule(expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(deleteScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_scheduleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteScheduleCommand \u003d new DeleteScheduleCommand(INDEX_FOURTH_CLIENT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Client associatedClient \u003d model.getFilteredClientList().get(INDEX_FOURTH_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Session associatedSession \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(deleteScheduleCommand, model, String.format(MESSAGE_SCHEDULE_NOT_FOUND,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                associatedClient, associatedSession));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteFirstCommand \u003d new DeleteScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteSecondCommand \u003d new DeleteScheduleCommand(INDEX_FIRST_CLIENT, INDEX_SECOND_SESSION);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        DeleteScheduleCommand deleteFirstCommandCopy \u003d new DeleteScheduleCommand(INDEX_FIRST_SCHEDULE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private void showNoSchedule(Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model.updateFilteredScheduleList(p -\u003e false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(model.getFilteredScheduleList().isEmpty());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/EditScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.DESC_SCHA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.DESC_SCHB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalClients;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SCHEDULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SESSION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.BENSON_GETWELL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_PAID;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_UNPAID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.TEST_REMARK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalSchedules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getTypicalSessions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditScheduleDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ScheduleBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * EditClientCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleCommandTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (Schedule schedule : getTypicalSchedules()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            ab.addSchedule(schedule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            ab.addSession(session);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Updating BENSON-GETWELL -\u003e BENSON-MACHOMAN should succeed because no BENSON-MACHOMAN exists in typicalAddressBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Schedule editedSchedule \u003d new ScheduleBuilder(BENSON_GETWELL)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSession(MACHOMAN)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withPaymentStatus(PAYMENT_UNPAID)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedPaymentStatus(PAYMENT_UNPAID)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withUpdatedRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(INDEX_SECOND_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(EditScheduleCommand.MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedModel.setSchedule(model.getFilteredScheduleList().get(1), editedSchedule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandSuccess(editScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(model.getFilteredScheduleList().get(1).getRemark(), TEST_REMARK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(model.getFilteredScheduleList().get(1).getPaymentStatus(), PAYMENT_UNPAID);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule lastSchedule \u003d model.getFilteredScheduleList().get(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        ScheduleBuilder scheduleInList \u003d new ScheduleBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session lastSession \u003d model.getFilteredSessionList().get(2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule editedSchedule \u003d scheduleInList"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClient(lastClient)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSession(lastSession)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index indexFirstClient \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index indexFirstSession \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_THIRD_SESSION)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(indexFirstClient, indexFirstSession,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String expectedMessage \u003d String.format(EditScheduleCommand.MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.setSchedule(lastSchedule, editedSchedule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertCommandSuccess(editScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditScheduleDescriptor editScheduleDescriptor \u003d new EditScheduleDescriptor();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                editScheduleDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule editedSchedule \u003d model.getFilteredScheduleList().get(INDEX_FIRST_SCHEDULE.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(EditScheduleCommand.MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(editScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session lastSession \u003d model.getFilteredSessionList().get(2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule scheduleInFilteredList \u003d model.getFilteredScheduleList().get(INDEX_FIRST_SCHEDULE.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Schedule editedSchedule \u003d new ScheduleBuilder(scheduleInFilteredList)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClient(lastClient)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSession(lastSession)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withPaymentStatus(PAYMENT_PAID)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        .withClientIndex(INDEX_SECOND_CLIENT)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        .withUpdatedSessionIndex(INDEX_THIRD_SESSION)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                        .withUpdatedPaymentStatus(PAYMENT_PAID)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .withUpdatedRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String expectedMessage \u003d String.format(EditScheduleCommand.MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedModel.setSchedule(model.getFilteredScheduleList().get(0), editedSchedule);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertCommandSuccess(editScheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Updating ALICE-GETWELL -\u003e ALICE-MACHOMAN should fail because ALICE-MACHOMAN exists in typicalAddressBook"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_duplicateScheduleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedPaymentStatus(PAYMENT_PAID)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withUpdatedRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(EditScheduleCommand.MESSAGE_DUPLICATE_SCHEDULE, editScheduleCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ScheduleCommandTestUtil.assertCommandFailure(editScheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void execute_invalidUpdatedSessionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredScheduleList().size() + 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION).withUpdatedSessionIndex(outOfBoundIndex).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand editScheduleCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandFailure(editScheduleCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final EditScheduleCommand standardCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                DESC_SCHA);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor copyDescriptor \u003d new EditScheduleDescriptor(DESC_SCHA);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand commandWithSameValues \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_THIRD_SESSION,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                 DESC_SCHA)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                DESC_SCHB)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 33,
      "maguireong": 162,
      "benclmnt": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/EditScheduleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.DESC_SCHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.DESC_SCHB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.VALID_CLIENT_INDEX_SCHB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.EditScheduleTestUtil.VALID_SESSION_INDEX_SCHB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditScheduleDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptorWithSameValues \u003d new EditScheduleDescriptor(DESC_SCHA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(DESC_SCHA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(DESC_SCHA.equals(DESC_SCHA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_SCHA.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_SCHA.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_SCHA.equals(DESC_SCHB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different client index -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor editedAmy \u003d new EditScheduleDescriptorBuilder(DESC_SCHA)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(Index.fromOneBased(Integer.parseInt(VALID_CLIENT_INDEX_SCHB))).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_SCHA.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different session index -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAmy \u003d new EditScheduleDescriptorBuilder(DESC_SCHA)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(Index.fromOneBased(Integer.parseInt(VALID_SESSION_INDEX_SCHB))).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_SCHA.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/EditScheduleTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditScheduleDescriptorBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleTestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_CLIENT_INDEX_SCHA \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_CLIENT_INDEX_SCHB \u003d \"2\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_SESSION_INDEX_SCHA \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_SESSION_INDEX_SCHB \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditScheduleDescriptor DESC_SCHA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditScheduleDescriptor DESC_SCHB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        DESC_SCHA \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(Index.fromOneBased(Integer.parseInt(VALID_CLIENT_INDEX_SCHA)))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(Index.fromOneBased(Integer.parseInt(VALID_SESSION_INDEX_SCHA))).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        DESC_SCHB \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(Index.fromOneBased(Integer.parseInt(VALID_CLIENT_INDEX_SCHB)))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(Index.fromOneBased(Integer.parseInt(VALID_SESSION_INDEX_SCHB))).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedule/ScheduleCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_CLIENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_SESSION_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.schedule.CliSyntax.PREFIX_UPDATED_SESSION_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_PAID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_UNPAID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.TEST_REMARK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.SameSchedulePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditScheduleDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class ScheduleCommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String CLIENT_INDEX_DESC_A \u003d \" \" + PREFIX_CLIENT_INDEX + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String CLIENT_INDEX_DESC_B \u003d \" \" + PREFIX_CLIENT_INDEX + \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String SESSION_INDEX_DESC_A \u003d \" \" + PREFIX_SESSION_INDEX + \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String SESSION_INDEX_DESC_B \u003d \" \" + PREFIX_SESSION_INDEX + \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String UPDATED_SESSION_INDEX_DESC_A \u003d \" \" + PREFIX_UPDATED_SESSION_INDEX + \"1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String UPDATED_SESSION_INDEX_DESC_B \u003d \" \" + PREFIX_UPDATED_SESSION_INDEX + \"2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String UPDATED_PAYMENT_PAID \u003d \" \" + PREFIX_PAYMENT_STATUS + PAYMENT_PAID;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String UPDATED_PAYMENT_UNPAID \u003d \" \" + PREFIX_PAYMENT_STATUS + PAYMENT_UNPAID;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String UPDATED_REMARK_NONEMPTY \u003d \" \" + PREFIX_REMARK + TEST_REMARK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String UPDATED_REMARK_EMPTY \u003d \" \" + PREFIX_REMARK + Remark.EMPTY_REMARK;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditScheduleDescriptor DESC_SCHA \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditScheduleDescriptor DESC_SCHB \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the Schedule at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static void showScheduleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredScheduleList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Schedule schedule \u003d model.getFilteredScheduleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        model.updateFilteredScheduleList(new SameSchedulePredicate(schedule));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(1, model.getFilteredScheduleList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            System.out.println(ce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * - the address book, filtered Session list and selected Session in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        List\u003cSchedule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredScheduleList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredScheduleList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 78,
      "maguireong": 27,
      "benclmnt": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/AddSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class AddSessionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSessionCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_sessionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelStubAcceptingSessionAdded modelStub \u003d new ModelStubAcceptingSessionAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session validSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        CommandResult commandResult \u003d new AddSessionCommand(validSession).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(String.format(AddSessionCommand.MESSAGE_SUCCESS, validSession), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(Arrays.asList(validSession), modelStub.sessionsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_duplicateSession_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session validSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddSessionCommand addSessionCommand \u003d new AddSessionCommand(validSession);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSession(validSession);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                AddSessionCommand.MESSAGE_DUPLICATE_SESSION, () -\u003e addSessionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session getwell \u003d new SessionBuilder().withGym(\"Getwell gym\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session machoman \u003d new SessionBuilder().withGym(\"Machoman gym\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddSessionCommand addGetwellCommand \u003d new AddSessionCommand(getwell);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddSessionCommand addMachomanCommand \u003d new AddSessionCommand(machoman);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(addGetwellCommand.equals(addGetwellCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddSessionCommand addGetwellCommandCopy \u003d new AddSessionCommand(getwell);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(addGetwellCommand.equals(addGetwellCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(addGetwellCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(addGetwellCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(addGetwellCommand.equals(addMachomanCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void deleteClientAssociatedSchedules(Client client) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteSessionAssociatedSchedules(Session session) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteSession(Session session) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithSession(Session session) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithSession(Session sessionToEdit, Session editedSession) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClient(Client toEdit) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public void editSchedulesAssociatedWithClient(Client toEdit, Client editedClient) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public boolean hasAnyScheduleAssociatedWithClientAndSession(Client client, Session session) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void deleteSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public void sortSession() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cSession\u003e findSessionByClient(Client clientKey) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public List\u003cSchedule\u003e findScheduleBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public Schedule findScheduleByClientAndSession(Client clientKey, Session sessionKey) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        public List\u003cClient\u003e findClientBySession(Session sessionKey) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * A Model stub that contains a single Session."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private class ModelStubWithSession extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        private final Session session;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelStubWithSession(Session session) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            this.session \u003d session;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return this.session.isUnique(session);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * A Model stub that always accept the Session being added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private class ModelStubAcceptingSessionAdded extends ModelStub {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        final ArrayList\u003cSession\u003e sessionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return sessionsAdded.stream().anyMatch(session::isUnique);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            sessionsAdded.add(session);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 41,
      "tanweijie123": 2,
      "kelvinvin": 16,
      "benclmnt": 261
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/DeleteSessionCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SESSION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getIntegrationAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Covering integration test between DeleteSessionCommand and Associated Schedules"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Since index has been unit tested in DeleteSessionCommandTest, we will focus on the interaction between the 2 classes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteSessionCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model \u003d new ModelManager(getIntegrationAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_unfilteredListWithoutForce_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d DeleteSessionCommand.MESSAGE_FORCE_DELETE_SESSION_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        SessionCommandTestUtil.assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_unfilteredListWithForce_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Session sessionToDelete \u003d model.getFilteredSessionList().get(INDEX_THIRD_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_THIRD_SESSION, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSessionCommand.MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedModel.deleteSession(sessionToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        SessionCommandTestUtil.assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 3,
      "benclmnt": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/DeleteSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.showSessionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Contains integration tests (interaction with the Model and Schedule) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * {@code DeleteSessionCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteSessionCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session sessionToDelete \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSessionCommand.MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedModel.deleteSession(sessionToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSessionList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandFailure(deleteSessionCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session sessionToDelete \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSessionCommand.MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedModel.deleteSession(sessionToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        showNoSession(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getSessionList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandFailure(deleteSessionCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteFirstCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteSecondCommand \u003d new DeleteSessionCommand(INDEX_SECOND_SESSION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        DeleteSessionCommand deleteFirstCommandCopy \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private void showNoSession(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model.updateFilteredSessionList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(model.getFilteredSessionList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/EditSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DESC_GETWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DESC_MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_ULTRAMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_ULTRAMAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_GETWELL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_ULTRAMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_ULTRAMAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.showSessionAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * EditSessionCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session editedSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder(editedSession).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                editedSession);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        expectedModel.setSession(model.getFilteredSessionList().get(0), editedSession);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Index indexLastSession \u003d Index.fromOneBased(model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session lastSession \u003d model.getFilteredSessionList().get(indexLastSession.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        SessionBuilder sessionInList \u003d new SessionBuilder(lastSession);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session editedSession \u003d sessionInList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withGym(VALID_GYM_ULTRAMAN)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_ULTRAMAN)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withInterval(VALID_START_TIME_ULTRAMAN, VALID_DURATION_ULTRAMAN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withGym(VALID_GYM_ULTRAMAN)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_ULTRAMAN)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                .withInterval(VALID_START_TIME_ULTRAMAN, VALID_DURATION_ULTRAMAN).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(indexLastSession, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        expectedModel.setSession(lastSession, editedSession);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                new EditSessionDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session editedSession \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session sessionInFilteredList \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session editedSession \u003d new SessionBuilder(sessionInFilteredList).withGym(VALID_GYM_GETWELL).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                new EditSessionDescriptorBuilder().withGym(VALID_GYM_GETWELL).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        expectedModel.setSession(model.getFilteredSessionList().get(0), editedSession);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_duplicateSessionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session firstSession \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder(firstSession).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_SECOND_SESSION, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, EditSessionCommand.MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_duplicateSessionFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // edit Session in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Session sessionInList \u003d model.getAddressBook().getSessionList().get(INDEX_SECOND_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                new EditSessionDescriptorBuilder(sessionInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, EditSessionCommand.MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void execute_invalidSessionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSessionList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder().withGym(VALID_GYM_GETWELL).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_invalidSessionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getSessionList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                new EditSessionDescriptorBuilder().withGym(VALID_GYM_GETWELL).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        final EditSessionCommand standardCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION, DESC_GETWELL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor copyDescriptor \u003d new EditSessionDescriptor(DESC_GETWELL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand commandWithSameValues \u003d new EditSessionCommand(INDEX_FIRST_SESSION, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSessionCommand(INDEX_SECOND_SESSION, DESC_GETWELL)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSessionCommand(INDEX_FIRST_SESSION, DESC_MACHOMAN)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 69,
      "kelvinvin": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/EditSessionDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DESC_GETWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DESC_MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptorWithSameValues \u003d new EditSessionDescriptor(DESC_GETWELL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(DESC_GETWELL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(DESC_GETWELL.equals(DESC_GETWELL));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(DESC_MACHOMAN));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different gym -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor editedGetwell \u003d new EditSessionDescriptorBuilder(DESC_GETWELL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withGym(VALID_GYM_MACHOMAN).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different exercise type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedGetwell \u003d new EditSessionDescriptorBuilder(DESC_GETWELL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different interval -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedGetwell \u003d new EditSessionDescriptorBuilder(DESC_GETWELL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        VALID_DURATION_MACHOMAN).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(DESC_GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/SessionCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_EXERCISE_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_GYM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.model.session.Interval.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.IntervalContainsDatetimePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class SessionCommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_GYM_GETWELL \u003d \"Getwell gym\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_GYM_MACHOMAN \u003d \"Machoman gym\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_GYM_ULTRAMAN \u003d \"Ultraman gym\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_EXERCISE_TYPE_GETWELL \u003d \"Endurance\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String VALID_EXERCISE_TYPE_MACHOMAN \u003d \"Bodybuilder\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_EXERCISE_TYPE_ULTRAMAN \u003d \"Pilates\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_START_TIME_GETWELL \u003d \"29/09/2020 1300\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_START_TIME_MACHOMAN \u003d \"29/09/2020 1600\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_START_TIME_MACHOMAN_NOW \u003d LocalDateTime.now().format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_START_TIME_MACHOMAN_TOMORROW \u003d LocalDateTime.now().plusDays(1).format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_START_TIME_MACHOMAN_PLUS2MONTHS \u003d LocalDateTime.now().plusMonths(2).format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_START_TIME_MACHOMAN_MINUS1WEEK \u003d LocalDateTime.now().minusWeeks(1).format("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_START_TIME_ULTRAMAN \u003d \"30/09/2020 1800\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_DURATION_GETWELL \u003d \"120\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String VALID_DURATION_MACHOMAN \u003d \"150\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_DURATION_ULTRAMAN \u003d \"170\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String GYM_DESC_GETWELL \u003d \" \" + PREFIX_GYM + VALID_GYM_GETWELL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String GYM_DESC_MACHOMAN \u003d \" \" + PREFIX_GYM + VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String EXERCISE_TYPE_DESC_GETWELL \u003d \" \" + PREFIX_EXERCISE_TYPE + VALID_EXERCISE_TYPE_GETWELL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String EXERCISE_TYPE_DESC_MACHOMAN \u003d \" \" + PREFIX_EXERCISE_TYPE + VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String START_TIME_DESC_GETWELL \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_GETWELL;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String START_TIME_DESC_MACHOMAN \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String DURATION_DESC_GETWELL \u003d \" \" + PREFIX_DURATION + VALID_DURATION_GETWELL;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String DURATION_DESC_MACHOMAN \u003d \" \" + PREFIX_DURATION + VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String INVALID_GYM_DESC \u003d \" \" + PREFIX_GYM; // empty string not allowed for gyms"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String INVALID_EXERCISE_TYPE_DESC \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            \" \" + PREFIX_EXERCISE_TYPE; // empty string not allowed for gyms"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            \" \" + PREFIX_START_TIME + \"29/09/2020\"; // unsupported date time format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final String INVALID_DURATION_DESC \u003d \" \" + PREFIX_DURATION + \"-123\"; // a not allowed in duration"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditSessionDescriptor DESC_GETWELL \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withGym(VALID_GYM_GETWELL)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_GETWELL)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_GETWELL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    VALID_DURATION_GETWELL)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final EditSessionDescriptor DESC_MACHOMAN \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * - the address book, filtered Session list and selected Session in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cSession\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredSessionList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredSessionList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the Session at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static void showSessionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session session \u003d model.getFilteredSessionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        final LocalDateTime start \u003d session.getStartTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        model.updateFilteredSessionList(new IntervalContainsDatetimePredicate(start));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(1, model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 27,
      "tanweijie123": 5,
      "kelvinvin": 15,
      "benclmnt": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/session/ViewSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_ALL_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_FUTURE_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_PAST_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_WEEK_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN_MINUS1WEEK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN_NOW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN_PLUS2MONTHS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN_TOMORROW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.ULTRAMAN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.getDynamicTimeAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ViewSessionCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Model model \u003d new ModelManager(getDynamicTimeAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    //TODO: Once the default Session List view has been changed to Week, update test case to verify."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_defaultSessionListIsAll_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(VALID_ALL_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getDynamicTimeAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_viewPastSessions_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(VALID_PAST_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(ULTRAMAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(GETWELL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_MINUS1WEEK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_viewFutureSessions_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(VALID_FUTURE_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_TOMORROW);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_PLUS2MONTHS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_viewUpcomingWeekSessions_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(VALID_WEEK_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_TOMORROW);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void execute_viewAllSessions_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(VALID_ALL_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_TOMORROW);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_PLUS2MONTHS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_MINUS1WEEK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(ULTRAMAN);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(GETWELL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewPlus0DaySessions_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"+0D\"); //today"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewMinus0DaySessions_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"-0D\"); //today"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewPlus1DaySessions_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"+1D\"); //today \u0026 tomorrow"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_TOMORROW);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewMinus1WeekSessions_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"-1w\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_MINUS1WEEK);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewPlus2MonthsSessions_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"+2M\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SHOW_SESSIONS_SUCCESS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookBuilder addressBookStub \u003d new AddressBookBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_NOW);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_TOMORROW);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        addressBookStub.withSession(MACHOMAN_PLUS2MONTHS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBookStub.build(), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertCommandSuccess(viewSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void execute_viewInvalidUnit_thrownAssertionError() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            ViewSessionCommand viewSessionCommand \u003d new ViewSessionCommand(\"+2s\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            viewSessionCommand.execute(model);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            Assertions.assertEquals(new AssertionError().getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewWeekCommand \u003d new ViewSessionCommand(VALID_WEEK_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewAllCommand \u003d new ViewSessionCommand(VALID_ALL_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(viewWeekCommand.equals(viewWeekCommand));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ViewSessionCommand viewWeekCommandCopy \u003d new ViewSessionCommand(VALID_WEEK_SESSIONS_PERIOD);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(viewWeekCommand.equals(viewWeekCommandCopy));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertFalse(viewWeekCommand.equals(1));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertFalse(viewWeekCommand.equals(null));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertFalse(viewWeekCommand.equals(viewAllCommand));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 75,
      "kelvinvin": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_ALL_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.DeleteClientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.FindClientCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.ListClientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.ViewClientCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.session.ViewSessionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(new AddClientCommand(client), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        DeleteClientCommand command \u003d (DeleteClientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                DeleteClientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertEquals(new DeleteClientCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        ViewClientCommand command \u003d (ViewClientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                ViewClientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(new ViewClientCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand command \u003d (EditClientCommand) parser.parseCommand(EditClientCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(new EditClientCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand command \u003d (FindClientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                FindClientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertEquals(new FindClientCommand(new NameContainsSubstringPredicate(keywords)), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(parser.parseCommand(ListClientCommand.COMMAND_WORD) instanceof ListClientCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(parser.parseCommand(ListClientCommand.COMMAND_WORD + \" 3\") instanceof ListClientCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parseCommand_viewSession() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(parser.parseCommand(ViewSessionCommand.COMMAND_WORD + \" \" + PREFIX_PERIOD"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                + VALID_ALL_SESSIONS_PERIOD) instanceof ViewSessionCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parseCommand_home() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(parser.parseCommand(HomeCommand.COMMAND_WORD) instanceof HomeCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 4,
      "maguireong": 9,
      "tanweijie123": 18,
      "kelvinvin": 16,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#injured-thigh\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"injured-thigh\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"allery-dairy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 7,
      "benclmnt": 3,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/client/AddClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.TAG_DESC_ALLERGY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.TAG_DESC_INJURY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_ALLERGY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class AddClientCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private AddClientCommandParser parser \u003d new AddClientCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_ALLERGY, new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_ALLERGY, new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_ALLERGY, new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_ALLERGY, new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_ALLERGY, new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_ALLERGY, VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_INJURY + TAG_DESC_ALLERGY, new AddClientCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new AddClientCommand(expectedClient));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_INJURY + TAG_DESC_ALLERGY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_INJURY + TAG_DESC_ALLERGY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_INJURY + TAG_DESC_ALLERGY, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_INJURY + TAG_DESC_ALLERGY, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_ALLERGY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_INJURY + TAG_DESC_ALLERGY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 9,
      "tanweijie123": 6,
      "kelvinvin": 1,
      "benclmnt": 37,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/client/DeleteClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.client.DeleteClientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DeleteClientCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private DeleteClientCommandParser parser \u003d new DeleteClientCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteClientCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                DeleteClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "kelvinvin": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/client/EditClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.TAG_DESC_ALLERGY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.TAG_DESC_INJURY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_ALLERGY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class EditClientCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditClientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private EditClientCommandParser parser \u003d new EditClientCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \"1\", EditClientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Client} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ALLERGY + TAG_DESC_INJURY + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ALLERGY + TAG_EMPTY + TAG_DESC_INJURY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_ALLERGY + TAG_DESC_INJURY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_INJURY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_ALLERGY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_INJURY, VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ALLERGY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + TAG_DESC_ALLERGY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_ALLERGY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_INJURY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_ALLERGY, VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditClientCommand expectedCommand \u003d new EditClientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 17,
      "maguireong": 25,
      "kelvinvin": 1,
      "benclmnt": 35,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/client/FindClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.FindClientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class FindClientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private FindClientCommandParser parser \u003d new FindClientCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                FindClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        FindClientCommand expectedFindClientCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new FindClientCommand(new NameContainsSubstringPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindClientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindClientCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 10,
      "kelvinvin": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/client/ViewClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.ViewClientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class ViewClientCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private ViewClientCommandParser parser \u003d new ViewClientCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewClientCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_invalidArgsChar_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                ViewClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_invalidArgsNum_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                ViewClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 31,
      "kelvinvin": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/schedule/AddScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.AddScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class AddScheduleCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private AddScheduleCommandParser parser \u003d new AddScheduleCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_validArgs_returnsAddScheduleCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseSuccess(parser, \" c/1 s/1\", new AddScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_missingClientIndex_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" 1 s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_missingSessionIndex_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/schedule/DeleteScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.schedule.DeleteScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class DeleteScheduleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private DeleteScheduleCommandParser parser \u003d new DeleteScheduleCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_validArgsClientIndexFirst_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseSuccess(parser, \" c/1 s/1\", new DeleteScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_validArgsSessionIndexFirst_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseSuccess(parser, \" s/1 c/1\", new DeleteScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_havePreamble_returnsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \"10 c/1 s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                DeleteScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_invalidClientIndex_throwsInvalidIndexException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/word s/0\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_invalidSessionIndex_throwsInvalidIndexException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/0 s/word\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_compulsoryFieldPrefixMissing_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // missing client index prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" 2 s/1\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // missing session index prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/1 2\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" 1 2\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/schedule/EditScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.CLIENT_INDEX_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.SESSION_INDEX_DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.UPDATED_PAYMENT_PAID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.UPDATED_PAYMENT_UNPAID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.UPDATED_REMARK_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.UPDATED_REMARK_NONEMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.schedule.ScheduleCommandTestUtil.UPDATED_SESSION_INDEX_DESC_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_PAID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.PAYMENT_UNPAID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.TEST_REMARK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditScheduleDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final EditScheduleCommandParser parser \u003d new EditScheduleCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no session index and update session index specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \" c/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no client index and update session index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \" s/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // no updated field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseFailure(parser, \" c/1 s/1\", EditScheduleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \" c/-5 s/-1 us/-3 pd/false r/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \" c/0 s/1 us/1 pd/true r/ test\" , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \" 1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \" c/1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + UPDATED_SESSION_INDEX_DESC_B + UPDATED_PAYMENT_UNPAID + UPDATED_REMARK_NONEMPTY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedPaymentStatus(PAYMENT_UNPAID)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withUpdatedRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + UPDATED_SESSION_INDEX_DESC_B;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // updated paymentStatus"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A + UPDATED_PAYMENT_PAID;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedPaymentStatus(PAYMENT_PAID)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        EditScheduleCommand expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // updated remark"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A + UPDATED_REMARK_NONEMPTY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withUpdatedRemark(TEST_REMARK)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // is paid and then updated session index"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A + UPDATED_PAYMENT_UNPAID"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                + UPDATED_SESSION_INDEX_DESC_B;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                .withUpdatedPaymentStatus(PAYMENT_UNPAID)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // update remark twice, takes last"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A + UPDATED_REMARK_NONEMPTY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + UPDATED_REMARK_EMPTY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withUpdatedRemark(Remark.EMPTY_REMARK)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_DESC_A + SESSION_INDEX_DESC_A + UPDATED_SESSION_INDEX_DESC_B;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleDescriptor descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withClientIndex(INDEX_FIRST_CLIENT)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withSessionIndex(INDEX_FIRST_SESSION)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withUpdatedSessionIndex(INDEX_SECOND_SESSION)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditScheduleCommand expectedCommand \u003d new EditScheduleCommand(INDEX_FIRST_CLIENT, INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //        // other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //        userInput \u003d targetIndex.getOneBased() + GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                + DURATION_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //        descriptor \u003d new EditScheduleDescriptorBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                        VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //                .build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //        expectedCommand \u003d new EditScheduleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 30,
      "maguireong": 117,
      "benclmnt": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/session/AddSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DURATION_DESC_GETWELL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DURATION_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.EXERCISE_TYPE_DESC_GETWELL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.EXERCISE_TYPE_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.GYM_DESC_GETWELL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.GYM_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_DURATION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_EXERCISE_TYPE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_GYM_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.START_TIME_DESC_GETWELL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.START_TIME_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.AddSessionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class AddSessionCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private AddSessionCommandParser parser \u003d new AddSessionCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session expectedSession \u003d new SessionBuilder(MACHOMAN).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GYM_DESC_MACHOMAN"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + EXERCISE_TYPE_DESC_MACHOMAN + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + DURATION_DESC_MACHOMAN, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // multiple gyms - last gym accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, GYM_DESC_GETWELL + GYM_DESC_MACHOMAN"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + EXERCISE_TYPE_DESC_MACHOMAN + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + DURATION_DESC_MACHOMAN, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // multiple exercise types - last exercise type accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_GETWELL"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + EXERCISE_TYPE_DESC_MACHOMAN + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + DURATION_DESC_MACHOMAN, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // multiple start times - last start time accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + START_TIME_DESC_GETWELL + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + DURATION_DESC_MACHOMAN, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // multiple durations - last duration accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + START_TIME_DESC_MACHOMAN + DURATION_DESC_GETWELL"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + DURATION_DESC_MACHOMAN, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, VALID_GYM_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // missing exercise type prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + VALID_EXERCISE_TYPE_MACHOMAN"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // missing start time prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + VALID_START_TIME_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // missing duration prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + VALID_DURATION_MACHOMAN,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, VALID_GYM_MACHOMAN + VALID_EXERCISE_TYPE_MACHOMAN"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + VALID_START_TIME_MACHOMAN + VALID_DURATION_MACHOMAN,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid gym"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, INVALID_GYM_DESC + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid exercise type"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + INVALID_EXERCISE_TYPE_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                ExerciseType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + INVALID_START_TIME_DESC + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + INVALID_DURATION_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, INVALID_GYM_DESC + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + START_TIME_DESC_MACHOMAN + INVALID_DURATION_DESC,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GYM_DESC_MACHOMAN"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        + EXERCISE_TYPE_DESC_MACHOMAN + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/session/DeleteSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.commands.session.DeleteSessionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * The path variation for those two cases occur inside the SessionParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * therefore should be covered by the SessionParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteSessionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private DeleteSessionCommandParser parser \u003d new DeleteSessionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteSessionCommand(INDEX_FIRST_SESSION));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                DeleteSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/session/EditSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.EditSessionCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DURATION_DESC_GETWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.DURATION_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.EXERCISE_TYPE_DESC_GETWELL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.EXERCISE_TYPE_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.GYM_DESC_GETWELL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.GYM_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_DURATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_EXERCISE_TYPE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_GYM_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.START_TIME_DESC_GETWELL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.START_TIME_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_GETWELL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_GETWELL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_GETWELL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_GETWELL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SESSION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private final EditSessionCommandParser parser \u003d new EditSessionCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, VALID_GYM_GETWELL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_GYM_GETWELL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_GYM_GETWELL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid gym"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GYM_DESC, Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid exercise type"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                \"1\" + INVALID_EXERCISE_TYPE_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                ExerciseType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // invalid interval"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_START_TIME_DESC + INVALID_DURATION_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                Interval.MESSAGE_DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        + INVALID_GYM_DESC + INVALID_EXERCISE_TYPE_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        + VALID_START_TIME_MACHOMAN + VALID_DURATION_GETWELL ,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        Gym.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GYM_DESC_GETWELL + EXERCISE_TYPE_DESC_GETWELL"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + START_TIME_DESC_GETWELL + DURATION_DESC_GETWELL;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withGym(VALID_GYM_GETWELL)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_GETWELL)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withInterval(VALID_START_TIME_GETWELL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        VALID_DURATION_GETWELL)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GYM_DESC_GETWELL + EXERCISE_TYPE_DESC_GETWELL;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withGym(VALID_GYM_GETWELL)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_GETWELL).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // gym"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SESSION;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GYM_DESC_GETWELL;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder().withGym(VALID_GYM_GETWELL).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // exercise type"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXERCISE_TYPE_DESC_GETWELL;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditSessionDescriptorBuilder().withExerciseType(VALID_EXERCISE_TYPE_GETWELL).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // interval"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_TIME_DESC_GETWELL + DURATION_DESC_GETWELL;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withInterval(VALID_START_TIME_GETWELL,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        VALID_DURATION_GETWELL).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GYM_DESC_GETWELL + EXERCISE_TYPE_DESC_GETWELL"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + START_TIME_DESC_GETWELL + DURATION_DESC_GETWELL + GYM_DESC_MACHOMAN"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + EXERCISE_TYPE_DESC_MACHOMAN + START_TIME_DESC_MACHOMAN + DURATION_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_GYM_DESC + GYM_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder().withGym(VALID_GYM_MACHOMAN).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GYM_DESC_MACHOMAN + EXERCISE_TYPE_DESC_MACHOMAN"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + START_TIME_DESC_MACHOMAN"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                + DURATION_DESC_MACHOMAN;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                        VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/session/ViewSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package seedu.address.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_ALL_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_FUTURE_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.ViewSessionCommand.VALID_WEEK_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.parser.session.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import seedu.address.logic.commands.session.ViewSessionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * The path variation for those two cases occur inside the SessionParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * therefore should be covered by the SessionParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ViewSessionCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_ALL_SESSION_PREFIX \u003d \" \" + PREFIX_PERIOD + VALID_ALL_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_WEEK_SESSION_PREFIX \u003d \" \" + PREFIX_PERIOD + VALID_WEEK_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String VALID_FUTURE_SESSION_PREFIX \u003d \" \" + PREFIX_PERIOD + VALID_FUTURE_SESSIONS_PERIOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String INVALID_SESSION_PREFIX \u003d \" \" + PREFIX_PERIOD + \"TOMORROW\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String INVALID_EMPTY_SESSION_PREFIX \u003d \" \" + PREFIX_PERIOD + \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final String EMPTY_PREAMBLE \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    //Variable SVIEW ARGS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VAR_PREFIX_PERIOD \u003d \" \" + PREFIX_PERIOD + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_PLUS_DAY_CAP_PERIOD \u003d \"+5D\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_MINUS_DAY_SMALL_PERIOD \u003d \"-2d\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_PLUS_MONTH_CAP_PERIOD \u003d \"+1M\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_MINUS_WEEK_CAP_PERIOD \u003d \"-10W\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String VALID_PLUS_YEAR_CAP_PERIOD \u003d \"+0Y\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String INVALID_NO_SYMBOL_PERIOD \u003d \"10m\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String INVALID_NO_AMOUNT_PERIOD \u003d \"-w\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String INVALID_NO_UNIT_PERIOD \u003d \"+5\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final String INVALID_WRONG_UNIT_PERIOD \u003d \"+9s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private ViewSessionCommandParser parser \u003d new ViewSessionCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_allSessionArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseSuccess(parser, VALID_ALL_SESSION_PREFIX, new ViewSessionCommand(VALID_ALL_SESSIONS_PERIOD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_weekSessionArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseSuccess(parser, VALID_WEEK_SESSION_PREFIX, new ViewSessionCommand(VALID_WEEK_SESSIONS_PERIOD));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_futureSessionArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseSuccess(parser, VALID_FUTURE_SESSION_PREFIX, new ViewSessionCommand(VALID_FUTURE_SESSIONS_PERIOD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variablePlusDayCapsArgs_returnViewCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, VAR_PREFIX_PERIOD + VALID_PLUS_DAY_CAP_PERIOD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new ViewSessionCommand(VALID_PLUS_DAY_CAP_PERIOD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableMinusDaySmallsArgs_returnViewCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, VAR_PREFIX_PERIOD + VALID_MINUS_DAY_SMALL_PERIOD,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new ViewSessionCommand(VALID_MINUS_DAY_SMALL_PERIOD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variablePlusMonthArgs_returnViewCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, VAR_PREFIX_PERIOD + VALID_PLUS_MONTH_CAP_PERIOD,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new ViewSessionCommand(VALID_PLUS_MONTH_CAP_PERIOD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableMinusWeekArgs_returnViewCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, VAR_PREFIX_PERIOD + VALID_MINUS_WEEK_CAP_PERIOD,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new ViewSessionCommand(VALID_MINUS_WEEK_CAP_PERIOD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variablePlusZeroYearArgs_returnViewCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseSuccess(parser, VAR_PREFIX_PERIOD + VALID_PLUS_YEAR_CAP_PERIOD,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new ViewSessionCommand(VALID_PLUS_YEAR_CAP_PERIOD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableNoSymbolArgs_throwParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, VAR_PREFIX_PERIOD + INVALID_NO_SYMBOL_PERIOD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableNoAmountArgs_throwParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, VAR_PREFIX_PERIOD + INVALID_NO_AMOUNT_PERIOD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableNoUnitArgs_throwParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, VAR_PREFIX_PERIOD + INVALID_NO_UNIT_PERIOD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void parse_variableInvalidUnitArgs_throwParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertParseFailure(parser, VAR_PREFIX_PERIOD + INVALID_WRONG_UNIT_PERIOD,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_invalidSessionArgs_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseFailure(parser, INVALID_SESSION_PREFIX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_emptySessionArgs_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseFailure(parser, INVALID_EMPTY_SESSION_PREFIX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertParseFailure(parser, EMPTY_PREAMBLE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ViewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 66,
      "kelvinvin": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getClientList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // Two Clients with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newClients);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(addressBook.hasClient(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * A stub ReadOnlyAddressBook whose Clients list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        private final ObservableList\u003cSession\u003e sessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        private final ObservableList\u003cSchedule\u003e schedules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        AddressBookStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        AddressBookStub(Collection\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            this.sessions.setAll(sessions);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        public ObservableList\u003cSchedule\u003e getScheduleList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 4,
      "maguireong": 27,
      "tanweijie123": 12,
      "benclmnt": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SESSIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.ALICE_GETWELL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.BENSON_GETWELL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.client.NameContainsSubstringPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.IntervalContainsDatetimePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Client Related Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        modelManager.addClient(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Session Related Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSession_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSession(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSession_sessionNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(modelManager.hasSession(GETWELL));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSession_sessionInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.addSession(GETWELL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(modelManager.hasSession(GETWELL));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasAnySessionAssociatedSchedules_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAnyScheduleAssociatedWithSession(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasAnySessionAssociatedSchedules_sessionNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.addSchedule(ALICE_GETWELL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertFalse(modelManager.hasAnyScheduleAssociatedWithSession(MACHOMAN));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasAnySessionAssociatedSchedules_sessionInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.addSchedule(ALICE_GETWELL);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertTrue(modelManager.hasAnyScheduleAssociatedWithSession(GETWELL));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void getFilteredSessionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredSessionList().remove(0));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Schedule Related Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSchedule_nullSchedule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSchedule(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSchedule_scheduleNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(modelManager.hasSchedule(ALICE_GETWELL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void hasSchedule_scheduleInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.addSchedule(ALICE_GETWELL);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(modelManager.hasSchedule(ALICE_GETWELL));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void getFilteredScheduleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredScheduleList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withClient(ALICE)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withClient(BENSON)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSession(GETWELL)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSession(MACHOMAN)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSchedule(ALICE_GETWELL)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withSchedule(BENSON_GETWELL)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different filteredClientList -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsSubstringPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different filteredSessionList -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        LocalDateTime start \u003d GETWELL.getStartTime();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.updateFilteredSessionList(new IntervalContainsDatetimePredicate(start));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        modelManager.updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 13,
      "tanweijie123": 2,
      "kelvinvin": 3,
      "benclmnt": 70,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(ALICE.isUnique(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(ALICE.isUnique(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(ALICE.isUnique(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertFalse(ALICE.isUnique(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(ALICE.isUnique(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(ALICE.isUnique(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertTrue(ALICE.isUnique(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_INJURY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 18,
      "tanweijie123": 7,
      "benclmnt": 9,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsSubstringPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "public class NameContainsSubstringPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                new NameContainsSubstringPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        predicate \u003d new NameContainsSubstringPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        predicate \u003d new NameContainsSubstringPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        predicate \u003d new NameContainsSubstringPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        NameContainsSubstringPredicate predicate \u003d new NameContainsSubstringPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        predicate \u003d new NameContainsSubstringPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        predicate \u003d new NameContainsSubstringPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 10,
      "tanweijie123": 15,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.model.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    private final UniqueList\u003cClient\u003e uniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.set(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.set(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_targetClientNotInList_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueClientList.set(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        uniqueClientList.set(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        uniqueClientList.set(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        uniqueClientList.set(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void set_editedClientHasNonUniqueIdentity_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueClientList.set(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void remove_clientDoesNotExist_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void sets_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setAll((UniqueList\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void sets_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        uniqueClientList.setAll(expectedUniqueClientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void sets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setAll((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void sets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        uniqueClientList.setAll(clientList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        UniqueList\u003cClient\u003e expectedUniqueClientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public void sets_listWithDuplicateClients_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueClientList.setAll(listWithDuplicateClients));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 44,
      "tanweijie123": 38,
      "benclmnt": 4,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/PaymentStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class PaymentStatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaymentStatus(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void isPaid() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        PaymentStatus paidPayment \u003d new PaymentStatus(\"paid\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        PaymentStatus unpaidPayment \u003d new PaymentStatus(\"unpaid\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(paidPayment.isPaid());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(!unpaidPayment.isPaid());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void isValidPaymentStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // null Payment Status"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PaymentStatus.isValidPaymentStatus(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // valid Remarks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(PaymentStatus.isValidPaymentStatus(\"paid\")); // paid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertTrue(PaymentStatus.isValidPaymentStatus(\"unpaid\")); // unpaid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null Remark"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // valid Remarks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Remark.isValidRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"MyRemark\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"-\")); // one character"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"My Super Duper Dupe Remark\")); // multispace Remark"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/ExerciseTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ExerciseTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_invalidExerciseType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String invalidExerciseType \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseType(invalidExerciseType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void isValidExerciseType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null ExerciseType"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseType.isValidExerciseType(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid ExerciseTypes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(ExerciseType.isValidExerciseType(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(ExerciseType.isValidExerciseType(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // valid ExerciseTypes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(ExerciseType.isValidExerciseType(\"MyExerciseType\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(ExerciseType.isValidExerciseType(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(ExerciseType.isValidExerciseType(\"My Super Duper Dupe ExerciseType\")); // multispace ExerciseType"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/GymTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class GymTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Gym(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_invalidGym_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String invalidGym \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Gym(invalidGym));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void isValidGym() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null Gym"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Gym.isValidGym(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid Gyms"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(Gym.isValidGym(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(Gym.isValidGym(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // valid Gyms"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Gym.isValidGym(\"MyGym\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Gym.isValidGym(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Gym.isValidGym(\"My Super Duper Dupe Gym\")); // multispace gym"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/IntervalContainsDatetimePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class IntervalContainsDatetimePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private LocalDateTime firstDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private LocalDateTime secondDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            firstDateTime \u003d SessionParserUtil.parseStringToDateTime(\"20/09/2020 1300\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            secondDateTime \u003d firstDateTime.plusMinutes(60);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new AssertionError(\"This should not be reached!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        IntervalContainsDatetimePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new IntervalContainsDatetimePredicate(firstDateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        IntervalContainsDatetimePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new IntervalContainsDatetimePredicate(secondDateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        IntervalContainsDatetimePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new IntervalContainsDatetimePredicate(firstDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different Client -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Contains interval (start)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        IntervalContainsDatetimePredicate predicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new IntervalContainsDatetimePredicate(firstDateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new SessionBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .withInterval(SessionParserUtil.parseDateTimeToString(firstDateTime), \"60\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Contains interval (end)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        predicate \u003d new IntervalContainsDatetimePredicate(secondDateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new SessionBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .withInterval(SessionParserUtil.parseDateTimeToString(firstDateTime), \"60\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        IntervalContainsDatetimePredicate predicate \u003d new IntervalContainsDatetimePredicate(secondDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new SessionBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .withInterval(SessionParserUtil.parseDateTimeToString(firstDateTime), \"60\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/IntervalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class IntervalTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_nullStartTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Interval(null, 1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_invalidDuration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        LocalDateTime validStartTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Interval(validStartTime, -1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void isValidInterval() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // invalid Intervals"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(Interval.isValidInterval(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(Interval.isValidInterval(-1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // valid Intervals"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(Interval.isValidInterval(20));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void isUniqueSession() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(GETWELL.isUnique(GETWELL));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.isUnique(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different exerciseType -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session editedGetwell \u003d new SessionBuilder(GETWELL).withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(GETWELL.isUnique(editedGetwell));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different gym -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedGetwell \u003d new SessionBuilder(GETWELL).withGym(VALID_GYM_MACHOMAN).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(GETWELL.isUnique(editedGetwell));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // non-overlapping interval -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedGetwell \u003d new SessionBuilder(GETWELL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withInterval(VALID_START_TIME_MACHOMAN, VALID_DURATION_MACHOMAN).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.isUnique(editedGetwell));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session aliceCopy \u003d new SessionBuilder(GETWELL).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(GETWELL.equals(aliceCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(GETWELL.equals(GETWELL));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different Session -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(MACHOMAN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different gym -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session editedGetwell \u003d new SessionBuilder(GETWELL).withGym(VALID_GYM_MACHOMAN).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different exerciseType -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedGetwell \u003d new SessionBuilder(GETWELL).withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // different interval -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        editedGetwell \u003d new SessionBuilder(GETWELL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withInterval(VALID_START_TIME_MACHOMAN, VALID_DURATION_MACHOMAN).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(GETWELL.equals(editedGetwell));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/UniqueSessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_GETWELL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_GETWELL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class UniqueSessionListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final UniqueList\u003cSession\u003e uniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void contains_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void contains_sessionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertFalse(uniqueSessionList.contains(GETWELL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void contains_sessionInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(uniqueSessionList.contains(GETWELL));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void contains_sessionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session editedGetwell \u003d new SessionBuilder(GETWELL)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withInterval(VALID_START_TIME_GETWELL, VALID_DURATION_GETWELL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertTrue(uniqueSessionList.contains(editedGetwell));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void add_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void add_duplicateSession_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueSessionList.add(GETWELL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_nullTargetSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.set(null, GETWELL));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_nullEditedSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.set(GETWELL, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_targetSessionNotInList_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueSessionList.set(GETWELL, GETWELL));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_editedSessionIsSameSession_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.set(GETWELL, GETWELL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedUniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_editedSessionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Session editedGetwell \u003d new SessionBuilder(GETWELL)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withInterval(VALID_START_TIME_GETWELL, VALID_DURATION_GETWELL)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.set(GETWELL, editedGetwell);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedUniqueSessionList.add(editedGetwell);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_editedSessionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.set(GETWELL, MACHOMAN);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedUniqueSessionList.add(MACHOMAN);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void set_editedSessionHasNonUniqueIdentity_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(MACHOMAN);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueSessionList.set(GETWELL, MACHOMAN));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void remove_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.remove(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void remove_sessionDoesNotExist_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueSessionList.remove(GETWELL));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void remove_existingSession_removesSession() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.remove(GETWELL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void sets_nullUniqueSessionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.setAll((UniqueList\u003cSession\u003e) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void sets_uniqueSessionList_replacesOwnListWithProvidedUniqueSessionList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedUniqueSessionList.add(MACHOMAN);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.setAll(expectedUniqueSessionList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void sets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSessionList.setAll((List\u003cSession\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void sets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.add(GETWELL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cSession\u003e sessionList \u003d Collections.singletonList(MACHOMAN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        uniqueSessionList.setAll(sessionList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        UniqueList\u003cSession\u003e expectedUniqueSessionList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        expectedUniqueSessionList.add(MACHOMAN);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(expectedUniqueSessionList, uniqueSessionList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void sets_listWithDuplicateSessions_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cSession\u003e listWithDuplicateSessions \u003d Arrays.asList(GETWELL, GETWELL);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueSessionList.setAll(listWithDuplicateSessions));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueSessionList"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benclmnt": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException(String invalidTagName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void constructor_validTagName(String validTagName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(validTagName, new Tag(validTagName).tagName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_singleHyphen_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"-\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_multipleHyphen_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"---\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_startsWithHyphen_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"-mytag\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_startsWithHyphenMultiple_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"-my-tag\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_endsWithHyphen_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"my-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_endsWithHyphenMultiple_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"my-tag-\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void invalidTagName_startsAndEndsWithHyphen_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_invalidTagName_throwsIllegalArgumentException(\"-my-tag-\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void validTagName_singleHyphen() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_validTagName(\"my-tag\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void validTagName_multipleHyphen() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_validTagName(\"my-tag-has-more-than-one-tags\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void validTagName_consecutiveHyphens() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        constructor_validTagName(\"my-tag-has------consecutive-----tags\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 57,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#allergy-dairy\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, client::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 33,
      "benclmnt": 1,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSchedule.END_TIME_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSchedule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSchedule.START_TIME_FIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.ALICE_GETWELL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class JsonAdaptedScheduleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"123\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String INVALID_PAYMENT_STATUS \u003d \"trueee\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String VALID_EMAIL \u003d ALICE_GETWELL.getClient().getEmail().value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String VALID_START_TIME \u003d SessionParserUtil"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .parseDateTimeToString(ALICE_GETWELL.getSession().getStartTime());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String VALID_END_TIME \u003d SessionParserUtil"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .parseDateTimeToString(ALICE_GETWELL.getSession().getEndTime());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String VALID_PAYMENT_STATUS \u003d ALICE_GETWELL.getPaymentStatus().value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private static final String VALID_REMARK \u003d ALICE_GETWELL.getRemark().value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_validScheduleDetails_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(ALICE_GETWELL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(ALICE_GETWELL.getClient().getEmail(), schedule.getClientEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(ALICE_GETWELL.getSession().getInterval(), schedule.getSessionInterval());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertEquals(ALICE_GETWELL.getPaymentStatus(), schedule.getPaymentStatus());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_invalidClientEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(INVALID_EMAIL, VALID_START_TIME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getClientEmail);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(null, VALID_START_TIME,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getClientEmail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_invalidPaymentStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d PaymentStatus.MESSAGE_INVALID_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, VALID_START_TIME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, INVALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getPaymentStatus);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_nullPaymentStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PaymentStatus.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, VALID_START_TIME,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, null, VALID_REMARK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getPaymentStatus);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_invalidInterval_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d Interval.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, INVALID_START_TIME,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getSessionInterval);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedMessage \u003d Interval.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, VALID_START_TIME,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                INVALID_END_TIME, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getSessionInterval);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public void toModelType_nullInterval_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // null start time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, START_TIME_FIELD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                VALID_END_TIME, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getSessionInterval);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        // null end time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, END_TIME_FIELD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        schedule \u003d new JsonAdaptedSchedule(VALID_EMAIL, VALID_START_TIME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "                null, VALID_PAYMENT_STATUS, VALID_REMARK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, schedule::getSessionInterval);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSession.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.logic.parser.session.SessionParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class JsonAdaptedSessionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_GYM \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_EXERCISE_TYPE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"example.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_GYM \u003d MACHOMAN.getGym().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_EXERCISE_TYPE \u003d MACHOMAN.getExerciseType().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_START_TIME \u003d SessionParserUtil.parseDateTimeToString(MACHOMAN.getStartTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static final String VALID_END_TIME \u003d SessionParserUtil.parseDateTimeToString(MACHOMAN.getEndTime());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_validSessionDetails_returnsSession() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(MACHOMAN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(MACHOMAN, session.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_invalidGym_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new JsonAdaptedSession(INVALID_GYM, VALID_EXERCISE_TYPE, VALID_START_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d Gym.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_nullGym_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                VALID_EXERCISE_TYPE, VALID_START_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gym.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_invalidExerciseType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new JsonAdaptedSession(VALID_GYM, INVALID_EXERCISE_TYPE, VALID_START_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d ExerciseType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_nullExerciseType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_GYM, null, VALID_START_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseType.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new JsonAdaptedSession(VALID_GYM, VALID_EXERCISE_TYPE, INVALID_START_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d Interval.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new JsonAdaptedSession(VALID_GYM, VALID_EXERCISE_TYPE, VALID_START_TIME, INVALID_END_TIME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d Interval.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        JsonAdaptedSession session \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                new JsonAdaptedSession(VALID_GYM, VALID_EXERCISE_TYPE, VALID_END_TIME, VALID_START_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String expectedMessage \u003d Interval.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void readAddressBook_invalidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void readAddressBook_invalidAndValidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        AddressBook typicalClientsAddressBook \u003d TypicalClients.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertEquals(addressBookFromFile, typicalClientsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Adds a new {@code Client} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public AddressBookBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Adds a new {@code Session} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public AddressBookBuilder withSession(Session session) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        addressBook.addSession(session);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Adds a new {@code Schedule} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public AddressBookBuilder withSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        addressBook.addSchedule(schedule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 5,
      "benclmnt": 15,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Creates a {@code ClientBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code ClientToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new Client(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 28,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.parser.client.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an add command string for adding the {@code Client}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "        return AddClientCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns the part of command string for the given {@code Client}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        client.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "maguireong": 14,
      "tanweijie123": 2,
      "benclmnt": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.descriptor \u003d new EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing {@code Client}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setTags(client.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditClientDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditClientDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "maguireong": 31,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditScheduleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.schedule.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class to help with building EditScheduleDescriptorBuilder objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditScheduleDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private EditScheduleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptorBuilder(EditScheduleDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.descriptor \u003d new EditScheduleDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an {@code EditScheduleDescriptorBuilder} with fields containing {@code Schedule}\u0027s details"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditScheduleDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Index} of the {@code EditScheduleDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptorBuilder withClientIndex(Index clientIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setClientIndex(clientIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code session Index} of the {@code EditScheduleDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptorBuilder withUpdatedSessionIndex(Index sessionIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setUpdatedSessionIndex(sessionIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code paymentStatus} of the {@code EditScheduleDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public EditScheduleDescriptorBuilder withUpdatedPaymentStatus(PaymentStatus paymentStatus) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        descriptor.setUpdatedPayment(paymentStatus);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Sets the {@code remark} of the {@code EditScheduleDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public EditScheduleDescriptorBuilder withUpdatedRemark(Remark remark) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        descriptor.setUpdatedRemark(remark);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code updated session Index} of the {@code EditScheduleDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptorBuilder withSessionIndex(Index sessionIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setSessionIndex(sessionIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditScheduleDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 11,
      "maguireong": 50,
      "benclmnt": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditSessionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maguireong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.logic.commands.session.EditSessionCommand.EditSessionDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class to help with building EditSessionDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class EditSessionDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private EditSessionDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditSessionDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder(EditSessionDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.descriptor \u003d new EditSessionDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an {@code EditSessionDescriptor} with fields containing {@code Session}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder(Session session) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor \u003d new EditSessionDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setGym(session.getGym());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setExerciseType(session.getExerciseType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setInterval(session.getInterval());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Gym} of the {@code EditSessionDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder withGym(String gym) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setGym(new Gym(gym));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code ExerciseType} of the {@code EditSessionDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder withExerciseType(String exerciseType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setExerciseType(new ExerciseType(exerciseType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Sets the {@code Interval} of the {@code EditSessionDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptorBuilder withInterval(String startTime, String duration) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        descriptor.setInterval(new Interval(LocalDateTime.parse(startTime, Interval.DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                Integer.parseInt(duration)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public EditSessionDescriptor build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class ScheduleBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_CLIENT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_CLIENT_PHONE \u003d \"94351253\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_CLIENT_EMAIL \u003d \"alice@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_CLIENT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_CLIENT_TAGS \u003d \"injured-thigh\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 120;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_EXERCISE_TYPE \u003d \"Endurance\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final String DEFAULT_GYM \u003d \"Getwell gym\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final LocalDateTime DEFAULT_START_TIME \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            LocalDateTime.of(2020, 9, 29, 13, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final PaymentStatus DEFAULT_PAYMENT_STATUS \u003d PaymentStatus.PAYMENT_STATUS_UNPAID;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Remark DEFAULT_REMARK \u003d Remark.EMPTY_REMARK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Name clientName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Phone clientPhone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Email clientEmail;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Address clientAddress;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Set\u003cTag\u003e clientTags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Gym gym;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private ExerciseType exerciseType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private Interval interval;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private PaymentStatus paymentStatus;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Creates a {@code ScheduleBuilder} with the default details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientName \u003d new Name(DEFAULT_CLIENT_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientPhone \u003d new Phone(DEFAULT_CLIENT_PHONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientEmail \u003d new Email(DEFAULT_CLIENT_EMAIL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientAddress \u003d new Address(DEFAULT_CLIENT_ADDRESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        clientTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientTags.add(new Tag(DEFAULT_CLIENT_TAGS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        gym \u003d new Gym(DEFAULT_GYM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        exerciseType \u003d new ExerciseType(DEFAULT_EXERCISE_TYPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        interval \u003d new Interval(DEFAULT_START_TIME, DEFAULT_DURATION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        paymentStatus \u003d DEFAULT_PAYMENT_STATUS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        remark \u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Initializes the ScheduleBuilder with the data of {@code ClientToCopy}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder(Schedule scheduleToCopy) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientName \u003d scheduleToCopy.getClient().getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientPhone \u003d scheduleToCopy.getClient().getPhone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientEmail \u003d scheduleToCopy.getClient().getEmail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientAddress \u003d scheduleToCopy.getClient().getAddress();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        clientTags \u003d scheduleToCopy.getClient().getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        gym \u003d scheduleToCopy.getSession().getGym();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        exerciseType \u003d scheduleToCopy.getSession().getExerciseType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        interval \u003d scheduleToCopy.getSession().getInterval();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        paymentStatus \u003d scheduleToCopy.getPaymentStatus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        remark \u003d scheduleToCopy.getRemark();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Name} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withName(String name) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientTags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Address} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Phone} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Email} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Gym} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withGym(String gym) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.gym \u003d new Gym(gym);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code ExerciseType} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withExerciseType(String exerciseType) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.exerciseType \u003d new ExerciseType(exerciseType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Interval} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withInterval(LocalDateTime start, int duration) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.interval \u003d new Interval(start, duration);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Session}-related attributes of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withSession(Session session) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.gym \u003d session.getGym();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.exerciseType \u003d session.getExerciseType();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.interval \u003d session.getInterval();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code Client}-related attributes of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientName \u003d client.getName();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientEmail \u003d client.getEmail();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientPhone \u003d client.getPhone();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientAddress \u003d client.getAddress();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.clientTags \u003d client.getTags();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Sets the {@code paymentStatus} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public ScheduleBuilder withPaymentStatus(PaymentStatus paymentStatus) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        this.paymentStatus \u003d paymentStatus;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Sets the {@code remark} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public ScheduleBuilder withRemark(Remark remark) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns the {@code Schedule} based on this properties."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public Schedule build() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Client client \u003d new Client(clientName, clientPhone, clientEmail, clientAddress, clientTags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        Session session \u003d new Session(gym, exerciseType, interval);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return new Schedule(client, session, paymentStatus, remark);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 189,
      "benclmnt": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SessionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.ExerciseType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Gym;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Interval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * A utility class to help with building Session objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class SessionBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String DEFAULT_GYM \u003d \"Getwell gym\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String DEFAULT_EXERCISE_TYPE \u003d \"Endurance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final LocalDateTime DEFAULT_START_TIME \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            LocalDateTime.of(2020, 9, 29, 13, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 120;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Gym gym;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private ExerciseType exerciseType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Interval interval;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Creates a {@code SessionBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public SessionBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        gym \u003d new Gym(DEFAULT_GYM);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        exerciseType \u003d new ExerciseType(DEFAULT_EXERCISE_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        interval \u003d new Interval(DEFAULT_START_TIME, DEFAULT_DURATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Initializes the SessionBuilder with the data of {@code SessionToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public SessionBuilder(Session sessionToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        gym \u003d sessionToCopy.getGym();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        exerciseType \u003d sessionToCopy.getExerciseType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        interval \u003d sessionToCopy.getInterval();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Sets the {@code Gym} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public SessionBuilder withGym(String gym) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.gym \u003d new Gym(gym);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Sets the {@code ExerciseType} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public SessionBuilder withExerciseType(String exerciseType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.exerciseType \u003d new ExerciseType(exerciseType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Sets the {@code Interval} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public SessionBuilder withInterval(String start, String duration) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        this.interval \u003d new Interval(LocalDateTime.parse(start, Interval.DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maguireong"
        },
        "content": "                Integer.parseInt(duration));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Builds the {@code Session}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Session build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new Session(gym, exerciseType, interval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 3,
      "benclmnt": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns the middle index of the Client in the {@code model}\u0027s Client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns the last index of the Client in the {@code model}\u0027s Client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns the Client in the {@code model}\u0027s Client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return model.getFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_ALLERGY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.client.ClientCommandTestUtil.VALID_TAG_INJURY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maguireong"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maguireong"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withTags(\"injured-thigh\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withTags(\"allergy-dairy\", \"injured-thigh\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"injured-thigh\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code ClientCommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_ALLERGY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_INJURY, VALID_TAG_ALLERGY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    private TypicalClients() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maguireong"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Clients."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maguireong": 19,
      "benclmnt": 16,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Index INDEX_FOURTH_CLIENT \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_FIRST_SESSION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_SECOND_SESSION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_THIRD_SESSION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_FIRST_SCHEDULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_SECOND_SCHEDULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Index INDEX_THIRD_SCHEDULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 1,
      "maguireong": 11,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSchedules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.GETWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maguireong"
        },
        "content": "import static seedu.address.testutil.TypicalSessions.MACHOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.PaymentStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "public class TypicalSchedules {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    // Manually added - Schedule\u0027s details found in {@code ScheduleCommandTestUtil}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Schedule ALICE_GETWELL \u003d new ScheduleBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .withClient(ALICE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .withSession(GETWELL)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final Schedule BENSON_GETWELL \u003d new ScheduleBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .withClient(BENSON)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .withSession(GETWELL)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maguireong"
        },
        "content": "    public static final Schedule ALICE_MACHOMAN \u003d new ScheduleBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withClient(ALICE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .withSession(MACHOMAN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maguireong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maguireong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final PaymentStatus PAYMENT_UNPAID \u003d new PaymentStatus(\"unpaid\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static final PaymentStatus PAYMENT_PAID \u003d new PaymentStatus(\"paid\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d Remark.EMPTY_REMARK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Remark TEST_REMARK \u003d new Remark(\"Did 5 pushups\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    private TypicalSchedules() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Sessions."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        for (Schedule schedule : getTypicalSchedules()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "            ab.addSchedule(schedule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    public static List\u003cSchedule\u003e getTypicalSchedules() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maguireong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_GETWELL, BENSON_GETWELL, ALICE_MACHOMAN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dhafinrazaq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dhafinrazaq": 46,
      "maguireong": 8,
      "benclmnt": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSessions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_GETWELL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_MACHOMAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_DURATION_ULTRAMAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_GETWELL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_MACHOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_EXERCISE_TYPE_ULTRAMAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_GETWELL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_MACHOMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_GYM_ULTRAMAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_GETWELL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN_MINUS1WEEK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN_NOW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN_PLUS2MONTHS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_MACHOMAN_TOMORROW;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static seedu.address.logic.commands.session.SessionCommandTestUtil.VALID_START_TIME_ULTRAMAN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalSchedules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * A utility class containing a list of {@code Session} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class TypicalSessions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // Manually added - Session\u0027s details found in {@code SessionCommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Session GETWELL \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withGym(VALID_GYM_GETWELL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_GETWELL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_GETWELL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    VALID_DURATION_GETWELL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final Session MACHOMAN \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Session ULTRAMAN \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withGym(VALID_GYM_ULTRAMAN)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_ULTRAMAN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_ULTRAMAN,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                    VALID_DURATION_ULTRAMAN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Session MACHOMAN_NOW \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN_NOW, VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static final Session MACHOMAN_TOMORROW \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN_TOMORROW, VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final Session MACHOMAN_PLUS2MONTHS \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN_PLUS2MONTHS, VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "    public static final Session MACHOMAN_MINUS1WEEK \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withGym(VALID_GYM_MACHOMAN)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withExerciseType(VALID_EXERCISE_TYPE_MACHOMAN)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .withInterval(VALID_START_TIME_MACHOMAN_MINUS1WEEK, VALID_DURATION_MACHOMAN)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private TypicalSessions() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Sessions."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ab.addSession(session);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Sessions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static AddressBook getIntegrationAddressBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        AddressBook ab \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (Schedule schedule : getTypicalSchedules()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ab.addSchedule(schedule);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static List\u003cSession\u003e getTypicalSessions() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GETWELL, MACHOMAN, ULTRAMAN));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Sessions + a Session with interval start that dynamically"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * to the day after application is loaded."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static AddressBook getDynamicTimeAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (Session session : getDynamicTimeSessions()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ab.addSession(session);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static List\u003cSession\u003e getDynamicTimeSessions() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GETWELL, MACHOMAN, ULTRAMAN, MACHOMAN_NOW, MACHOMAN_TOMORROW,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanweijie123"
        },
        "content": "                MACHOMAN_PLUS2MONTHS, MACHOMAN_MINUS1WEEK));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanweijie123": 16,
      "kelvinvin": 42,
      "benclmnt": 63
    }
  }
]
