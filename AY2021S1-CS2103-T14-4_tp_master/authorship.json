[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "![Ui](docs/images/w6.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Ace CS2103/T helps CS2103/T students manage their tasks. It is optimized for CLI users so that each task can be managed faster by typing in commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Ace CS2103/T is a **desktop app for managing task requirements of CS2103/T, optimized for use via Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Ace CS2103/T can get your learning tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* If you are interested in using Ace CS2103/T, head over to the [_Quick Start_ section of the **User Guide**](https://ay2021s1-cs2103-t14-4.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* If you are interested about developing Ace CS2103/T, the [**Developer Guide**](https://ay2021s1-cs2103-t14-4.github.io/tp/DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Documentation**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [Homepage](https://ay2021s1-cs2103-t14-4.github.io/tp/)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [AboutUs](https://ay2021s1-cs2103-t14-4.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [UserGuide](https://ay2021s1-cs2103-t14-4.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [DeveloperGuide](https://ay2021s1-cs2103-t14-4.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "onglijin": 7,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "mainClassName \u003d \u0027tp.acecs2103.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    archiveName \u003d \u0027acecs2103.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "onglijin"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "onglijin": 2,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Gao Gui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cimg src\u003d\"images/perpetual09.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "[[github](https://github.com/Perpetual09)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "[[portfolio](https://ay2021s1-cs2103-t14-4.github.io/tp/team/perpetual09.html)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "### Jin Yuze"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "\u003cimg src\u003d\"images/unicornjin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "[[github](https://github.com/UnicornJin)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "[[portfolio](https://ay2021s1-cs2103-t14-4.github.io/tp/team/unicornjin.html)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Ong Li Jin"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cimg src\u003d\"images/onglijin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[[github](https://github.com/onglijin)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "[[portfolio](https://ay2021s1-cs2103-t14-4.github.io/tp/team/onglijin.html)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "### Xia Liyi"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cimg src\u003d\"images/xia-liyi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[[github](http://github.com/xia-liyi)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[[portfolio](https://ay2021s1-cs2103-t14-4.github.io/tp/team/xia-liyi.html)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Zhang Yunjie"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cimg src\u003d\"images/zhang-yunjie.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "[[github](http://github.com/zhang-yunjie)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "[[portfolio](https://ay2021s1-cs2103-t14-4.github.io/tp/team/zhang-yunjie.html)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "UnicornJin": 4,
      "Zhang-Yunjie": 2,
      "onglijin": 4,
      "-": 32,
      "Perpetual09": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "# **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "![Architecture Diagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "onglijin"
        },
        "content": "![Class Diagram of the Logic Component](images/AceCS2103LogicClassDiagram.jpg)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "![Sequence Diagram for Delete 1 command](images/AceCS2103DeleteSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "onglijin"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/ui/Ui.java)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CategoryPanel`, `WeekDisplay`, `HelpWindow` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "onglijin"
        },
        "content": "![Structure of the Logic Component](images/AceCS2103LogicClassDiagram.jpg)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/logic/Logic.java)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1. `Logic` uses the `TaskListParser` class to parse the user command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a customised task)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 0101\")` API call."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "onglijin"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/AceCS2103DeleteSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/model/Model.java)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* stores the task list data."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* exposes an `UiTaskList` object containing four `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/src/main/java/tp/acecs2103/storage/Storage.java)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* can save the task list data in json format and read it back."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Classes used by multiple components are in the `tp.acecs2103.commons` package."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "## **UI Enhancements**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Task Box"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Task Box is used to encapsulates a pre-defined or a customized task, which will be displayed in the category panel."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "A task box contains the following fields:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ index"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ week number"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ description"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ official deadline"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ customized deadline (if any)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ remark (if any)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "The constructor is called by Category panel and the data is obtained by passing in a task object from an observable task list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since there will be multiple tasks under a category panel, task box constructor should be called in category panel and use a default method in JavaFX to generate all the task boxes in one step."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since the data in task box may change depending on the user input, therefore it should be able to check if need to update the content whenever data change happens. Therefore, it is necessary to implement update item method such that it can automatically check the update."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Category Panel"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Category panel is used to encapsulates a list of tasks which are of the same category as the header of the category panel."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Category panel contains the following fields:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ category label"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ category view"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Category panel will read in a category label and an observable task list from Ui Task List class. The category label will be passed into the constructor of category box which will generate the header of the panel. Every task object in the task list will be used to create to a corresponding task box."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since a category panel should contains multiple tasks and a category box which indicate the category name, it is necessary to call the constructor of task box and pass in every task object to a corresponding task box. Besides, category label will be passed into the constructor of category box which will generate the header of the panel."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since all the tasks are divided into four categories, and the structure for each panel is the same (header and tasks), there is only one category panel component needed. For styling, different colour and style will be implemented for different category panel."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Category Box"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "A category box is a header box to indicate the category of the tasks below."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Category box contains the following field:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ category label"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Category box will just simply read in a string of category then create a corresponding category box."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since there are four different categories, it is necessary to have header box to indicate the different categories."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "The category field in the task box is not needed because category box can clearly show the category already."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Command Box"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "User can enter commands in the command box."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Command box contains the following field:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ input command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "User command will be passed into input command filed and it will then pass to parser to finish subsequent procedures."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "It is necessary to implement user command box such that the application will know what functionalities should be processed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Since users are supposed to use keyboard only, submit button is replaced by click “Enter”."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Week Display"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Week display component will display the number of the week among all the filtered tasks if they are in the same week."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Week display contains the following field:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ week number and date"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Week display will receive the maximum and minimum week number among all the filtered tasks, and it will display the week and the corresponding date. Whenever the filtered tasks change, the component will do auto check and the week number should be changed correspondingly."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Although it is not essential, having this week display box can facilitate users to know the week that tasks belong to."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "The text style should be different from others and it should be obvious."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "### Message Window"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "After entering a command, the message window will tell users whether the command is executed successfully or not."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Message window contains the following field:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "+ message text"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Message window will accept a string of message from the parser which indicates the status of the command, and then display it at the bottom of the application. Besides, the displayed message should be refreshed and updated whenever a new command is entered."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "In order to make sure the application is responsive for every command; it is necessary to add such a functionality so that users can clearly know weather the command is executed successfully or not instead of being unaware of a failed command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "The message should be clear and succinct that not occupy a large area."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "## **Model Enhancements**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "### UiTaskList"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Description:**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "UiTaskList is a task list used for Ui display."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Implementation:**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "UiTaskList includes four sub task lists for `Admin`, `Topic`, `TP` and `IP`:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "+ adminList"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "+ topicList"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "+ ipList"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "+ tpList"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "After running a command, UiTaskList will be refreshed to contain all the tasks satisfying current key condition."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Why:**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "It is to separate tasks which should be used for Ui display from TaskList used in command operation. This makes TaskList safer to avoid conflicts between Ui and Model."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Other Considerations:**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "The UiTaskList must be refreshed every time after the command is run in case there is any change for it."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* Students who take CS2103 or CS2103/T"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* is reasonably comfortable using CLI apps due to prior experience with CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Provide CS2103 and CS2103/T students with integrated timeline and checklists for weekly tasks in categories, and enable their customised managements of these tasks."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                        | So that I can…​                                                        |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| -------- | ------------------------------------------ | ----------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "onglijin"
        },
        "content": "| `* * *`  | new user                                   | learn about the commands            | understand how to use the features of the app|"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "onglijin"
        },
        "content": "| `* * *`  | user                                       | add a customised task               | track additional tasks beside the preloaded ones from the CS2103/T website"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "onglijin"
        },
        "content": "| `* * *`  | user                                       | edit a customised task              | include an update or correct a mistake"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "onglijin"
        },
        "content": "| `* * *`  | user                                       | delete a customised task            | remove a task that I do not want anymore"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "| `* * *`  | user                                       | search for tasks using a keyword    | find a specific task without reading through the whole task list"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| `* * *`  | user                                       | search for tasks using category     | find tasks with similar categories"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "| `* * *`  | user                                       | add a customised deadline to a task | record when a task needs to be done according to my own schedule"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| `* *`    | user                                       | list down tasks of a specific week  | check task history"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| `* *`    | user                                       | mark an undone task as done         | know which task is finished clearly"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| `* *`    | user                                       | mark a done task as undone          | correct wrongly marked task"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "| `*`      | user                                       | see the time bar of the semester    | the overall progress of the module"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Use case: UC01 - Check help information**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1.  User asks for help information"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager shows link to the User Guide page"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Use case: UC02 - Search for tasks**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1.  User asks for searching tasks with keyword"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager lists search result"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a. User does not provide a keyword"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1. Task manager informs user to add a parameter"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2a. Searching for the keyword got no answer"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    2a1.  Task manager informs user there is no result."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Use case: UC03 - Check task list**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1.  User asks for list all tasks in a specific week"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager lists all the tasks in the specific week"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a. User provides an invalid week number"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1.  Task manager informs the user the week number is incorrect"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1b. User does not provide week number"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1b1. Task manager informs the user to provide valid week number"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Use case: UC04 - Add customised deadline to a task**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1.  User requests for adding a customised deadline to a task and provides task index and deadline"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager add the deadline to the task and show overview of the task"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a.  User gives an invalid task index"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1.  Task manager informs user the task index is invalid"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1b.  User gives deadline in incorrect format"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1b1.  Task manager informs user the time format is incorrect and shows the correct format"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1c.  User does not provide complete parameters"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1c1.  Task manager informs user the command does not have complete parameters"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1d.  The task to be edited already has a deadline"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1d1.  Task manager updates the task with the new deadline and informs user the deadline of this task has been edited and shows the previous deadline"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Use case: UC05 - Add a customised task**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1.  User requests for adding customised task and provides the necessary information"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager adds the task and shows user an overview of task added"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a.  Information provided by user is not complete"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1.  Task manager informs user the correct format and asks for a new order"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1b.  Information provided by user is not in correct format"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1b1.  Task manager informs user the correct format and asks for a new order"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Use case: UC06 - Edit a customised task**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1. User requests for editing a customised task and provides the necessary information"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2. Task manager edit the task and update the UI"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a. Information provided by user is not complete"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1. Task manager informs the user to provide the complete information and informs the user the correct format"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1b. Information provided by the user is not in correct format"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1. Task manager informs the user to provide the complete information and informs the user the correct format"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Use case: UC07 - Delete a customised task**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1.  User asks for deleting a customised task by giving task index"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager deletes the task and informs user the task content deleted"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a.  User provides an invalid task index"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1. Task manager informs the user to provide a valid task index"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2a.  User does not provide task index"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    2a1. Task manager informs the user to provide a valid task index"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "3a. User attempts to delete a default task"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    3a1. Task manager informs the user that only customised task can be deleted"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Use case: UC08 - Mark a task as done/undone**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1. User asks for marking a task as done/undone by giving the task index"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2. Task manager mark the task and update the done/undone status on the UI"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1a. User provides an invalid task index"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    1a1. Task manager informs the user to provide a valid task index"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2a. User does not provide task index"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    2a1. Task manager informs the user to provide a valid task index"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "3a. User attempts to mark a done task as done again or mark an undone task as undone again"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    3a1. Task manager informs the user that the task has been marked already"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Use case ends"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Use case: UC09 - Go back to home page**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1. User asks for back to the default page(the task list of current week)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2. Task manager update UI to the list of current week"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**Use case: UC10 - Exit the task manager**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1.  User requests to exit from task manager"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "2.  Task manager shows goodbye words and stops program"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "a. User clicks on exit button to exit"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    a1. Task manager shows goodbye words and exits"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "         Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Use case: UC11 - Filter tasks**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "1. User asks for filter tasks, provide keywords(done or pending), deadline type(official or customized), week number. And the provided parameters follow the requirement in UserGuide."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "2. Task show tasks found and sort them based on the deadline of specified deadline type."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  Use code ends"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "a. The provided parameters do not follow the requirement in UserGuide."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    a1. Task manager informs the user to follow the requirement and shows the correct examples."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            Use case ends    "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "4.  A user who enrolled in CS2103/T should be quite familiar with default tasks every week, which are pre-loaded in the application."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "5.  Modified data will be updated within 1 second."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "onglijin"
        },
        "content": "6.  Should be able to contain up to 1000 customised tasks created by user."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "7.  Help information and pre-load instructions will be displayed within 1 second."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "onglijin"
        },
        "content": "8.  The application should load in 2 second when the number of customised tasks are within 1000."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "9.  A user will be prohibited from editing the pre-load tasks or information."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Customise tasks**: use `add` to add customised tasks into application which make it more personal"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample tasks. The window size may not be optimum."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "1. Shutdown"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "   1. Input `exit` in command line to save and exit."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Adding a task"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1. Adding a customised task into task list"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t1. Prerequisites: Ensure that the index of adding task is not occupied."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\tProvide necessary information, include: index, week number, description, deadline, category."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\tThe remark parameter is optional."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t1. Test case: \u0027add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: A task with:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tindex: 0109"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tweek number: 1"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tdescription: update documentation"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tcustomised deadline: 2020-10-02"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tremark: check tp dashboard"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tis created under \"Tp\" category, and marked as undone."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tIf your page is not switched to week 1, use \u0027list 1\u0027\u003cbr\u003e to switch to week 1"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t2. Test case: \u0027add i/0110 w/1 d/Cyberpunk2077 c/2020-12-10 a/Ip\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: A task with:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tindex: 0110"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tweek number: 1"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tdescription: Cyberpunk2077"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\t\tcustomised deadline: 2020-12-10"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tis created under \"Ip\" category, and marked as undone."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tIf your page is not switched to week 1, use \u0027list 1\u0027\u003cbr\u003e to switch to week 1"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t3. Test case: \u0027add w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that there is/are some necessary parameters missing."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t4. Test case: \u0027add i/01401 w/14 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that the index and week number is invalid."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t5. Test case: \u0027add i/0109 w/11 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that the index is not match to week number."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t6. Test case: \u0027add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp x/dummy\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that there are some unexpected parameters in the command."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t7. Test case: \u0027add i/0109 w/1 d/update documentation c/2020-19-75 r/check tp dashboard a/Tp\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that the deadline previded is an invalid date."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t8. Test case: \u0027add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Haha\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: No task is added. Error message will inform you that the category you provided is unexisted."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### (Set) Deadline for tasks"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Set customised deadline for a task"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Prerequisites: The task indicated should exist in the task list."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Note that format for index follows this convention: 0 + week number + 2 digits, e.g. `0101`,`01011`,`01208`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `deadline i/0701 c/2020-09-29`\u003cbr\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Customised deadline for task indexed at 0701 is set. Success message shown in feedback box."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `deadline i/0601 c/2020-09-29`\u003cbr\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Assuming this task is not overdue yet, i.e. the current time is before the official deadline of the task (2020-09-17)."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No customised deadline will be set. Error details will be shown in the status message, as task indexed at 0601 has an official deadline before 2020-09-29."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `deadline i/0620 c/2020-09-29`\u003cbr\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No customised deadline will be set. Error details will be shown in the status message, as task index provided is invalid."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Other incorrect delete commands to try: `deadline`, `undone i/1`, `...` "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Similar to previous. "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Deleting a customised task if it exists in the task list"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Prerequisites: Ensure that the task does exist in the task list by listing all tasks for the relevant week. "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "onglijin"
        },
        "content": "   If there is no customised task created yet in the task list, add customised tasks using add command."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   For example, `add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp` to add"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   a customized task with index 0109. "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Note that format for index follows this convention: 0 + week number + 2 digits, e.g. `0101`,`01011`,`01208`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `delete 0109`\u003cbr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            Expected: Customised task indexed at 0109 is deleted from the task list. Success message shown."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `delete 0101`\u003cbr\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is deleted. Error details will be shown in the status message, as task indexed at 0101 is a default task that cannot be deleted."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is deleted. Error details shown in the status message as the task index is invalid. "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is any string that does not follow the index format)\u003cbr\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Done a task"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Mark a task as done if it is not done yet."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Prerequisites: The task to be marked as done should be in pending status (not done yet). You can check the completion status by "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   observing the task color: red or grey for pending tasks, green for completed tasks."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Note that format for index follows this convention: 0 + week number + 2 digits, e.g. `0101`,`01011`,`01208`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `done 0101`\u003cbr\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Pending task indexed at 0101 is marked as done correctly. Success message shown in feedback box."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Task color changes from grey/red to green."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       * Note: if you type `done 0101` again, error message will be shown to remind you that this task has been marked as done."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `done 0120`\u003cbr\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is marked as done. Error details will be shown in the status message, as task indexed at 0120 does not exist."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `done 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is marked as done. Error details shown in the status message as the task index is invalid. "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Other incorrect delete commands to try: `done`, `done x`, `...` (where x is any string that does not follow the index format)\u003cbr\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Editing a task"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1. Editing a task if it exists in the task list"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    1. Prerequisite: Ensure that the task exits in the task list. One way you can check is by listing all tasks for the relevant week."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    If the task does not exist in the task list, you can add a customised task by using the add command."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    For example, `add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp` to add"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    a customised task with index 0109."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    1. Test case: `edit i/0101 c/2020-09-01 r/updated remark` \u003cbr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Expected: Customised deadline and remark is updated for task indexed at 0101. Success message shown in feedback box."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    1. Test case: `edit i/0109 d/updated description r/updated remark` \u003cbr\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Expected: Description, customised deadline and remark is updated for task indexed at 0109. Success message shown in feedback box."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    1. Test case: `edit i/0101 d/updated description r/updated remark`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "onglijin"
        },
        "content": "       Expected: No task is edited. Error details will be shown in the status message as the task indexed at 0101 is a default task and the description cannot be edited."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Filter task list"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Filter task list according to certain criteria"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter k/done`\u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: All completed tasks are displayed. Success message shown in feedback box. Note that no task will be displayed if none of the tasks in task list is done yet."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter w/4 k/done`\u003cbr\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   Expected: All completed tasks in week 4 are displayed. Success message shown in feedback box."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter k/pending l/official`\u003cbr\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: All pending tasks are displayed in ascending order of official deadline. Success message shown in feedback box."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Note: customised deadline will be used for comparison between tasks if certain tasks do not have official deadline"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter w/4 k/pending l/customised`\u003cbr\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: All pending tasks in week 4 are displayed in ascending order of customised deadline. Success message shown in feedback box."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Note: official deadline will be used for comparison between tasks if certain tasks do not have customised deadline"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter w/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Task list displayed will not be changed. Error details will be shown in the status message, as keyword for filter is not specified."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `filter w/4 k/pending`\u003cbr\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Task list displayed will not be changed. Error details will be shown in the status message, as type of deadline is a compulsory input for filtering pending tasks."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Other incorrect delete commands to try: `filter`, `filter x`, `...` (for x being any irrelevant string)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Similar to previous.       "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Finding a task"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1. Finding a task by a keyword"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    1. Test case: `find project` \u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Expected: Tasks with \"project\" in its description or remark will be listed. Success message shown in feedback box."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                     "
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Undone a task"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Mark a task as pending if it is marked as done."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Prerequisites: The task to be marked as pending should be in done status. You can check the completion status by "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   observing the task color: red or grey for pending tasks, green for completed tasks."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Note that format for index follows this convention: 0 + week number + 2 digits, e.g. `0101`,`01011`,`01208`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `done 0101` `undone 0101`\u003cbr\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * for `done 0101`: Pending task indexed at 0101 is marked as done correctly. Success message shown in feedback box."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Task color changes from grey/red to green."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * for `undone 0101`: Done task indexed at 0101 is marked as pending correctly. Success message shown in feedback box."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                                      Task color changes from green to grey/red."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       * Note: if you type `undone 0101` again, error message will be shown to remind you that this task is not marked done yet."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `undone 0120`\u003cbr\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is marked as pending. Error details will be shown in the status message, as task indexed at 0120 does not exist."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Test case: `undone 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: No task is marked as pending. Error details shown in the status message as the task index is invalid. "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   1. Other incorrect delete commands to try: `undone`, `undone x`, `...` (where x is any string that does not follow the index format)\u003cbr\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      Expected: Similar to previous.      "
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Home page"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "onglijin"
        },
        "content": "1. Switch current page to the task list of current week(home page)."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t1. Test case: \u0027home\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t\tExpected: Shown task list is switched to current week page."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "### Help information"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "1. Getting help information"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "\t1. Test case: \u0027help\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "\t\tExpected: Get a link to the UserGuide page.          "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Listing tasks"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "1. Listing all tasks for a certain week."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    1. Test case: `list 6` \u003cbr\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Expected: Tasks with week number 6 will be listed."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    1. Test case: `list 0` \u003cbr\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "       Expected: No task is listed. Error details will be shown in the status message as the week number is not between 1 and 13."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "1. Input `exit` in command line to save and exit."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "## **Effort**"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Difficulty level"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### More entities:"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Compared with AB3 which has one panel for Person, there are four different kinds of tasks (Admin, Topic, Tp, Ip), and four panels to display the tasks with corresponding categories in Ace CS2103 / T."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### More attributes:"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* In AB3, each person object has 5 attributes: email, name, address, phone, and tags"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* In Ace CS2103 / T, there are nine attributes in each task object: category, index, week number, description, official deadline, customized deadline, remark, status, and whether is a default task or not. "
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### More links between attributes:"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The nine attributes in our task objects are highly linked"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* It makes the logic of processing each command much more complex as more conditions need to be checked and met, and changes to one attribute will inevitably affect other attributes"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Here are some examples: "
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Index needs to be consistent with the week number"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Default task cannot be deleted"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Customised deadline cannot be set before official deadline if the task is not overdue"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Description can only be edited for customised tasks, but not for default task"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * ..."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Due to the high amount of links between attributes, we need to consider more exceptions to handle"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### More commands:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Compared with AB3, there are more commands in Ace CS2103/T"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Examples include:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * deadline"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * done"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * undone"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * filter"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * ... "
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Because there are nine attributes in every object, commands are more easily to have bugs. When writing code, we need to be more careful and consider unintended consequences on other attributes and their compatibility."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### More testing considerations:"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Some commands may have many fields (e.g. add, edit), so we need to ensure the absence of bug for every field. "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* We spent much time adding and improving our testing codes such that it can cover most possibilities."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Challenges faced \u0026 effort required"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### Ui"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* In this project, we are required to use JavaFX to design the Ui. However, none of us learned JavaFX before. Although some basic concepts are taught in the individual project, the knowledge needed for a team project is much more than that. "
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* When designing the Ui, we need to learn from AB3 first and then think about how to adapt the techniques in our project. "
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Besides, we notice that for a particular styling, there are many ways to achieve it: it can be either implemented in .java class, .fxml file, or .css file, which adds many confusions. "
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Last but not least, although we looked into AB3 code to learn how it implements a certain feature, we abandoned the dark style used in AB3 and created our own light color style, which is also a huge challenge because we cannot use the code from AB3 directly."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Similarly, as all the tasks are divided into four categories for display, we need to include four category panels instead, which is different from AB3 so we cannot reuse its codes for UI."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "#### Logic"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* In this project, the logic part is the core of functions. "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Implementation of each command requires the combination of different parts of logic. We need to understand user input, give proper commands, execute the commands and give correct feedback or exceptions. Jumping between different parts of the project is complex and debugging is long and painful. A lot of effort is needed for communications and collaborations between team members."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Achievements of the project"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The final product of our team, a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering, is very relevant to students of CS2103/T. It may be extended in the future to become a truly useful tool to help future batches of this module.  "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* During the process, we learned how to implement logic, storage, model, and Ui part for an application, as well as how these components interact with each other. "
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* It teaches us how coding in the scale of an actual project places a strong emphasis on the integration between components on a higher abstraction level, which is different from coding in our previous programming modules such as CS1101S, CS2030S and CS2040, which focuses more on the writing of individual methods and classes. "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Besides, we realized the importance of teamwork. Due to the close links between different parts of the codes, team members need to work together to offer help and work out the solution when any encounters difficulties."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Although this project consumes a lot of time, it is quite meaningful because we gain much experience by working on an actual software engineering project and also make a group of trustful friends."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 26,
      "UnicornJin": 192,
      "Zhang-Yunjie": 237,
      "onglijin": 109,
      "-": 240,
      "Perpetual09": 108
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "   1. Run the `Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "   e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "   e.g. `LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 34
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Ace CS2103/T is a **desktop app for managing task requirements of CS2103/T, optimized for use via Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Ace CS2103/T can get your learning tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "2. Copy the file to the folder you want to use as the _home folder_ for your Ace CS2103/T."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "3. Make sure your computer screen resolution reaches the minimum requirement (1095 * 770)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will get you the link for user guide.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "   * **`list`**`6` : Lists all tasks for week 6."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "   * **`deadline`**`i/0601 c/2020-09-16` : Adds a deadline 2020-09-16 to task indexed at 0601."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "6. Refer to the [About UI](#about-ui) below for details on the app UI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "7. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "## About UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Tasks are displayed in 4 columns for 4 categories of CS2103/T tasks, namely Admin, Topic, IP and TP."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Time range of tasks displayed in each column is shown in the header of the column, beside the task category."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  For example, `Week 1 to Week 13` means the tasks listed in the column range from week 1 to 13. `Week 13 to Week 13` means the tasks listed in the column"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  are all from week 13."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* When the app is first opened, task list for the current week will be displayed as default. You may navigate to any week using `list` command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* You may refer to the progress bar at the top left corner of the app for the current week number and the relative completion of the semester (assuming 13 weeks in total for a semester)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Tasks are colored coded for different status of completion. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Green: task is done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Grey: task is pending and official deadline has not passed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Red: task is pending and official deadline has passed (task is overdue)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  e.g. in `list WEEK_NUMBER`, `WEEK_NUMBER` is a parameter which can be used as `list 6`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  e.g `add i/INDEX w/WEEKNUMBER d/DESCRIPTION c/DEADLINE [r/REMARK] a/CATEGORY` can be used as `add i/0111 w/1 d/new customised task c/2020-09-01 a/Admin` or as `add i/0111 w/1 d/new customised task c/2020-09-01 r/new remark a/Admin`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Lists the website for the user guide."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "### Finding relevant tasks: `find`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Lists all tasks that contain the keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* The KEYWORD is a letter string in the description and remark of tasks to be returned."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Operates rough search in the task list. KEYWORD is case-insensitive."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* `find project`: Returns all tasks containing keyword “project” in their descriptions or remarks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "### List tasks: `list`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Lists all tasks in a specific week."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Format: `list WEEK_NUMBER`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The WEEK_NUMBER is a integer in the range [1,13] representing a teaching week."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* `list 6`: Returns all tasks in teaching week 6."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Adding a customised deadline: `deadline`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Adds a customised deadline to a task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Format: `deadline i/TASK_INDEX c/DEADLINE`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* The task indexed at TASK_INDEX will be given a DEADLINE."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* The deadline should be given in the format: \"YYYY-MM-DD\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* Note: the customised deadline should be BEFORE the official deadline if the task is not overdue yet. No restriction if the official deadline has passed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `deadline i/0601 c/2020-09-10`: Adds a customised deadline on 10th September 2020 to the first task of teaching week 6 which is indexed at TASK_NUMBER 0601."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Adding a customised task: `add`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Adds a customised task in the task manager."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format: `add i/INDEX w/WEEKNUMBER d/DESCRIPTION c/DEADLINE [r/REMARK] a/CATEGORY`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The task with INDEX as index, WEEKNUMBER as week number, DESCRIPTION as description, DEADLINE as customised deadline, REMARK as remark, CATEGORY as the category will be added into task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* The INDEX, WEEKNUMBER, DESCRIPTION, DEADLINE and CATEGORY are compulsory, the REMARK is optional."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* The first letter of CATEGORY has to be in caps. Available categories: Ip, Tp, Topic, Admin"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The index should follow the naming convention below:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * always start with 0"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * only contain numbers"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * be at least 4 digits long"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * should not be blank"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * E.g. `0101`: first task of week 1, `01314`: 14th task of week 13"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The index should be consistent with week number. E.g. `01215` is a valid index for tasks in week 12, while `01115` is invalid for week 12 tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `add i/0109 w/1 d/update documentation c/2020-08-14 r/check tp dashboard a/Tp`:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Task to update documentation with deadline set on 2020-08-14 of category tp with a remark to check tp dashboard is added to the task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Deleting a customised task: `delete`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Deletes a customised task in the task manager. An exception will occur if task indicated by index is a default task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Format: `delete TASK_INDEX`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The task indexed at TASK_INDEX will be deleted. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* Only customised tasks can be deleted."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* You cannot delete a task if it does not exit in the task list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* `delete 0109`: Task indexed at 0109 will be deleted."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Editing a task: `edit`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Edits a task in the task manager."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format: `edit i/INDEX [d/DESCRIPTION] [c/DEADLINE] [r/REMARK]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* The task with INDEX as index will be updated with DESCRIPTION as the new description, DEADLINE as the new customised deadline, REMARK as the new remark, CATEGORY as the category will be added into task list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The INDEX is compulsory, all other parameters are optional."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* For default task, only DEADLINE and REMARK can be edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* For customised task, DESCRIPTION, DEADLINE and REMARK can be edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* `edit i/0101 c/2020-09-01 r/updated remark`:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Default task indexed at 0101 updates with \"2020-09-01\" as its customised deadline and \"updated remark\" as its remark."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `edit i/0109 d/updated description r/updated remark`:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Customised task indexed at 0109 updates with \"updated description\" as its new description."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Mark a task as done: `done`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Marks a task in the task manager as done or undone."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Format of `done`: `done TASK_INDEX`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* The task at TASK_INDEX will be marked as done."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* You can only mark a pending (undone) task as done. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* `done 0101`:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Mark task with index 0101 as done."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Mark a task as undone: `undone`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Format of `undone`: `undone TASK_INDEX`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The task at TASK_INDEX will be marked as pending."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* You can only mark a done task as pending."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* `undone 0101`:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Mark task with index 0101 as pending."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Filter selected tasks based on various criteria: `filter`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Filters the tasks based on selected criteria and order them by deadline."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format 1: `filter w/WEEKNUMBER k/KEYWORD l/DEADLINETYPE` \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format 2: `filter k/KEYWORD l/DEADLINETYPE` \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format 3: `filter w/WEEKNUMBER k/KEYWORD` \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Format 4: `filter k/KEYWORD`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The `KEYWORD` can be \"pending\" or \"done\". The task manager will filter tasks based on the done status of tasks. It is compulsory for all formats."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The `WEEKNUMBER` can be used to specify which week the user select, it is optional. Without it, you are filtering ALL tasks in the task list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* The `DEADLINETYPE` can be \"official\" or \"customised\", which specify which deadline type the selected task should be ranked by in ascending order."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* In Format 1,2, the KEYWORD can only be \"pending\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* In Format 3,4, the KEYWORD can only be \"done\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `filter k/done`: Display all the completed tasks."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `filter w/4 k/done`: Display all the completed tasks in week 4."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `filter k/pending l/official`: Display all the pending tasks ranked in ascending order of their official deadline (i.e. task with nearest deadline will be displayed at top)."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `filter k/pending l/customised`: Display all the pending tasks ranked in ascending order of their customised deadline (i.e. task with nearest deadline will be displayed at top)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* `filter w/4 k/pending l/official`: Display all the pending tasks ranked in ascending order of their customised deadline (i.e. task with nearest deadline will be displayed at top) in week 4."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "### Back to home page of current week : `home`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Back to the home page that display all tasks of the current week."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "onglijin"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Ace CS2103/T home folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Add** | `add i/INDEX w/WEEKNUMBER d/DESCRIPTION c/DEADLINE r/REMARK a/CATEGORY` \u003cbr\u003e e.g. `add i/0109 w/1 d/update documentation c/2020-10-02 r/check tp dashboard a/Tp`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Deadline** | `deadline i/TASK_NUMBER c/DEADLINE` \u003cbr\u003e e.g., `deadline i/0601 c/2020-09-20`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Delete** | `delete TASK_NUMBER`\u003cbr\u003e e.g., `delete 0109`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Done** | `done TASK_INDEX` \u003cbr\u003e e.g., `done 0101`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Edit** | `edit i/INDEX [d/DESCRIPTION] [c/DEADLINE] [r/REMARK]` \u003cbr\u003e e.g. `edit i/0101 c/2020-09-01 r/updated remark`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Filter** | `filter [w/WEEKNUMBER] k/KEYWORD [l/DEADLINETYPE]` e.g., `filter w/4 k/pending l/official` \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Find** | `find KEYWORD` e.g., `find project` \u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "**Home** | `home`\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Help** | `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**List** | `list WEEK_NUMBER`  e.g., `list 6` \u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "onglijin"
        },
        "content": "**Undone** | `undone TASK_INDEX` \u003cbr\u003e e.g., `undone 0101`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "UnicornJin": 11,
      "Zhang-Yunjie": 67,
      "onglijin": 58,
      "-": 94,
      "Perpetual09": 3
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Class CategoryBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Class CategoryPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Class TaskBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Class WeekDisplay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "MainWindow *-down-\u003e WeekDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "MainWindow *-down-\u003e CategoryPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "CategoryPanel -down-\u003e CategoryBox"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "onglijin"
        },
        "content": "CategoryBox -down-\u003e TaskBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "onglijin"
        },
        "content": "CategoryPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "CategoryBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "onglijin"
        },
        "content": "WeekDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "TaskBox --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "onglijin"
        },
        "content": "TaskBox ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "onglijin": 13,
      "-": 48
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "title: Ace CS2103/T"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-T14-4/tp/branch/master/graph/badge.svg)](https://codecov.io/AY2021S1-CS2103-T14-4/tp/)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Ace 2103/T is a **desktop app for managing task requirements of CS2103/T, optimized for use via Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Ace 2103/T can get your learning tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* If you are interested in using Ace CS2103/T, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* If you are interested about developing Ace CS2103/T, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "**Documentation**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [Homepage](https://ay2021s1-cs2103-t14-4.github.io/tp/)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [AboutUs](https://ay2021s1-cs2103-t14-4.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [UserGuide](https://ay2021s1-cs2103-t14-4.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* [DeveloperGuide](https://ay2021s1-cs2103-t14-4.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "onglijin": 2,
      "-": 10
    }
  },
  {
    "path": "docs/team/onglijin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "title: Ong Li Jin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "## Project: Ace CS2103/T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Ace CS2103/T is a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Code contributed**: [RepoSense_link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003donglijin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Refactoring**: Refactored the code to introduce new classes for all components of Task under Model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * What it does: Allows each component of task to have its own class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Justification: This allows test code to be written in a way that each component can be tested independently and for the behaviour of the component to be contained within the class and be unknown to the public."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Highlights: This enhancement affects the Task class and all existing commands and commands to be added in the future. It required an in-depth analysis of the existing code. The implementation was challenging as it required changes to most of the exisitng files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **UI**: Added the UI components to display the week number as well as command feedback [\\#86](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/86)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * What it does: Allows the logic to display the week number as well as command feedback in the components"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Justification: The UI components are needed for the application to looked as planed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Updated quick start of the documentation [\\#5](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/5)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Added documentation for the features `delete` and `exit` [\\#5](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/5)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Updated FAQ section of the documentation and the command summary [\\#5](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/5), [\\#46](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/46)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Update user guide to fix inconsistencies and errors [\\#213](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/213), [\\#214](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/214), [\\#215](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/215)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Updated the UML diagram for UI component and the description under UI.java [\\#127](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/127)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Updated the user stories [\\#50](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/50), [\\#153](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/153)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Contributed to the instruction for manual testing [\\#320](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/320)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * Necessary general code enhancement:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Renaming the product [\\#5](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/5), [\\#47](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/47)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    * Changing the product icon [\\#86](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/86)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * Enabled assertions in team repo [\\#118](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/118)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * Fixed CI errors [\\#275](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/275)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "onglijin"
        },
        "content": "  * PRs reviewed : [\\#7](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/7), [\\#103](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/103), [\\#131](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/131)"
      }
    ],
    "authorContributionMap": {
      "onglijin": 43
    }
  },
  {
    "path": "docs/team/perpetual09.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "title: Gao Gui\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "## Project: Ace CS2103/T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Ace CS2103/T is a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "Given below are my contributions to the project:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dPerpetual09\u0026tabRepo\u003dAY2021S1-CS2103-T14-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* **UI components**: In charge of most UI components including creation, bug shooting, maintenance, etc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Justification: The UI components are important in a project as it will affect user experience"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Category box: To show the category label for each panel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#75](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/75))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t* Category panel: To display all the tasks that belong to the specific week and corresponding categories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#75](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/75))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t* Task box: To display necessary information such as description, deadline, remark, etc. for a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#75](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/75))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t* Feedback box: Allow users to see the status (success or fail) for a command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#141](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/141))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* **UI design**: In charge of design for UI components."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Justification: The design of UI will have a huge influence on the first impression of users on the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t* Example of related pull requests:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#97](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/97)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#103](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/103)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#159](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/159))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "* **Testing code**: Participate in writing testing code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Justification: Testing code can help to find out bugs in the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t* Example of related pull requests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#232](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/232))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Added documentation for the features `help` `add`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#11](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/11))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Updated Ui picture of the application"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    (Pull requests [#264](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/264))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Add Help instruction and Non-functional requirements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#32](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/32))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\t* Update the implmented and ongoing Ui enhancement in the developer guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Pull requests [#131](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/131))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  * Review/mentoring contributions:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  (Pull requests [#146](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/146)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  (Pull requests [#138](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/138)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  (Pull requests [#105](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/105)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  (Pull requests [#104](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/104))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  * Contributions beyond the project team:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Helping others:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Issue [#108](https://github.com/nus-cs2103-AY2021S1/forum/issues/108))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Issue [#147](https://github.com/nus-cs2103-AY2021S1/forum/issues/147))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Issue [#86](https://github.com/nus-cs2103-AY2021S1/forum/issues/86))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    * Technical Leadership:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Issue [#5](https://github.com/nus-cs2103-AY2021S1/forum/issues/5))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\t(Issue [#149](https://github.com/nus-cs2103-AY2021S1/forum/issues/149))"
      }
    ],
    "authorContributionMap": {
      "onglijin": 2,
      "Perpetual09": 61
    }
  },
  {
    "path": "docs/team/unicornjin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "title: Jin Yuze\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "## Project: Ace CS2103/T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Ace CS2103/T is a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* **Code contributed**: [RepoSense_link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dUnicornJin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dUnicornJin\u0026zR\u003dAY2021S1-CS2103-T14-4%2Ftp%5Bmaster%5D\u0026zACS\u003d261.9682120869456\u0026zS\u003d2020-08-14\u0026zFS\u003d\u0026zU\u003d2020-11-07\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* **Command Parsers**: Parse user input into executable commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * What it does: Understand user input and give command to logic manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Justification: This is the start of every command, the parser provide following logic components clear and valid commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Highlights: To complete this part, the parser should know what the other parts really need and face variation of user input to provide clear and valid commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "  * User Guide: [\\commit](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/161)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Update the detailed input format of each command, include:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "      * Give command keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "      * Give command explanations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "      * Give command parameters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "      * Give command examples."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Updated the UML diagram for Logical component [\\commit](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/138)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Updated the use cases [\\commit](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/33)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "  * General Code Enhancement:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Unit Tests of parser part [\\commit](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/239)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    * Fix logical bugs [\\commit](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/100)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "* **Contributions beyond the project team**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "  * Bug reports to other teams: [\\link](https://github.com/UnicornJin/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 37
    }
  },
  {
    "path": "docs/team/xia-liyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "title: Xia Liyi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "## Project: Ace CS2103/T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Ace CS2103/T is a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Code contributed**: [RepoSense_link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dT14\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dXIA-LIYI\u0026tabRepo\u003dAY2021S1-CS2103-T14-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Model Component**: Added Model Component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * What it does: In charge of most Model components including creation, bug shooting, maintenance, etc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Justification: The Model component is the foundation of the whole application. Any other components should be based on a good and effective design of model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Task, TaskList, UiTaskList: Task is basic unit of operation. TaskList is a container of all tasks. UiTaskList is a container of tasks to be displayed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    (Pull Request [#57](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/57) [#73](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/73))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * ModelManager: It is an interface for other components to access model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    (Pull Request [#80](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/80))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Storage Component**: Added Storage Component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * What it does: In charge of Storage component including creation, bug shooting, maintenance, etc."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Justification: The Storage component is to store user\u0027s data (tasks) and preferences. A good Storage component ensures the user data can be written and read back correctly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Highlight: It uses Json to be data type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Related Pull Request: [#73](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/73)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **UI Component**: Helped UI Component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * What it does: Helped UI team add some features, i.e. Progress Bar, add CSS file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Justification: These features can make UI look better which benefits the users."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Related Pull Request: [#145](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/145) [#157](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/157)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Added the documentation for `find` and `list`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Added Model part and its diagram to elaborate the working flow of Model component."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Added Storage part and its diagram to elaborate the working flow of Storage component."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    * Example of Pull Request: [#135](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/135)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * Cleaned the code to pass CI for several times: Pull Requests [#91](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/91) [#94](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/94) [#240](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/240)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * Helped teammates to debug the code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * Added the test code: Pull Request [#222](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/222)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  * Bugs reported to other teams: [\\link](https://github.com/XIA-LIYI/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 46
    }
  },
  {
    "path": "docs/team/zhang-yunjie.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "title: Zhang Yunjie\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "## Project: Ace CS2103/T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Ace CS2103/T is a desktop task manager application used for keeping track of tasks for CS2103/T Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Code contributed**: [RepoSense_link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dzhang-yunjie\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Logic Component**: Add and modify classes for all commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * What it does: Specify logic for creation of each valid command and expected behavior."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Justification: It works together with relevant parser classes and model classes to operate commands on sample task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Related Pull Request: [#85](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/85), [#151](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/151),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    [#168](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/168)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Model Component**: Modify classes under Model Components"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * What I did: Modify and refactor model components to comply with design of logic component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Justification: Model Component provides the basic functions for interactions between objects, which are used in design of Logic Component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Related Pull Request: [#85](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/85), [#104](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/104)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Sample Data**: Modify sample data to simulate actual task data of CS2103/T module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * What it does: Be loaded as the initial list of tasks when the app opens."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Justification: To simulate the actual scenario of using the app for the target users."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Related Pull Request: [#162](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/162)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Exception handling**: Add exceptions with meaningful content to warn users of invalid input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * What it does: Return meaningful exception messages when user input is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Justification: To notify users what is wrong in their input and provide correct input format as reference."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Related Pull Request: [#168](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/168),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    [#217](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/217),[#218](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/218)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Add and modify the documentation for commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    * Related Pull Request: [#18](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/18),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        [#52](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/52),[#99](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/99),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        [#168](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/168)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "   * Developer Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Add value proposition and user stories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Update architecture diagram."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      * Related Pull Request: [#18](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/18),[#151](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/151)        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Cleaned the code to pass CI : Pull Requests [#168](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/168)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Added the test code for command classes and model components: Pull Request [#245](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/245),[#260](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/260),[#262](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/262)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Debug for parts written by team mates. Pull Request [#99](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/99),[#162](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/162), [#217](https://github.com/AY2021S1-CS2103-T14-4/tp/pull/217)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "  * Bugs reported to other teams: [\\link](https://github.com/Zhang-Yunjie/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 54
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "Simply add the following to [`PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 391
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "The `address` field in `Person` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 102
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 249
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.TaskListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Ace CS2103/T ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        storage \u003d new StorageManager(taskListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Optional\u003cTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Task List\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            initialData \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            logger.info(\"The size of task list:\" + initialData.size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        logger.info(\"Starting Ace CS2103/T \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Ace CS2103/T ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 35,
      "Zhang-Yunjie": 4,
      "onglijin": 1,
      "-": 143
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 770;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1095;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 76,
      "Perpetual09": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String LOG_FILE \u003d \"acecs2103.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command. \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Please refer to user guide for a list of acceptable commands.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_WEEKLY_TASKS_LISTED \u003d \"Tasks listed for current week: week %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "Zhang-Yunjie": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets current week number based on local time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return current week number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static WeekNumber getCurrentWeekNumber() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        LocalDate currentTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        LocalDate weekOne \u003d LocalDate.of(2020, 8, 7);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int difference \u003d (int) weekOne.until(currentTime, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (difference / 7 \u003c\u003d 6) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            return new WeekNumber(Integer.toString(difference / 7 + 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else if (difference / 7 \u003c\u003d 13){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new WeekNumber(Integer.toString(difference / 7));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new WeekNumber(Integer.toString(13));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 21,
      "onglijin": 3,
      "-": 41
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UiTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    CommandResult execute(String commandText) throws"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            CommandException, ParseException, InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns the TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @see Model#getTaskList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    TaskList getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /* Returns the task list to be displayed in UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    UiTaskList getUiTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns the user prefs\u0027 task list file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "Zhang-Yunjie": 14,
      "-": 32
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.TaskListParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UiTaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    private final TaskListParser taskListParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        taskListParser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            ParseException, InvalidTaskListOperationException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Command command \u003d taskListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return model.getTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public UiTaskList getUiTaskList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return model.getUiTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return model.getTaskListFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "UnicornJin": 2,
      "Zhang-Yunjie": 11,
      "-": 58
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Adds the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: i/INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"w/WEEK_NUMBER d/DESCRIPTION c/CUSTOMISED_DEADLINE r/REMARK a/CATEGORY\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" i/0109 w/1 d/update documentation c/2020-08-15 r/check dashboard a/Ip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task with this index already exists in the task list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                                                          + \"Try another index please.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK \u003d \"Invalid task added. Consider following rules:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"1. A customised task should not have an official deadline.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"2. Index should be consistent with week number. E.g. 01201 for week 12\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public AddCommand(Task task) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!task.isValid()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public Task getTaskToAdd() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this.toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.getUiTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 toAdd.isSameTask(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 4,
      "Zhang-Yunjie": 28,
      "-": 33
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * To be modified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task List has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ClearCommand(){};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "Zhang-Yunjie": 4,
      "onglijin": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.ModelException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Modified deadline for the task %1$s.\\n Customized deadline set to:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \": Set customised deadline for the task identified by the index number.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: i/INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"c/CUSTOMISED_DEADLINE (in the form of YYYY-MM-DD, note the boundary for year, months, days)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Note that customised deadline set CANNOT be later than official deadline if the task if NOT overdue.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" i/0101 c/2020-08-25\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final CustomizedDeadline newDeadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code DeadlineCommand} with given index and newDeadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public DeadlineCommand(Index targetIndex, CustomizedDeadline newDeadline) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(newDeadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.newDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CustomizedDeadline getNewDeadline() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            model.deadlineTask(targetIndex, newDeadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.value) + newDeadline.value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (ModelException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof DeadlineCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            DeadlineCommand otherCommand \u003d (DeadlineCommand) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.newDeadline.equals(otherCommand.newDeadline)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 this.targetIndex.equals(otherCommand.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "UnicornJin": 11,
      "Zhang-Yunjie": 37,
      "onglijin": 7
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 0101\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: \\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList lastShownList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Index index \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Task taskToDelete \u003d lastShownList.getTask(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            model.deleteTask(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "Zhang-Yunjie": 11,
      "onglijin": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Mark a task as done as identified by the index number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Mark the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"0101\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Done Task: \\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this.targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList lastShownList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToMarkAsDone \u003d lastShownList.getTask(targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            model.markTaskAsDone(targetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskToMarkAsDone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.targetIndex.equals(((DoneCommand) other).targetIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "UnicornJin": 5,
      "Zhang-Yunjie": 54
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Edit the task identified by the index number with provided information.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: (only INDEX is compulsory)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"i/INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"w/WEEK_NUMBER (an integer in range [1,13], only for edition of customized task)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"d/DESCRIPTION (only for edition of customized task)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"c/CUSTOMISED_DEADLINE (in the form of YYYY-MM-DD)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"r/REMARK\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" i/0101 c/2020-10-12 r/new remark (for default task)\\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"edit i/0109 d/new description (for customized task)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: \\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final String MESSAGE_INVALID_EDITION \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \"Only customised deadline and remark can be changed for a default task.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"\\nTask with the input index does not exist in the task list.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \" Please try again.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK \u003d \"Invalid edition. Week number should be consistent\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            + \" with the index.\\n Please try again.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param editTaskDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList lastShownList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (lastShownList.getTask(index) \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Task taskToEdit \u003d lastShownList.getTask(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!taskToEdit.isCustomized()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (editTaskDescriptor.weekNumber !\u003d null || editTaskDescriptor.description !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_EDITION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (editTaskDescriptor.weekNumber !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                if (!(editTaskDescriptor.weekNumber.equals(taskToEdit.getWeekNumberFromIndex()))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        WeekNumber updatedWeekNumber \u003d editTaskDescriptor"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                .getWeekNumber().orElse(taskToEdit.getWeekNumber());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                .getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        CustomizedDeadline updatedCustomizedDeadline \u003d editTaskDescriptor"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                .getCustomizedDeadline().orElse(taskToEdit.getCustomizedDeadline());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Remark remark \u003d editTaskDescriptor.getRemark().orElse(taskToEdit.getRemark());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (taskToEdit instanceof Topic) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return new Topic(taskToEdit.getIndex(), updatedWeekNumber, updatedDescription,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.getOfficialDeadline(), updatedCustomizedDeadline, remark,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.isCustomized(), taskToEdit.isDone());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (taskToEdit instanceof Admin) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return new Admin(taskToEdit.getIndex(), updatedWeekNumber, updatedDescription,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.getOfficialDeadline(), updatedCustomizedDeadline, remark,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.isCustomized(), taskToEdit.isDone());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (taskToEdit instanceof TP) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return new TP(taskToEdit.getIndex(), updatedWeekNumber, updatedDescription,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.getOfficialDeadline(), updatedCustomizedDeadline, remark,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.isCustomized(), taskToEdit.isDone());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return new IP(taskToEdit.getIndex(), updatedWeekNumber, updatedDescription,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.getOfficialDeadline(), updatedCustomizedDeadline, remark,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    taskToEdit.isCustomized(), taskToEdit.isDone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        private WeekNumber weekNumber;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        private CustomizedDeadline customizedDeadline;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         * Constructor for EditTaskDescriptor."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        public EditTaskDescriptor(WeekNumber weekNumber, Description description,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                                  CustomizedDeadline customizedDeadline, Remark remark) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.customizedDeadline \u003d customizedDeadline;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            setWeekNumber(toCopy.weekNumber);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            setCustomizedDeadline(toCopy.customizedDeadline);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(//index,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    weekNumber, description, customizedDeadline, remark);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public void setWeekNumber(WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public Optional\u003cWeekNumber\u003e getWeekNumber() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return Optional.ofNullable(weekNumber);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public void setCustomizedDeadline(CustomizedDeadline customizedDeadline) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.customizedDeadline \u003d customizedDeadline;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public Optional\u003cCustomizedDeadline\u003e getCustomizedDeadline() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return Optional.ofNullable(customizedDeadline);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         * Sets {@code remark} to this object\u0027s {@code remark}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         * A defensive copy of {@code remark} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         * Returns an unmodifiable remark, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code remark} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            boolean flagWeekNumber;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            boolean flagDescription;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            boolean flagCustomizedDeadline;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            boolean flagRemark;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if ((this.weekNumber \u003d\u003d null \u0026\u0026 e.weekNumber !\u003d null)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    || (this.weekNumber !\u003d null \u0026\u0026 e.weekNumber \u003d\u003d null)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagWeekNumber \u003d false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else if (this.weekNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagWeekNumber \u003d true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagWeekNumber \u003d this.weekNumber.equals(e.weekNumber);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if ((this.customizedDeadline \u003d\u003d null \u0026\u0026 e.customizedDeadline !\u003d null)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    || (this.customizedDeadline !\u003d null \u0026\u0026 e.customizedDeadline \u003d\u003d null)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagCustomizedDeadline \u003d false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else if (this.customizedDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagCustomizedDeadline \u003d true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagCustomizedDeadline \u003d this.customizedDeadline.equals(e.customizedDeadline);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if ((this.description \u003d\u003d null \u0026\u0026 e.description !\u003d null)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    || (this.description !\u003d null \u0026\u0026 e.description \u003d\u003d null)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagDescription \u003d false;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else if (this.description \u003d\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagDescription \u003d true;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagDescription \u003d this.description.equals(e.description);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            if ((this.remark \u003d\u003d null \u0026\u0026 e.remark !\u003d null) || (this.remark !\u003d null \u0026\u0026 e.remark \u003d\u003d null)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagRemark \u003d false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else if (this.remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagRemark \u003d true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                flagRemark \u003d this.remark.equals(e.remark);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return flagCustomizedDeadline \u0026\u0026 flagDescription \u0026\u0026 flagRemark \u0026\u0026 flagWeekNumber;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 29,
      "UnicornJin": 42,
      "Zhang-Yunjie": 105,
      "onglijin": 18,
      "-": 109,
      "Perpetual09": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Ace CS2103/T Task List as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else if (!(other instanceof ExitCommand)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "UnicornJin": 10,
      "Zhang-Yunjie": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Filter the task list according to given criteria\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: w/WEEK_NUMBER(optional)  \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \" k/KEYWORD(done or pending) \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \" l/DEADLINE_TYPE(official or customised)\\n \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example:\\n filter k/done \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"filter w/1 k/done\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"filter k/pending l/official\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"filter w/11 k/pending l/official\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Filtered task list displayed according to given criteria: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final String ddlType; // optional, only for pending tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final WeekNumber weekNumber; //optional"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Creates an FilterCommand to display tasks that fulfill given criteria."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Only for display of completed tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public FilterCommand(String keyword) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!keyword.equals(\"done\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.ddlType \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.weekNumber \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Creates an FilterCommand to display tasks that fulfill given criteria."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * For display of completed tasks when week number is given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public FilterCommand(String keyword, WeekNumber weekNumber) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!keyword.equals(\"done\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.ddlType \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Creates an FilterCommand to display tasks that fulfill given criteria."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * For pending tasks with ddl type specified."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public FilterCommand(String keyword, String ddlType) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!keyword.equals(\"pending\") || (!ddlType.equals(\"official\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 !ddlType.equals(\"customised\"))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.ddlType \u003d ddlType;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.weekNumber \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Creates an FilterCommand to display tasks that fulfill given criteria."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * For pending tasks with ddl type specified and week number given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public FilterCommand(String keyword, String ddlType, WeekNumber weekNumber) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!keyword.equals(\"pending\") || (!ddlType.equals(\"official\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 !ddlType.equals(\"customised\"))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.ddlType \u003d ddlType;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        boolean isDone \u003d (keyword.equals(\"done\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        boolean byOfficialDdl \u003d (ddlType \u003d\u003d null) ? false : ddlType.equals(\"official\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.filterTasks(isDone, byOfficialDdl, weekNumber);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.getUiTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String returnMessage \u003d MESSAGE_SUCCESS + \"\\nStatus: \" + keyword;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (ddlType !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            returnMessage +\u003d (\"\\nBy: \" + ddlType + \" deadline\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (weekNumber !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            returnMessage +\u003d \"\\nDuration: week \" + weekNumber.value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        returnMessage +\u003d \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(returnMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!(other instanceof FilterCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand otherObj \u003d (FilterCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (this.ddlType \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            if (otherObj.ddlType !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                if (this.weekNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    if (otherObj.weekNumber !\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                        return keyword.equals(((FilterCommand) other).keyword);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    return keyword.equals(((FilterCommand) other).keyword)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                            \u0026\u0026 weekNumber.equals(((FilterCommand) other).weekNumber);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else if (this.weekNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            if (otherObj.weekNumber !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return keyword.equals(((FilterCommand) other).keyword)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                        \u0026\u0026 ddlType.equals(((FilterCommand) other).ddlType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return keyword.equals(((FilterCommand) other).keyword)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    \u0026\u0026 ddlType.equals(((FilterCommand) other).ddlType)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 weekNumber.equals(((FilterCommand) other).weekNumber);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 40,
      "Zhang-Yunjie": 111
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks with \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"the specified keywords (case-insensitive) in description or remark.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" submit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.findTasks(keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String feedbackMessage \u003d \"Search for tasks with keyword: \" + keyword + \" in description / remark.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(feedbackMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 keyword.equals(((FindCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 14,
      "-": 27
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \"Please refer to User Guide here: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            + \"https://github.com/AY2021S1-CS2103-T14-4/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof HelpCommand)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "UnicornJin": 9,
      "-": 18
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public HomeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber currentWeek \u003d AppUtil.getCurrentWeekNumber();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        model.listTasks(currentWeek);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                String.format(Messages.MESSAGE_WEEKLY_TASKS_LISTED, currentWeek.value) + \"\\n --\u003e\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                        + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof HomeCommand)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 5,
      "Zhang-Yunjie": 30
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks for week \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": List all tasks for the week indicated.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: WEEK_NUMBER (an integer in range [1,13])\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 7\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private final WeekNumber weekNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code ListCommand} with given Week number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public ListCommand(WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(weekNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public int getWeekNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return weekNumber.getWeekValueInt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        model.listTasks(weekNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + this.weekNumber.value + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof ListCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.weekNumber.equals(((ListCommand) other).weekNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "UnicornJin": 14,
      "Zhang-Yunjie": 13,
      "onglijin": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/UndoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Mark a task as pending as identified by the index number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \": Mark the task identified by the index number used in the displayed task list as pending.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Parameters: INDEX (0 + week number in [1,13] + two-digit task number e.g. 01205)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 0101\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Undone Task: \\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public UndoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this.targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList lastShownList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToMarkAsPending \u003d lastShownList.getTask(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            model.markTaskAsPending(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskToMarkAsPending));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof UndoneCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.targetIndex.equals(((UndoneCommand) other).targetIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "UnicornJin": 5,
      "Zhang-Yunjie": 55
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_CUSTOMIZED_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_WEEK_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public AddCommand parse(String args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_WEEK_NUMBER, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                        PREFIX_CUSTOMIZED_DEADLINE, PREFIX_REMARK, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                PREFIX_WEEK_NUMBER, PREFIX_DESCRIPTION, PREFIX_CUSTOMIZED_DEADLINE, PREFIX_CATEGORY)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String index \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Index indexObject \u003d new Index(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int weekNumber \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ParserUtil.parseWeekNumber(argMultimap.getValue(PREFIX_WEEK_NUMBER).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        WeekNumber weekNumberObject \u003d new WeekNumber(Integer.toString(weekNumber));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String description \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Description descriptionObject \u003d new Description(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        LocalDate customizedDeadline \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ParserUtil.parseCustomizedDeadline(argMultimap.getValue(PREFIX_CUSTOMIZED_DEADLINE).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        CustomizedDeadline customizedDeadlineObject \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new CustomizedDeadline(customizedDeadline.toString(), customizedDeadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String remark \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Remark remarkObject \u003d new Remark(remark);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskCategory category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (category.equals(TaskCategory.ADMIN)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            Admin admin \u003d new Admin(indexObject, weekNumberObject, descriptionObject, null,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    customizedDeadlineObject, remarkObject, true, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new AddCommand(admin);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else if (category.equals(TaskCategory.TOPIC)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            Topic topic \u003d new Topic(indexObject, weekNumberObject, descriptionObject, null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    customizedDeadlineObject, remarkObject, true, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new AddCommand(topic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else if (category.equals(TaskCategory.IP)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            IP ip \u003d new IP(indexObject, weekNumberObject, descriptionObject, null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    customizedDeadlineObject, remarkObject, true, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new AddCommand(ip);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else if (category.equals(TaskCategory.TP)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            TP tp \u003d new TP(indexObject, weekNumberObject, descriptionObject, null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    customizedDeadlineObject, remarkObject, true, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new AddCommand(tp);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Task task \u003d new Task(indexObject, weekNumberObject, descriptionObject, null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                customizedDeadlineObject, remarkObject, true, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e !argumentMultimap.getValue(prefix).get().equals(\"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 27,
      "UnicornJin": 23,
      "Zhang-Yunjie": 4,
      "onglijin": 26,
      "-": 28
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return values.isEmpty() ? Optional.of(\"\") : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "UnicornJin": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 146
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static final Prefix PREFIX_WEEK_NUMBER \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMIZED_DEADLINE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static final Prefix PREFIX_DDLTYPE \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "UnicornJin": 7,
      "onglijin": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_CUSTOMIZED_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeadlineCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an DeadlineCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_CUSTOMIZED_DEADLINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_CUSTOMIZED_DEADLINE)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        String indexParsed \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        Index index \u003d new Index(indexParsed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        LocalDate customizedDeadline \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ParserUtil.parseCustomizedDeadline(argMultimap.getValue(PREFIX_CUSTOMIZED_DEADLINE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new DeadlineCommand(index, new CustomizedDeadline(customizedDeadline.toString(), customizedDeadline));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e !argumentMultimap.getValue(prefix).get().equals(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 20,
      "Zhang-Yunjie": 20,
      "onglijin": 5
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            String indexParsed \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            Index index \u003d new Index(indexParsed);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "onglijin": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an DoneCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            String indexParsed \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            Index index \u003d new Index(indexParsed);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 21,
      "Zhang-Yunjie": 1
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.logic.parser.ParserUtil.parseWeekNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_WEEK_NUMBER, CliSyntax.PREFIX_INDEX,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                        CliSyntax.PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                        CliSyntax.PREFIX_CUSTOMIZED_DEADLINE, CliSyntax.PREFIX_REMARK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            String indexParsed \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            index \u003d new Index(indexParsed);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get().equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            int weekNumberParsed \u003d parseWeekNumber(argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            editTaskDescriptor.setWeekNumber(new WeekNumber(Integer.toString(weekNumberParsed)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION).get().equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            String descriptionParsed \u003d ParserUtil.parseDescription("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            editTaskDescriptor.setDescription(new Description(descriptionParsed));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_CUSTOMIZED_DEADLINE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_CUSTOMIZED_DEADLINE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_REMARK).get().equals(\"\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            String remarkParsed \u003d ParserUtil.parseRemark(argMultimap.getValue(CliSyntax.PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            editTaskDescriptor.setRemark(new Remark(remarkParsed));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "UnicornJin": 10,
      "Zhang-Yunjie": 2,
      "onglijin": 19,
      "-": 33
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_DDLTYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.logic.parser.CliSyntax.PREFIX_WEEK_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        args, CliSyntax.PREFIX_WEEK_NUMBER, CliSyntax.PREFIX_KEYWORD, CliSyntax.PREFIX_DDLTYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!anyPrefixPresent(argMultimap,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                PREFIX_WEEK_NUMBER, PREFIX_KEYWORD, PREFIX_DDLTYPE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get().equals(\"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get().equals(\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new FilterCommand(argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get().equals(\"\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get().equals(\"\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new FilterCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new WeekNumber(argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get().equals(\"\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get().equals(\"\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new FilterCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get().equals(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get().equals(\"\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new FilterCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    argMultimap.getValue(CliSyntax.PREFIX_DDLTYPE).get(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new WeekNumber(argMultimap.getValue(CliSyntax.PREFIX_WEEK_NUMBER).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new FilterCommand(argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns true if any of the prefixes does not contain empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private static boolean anyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e !argumentMultimap.getValue(prefix).get().equals(\"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 27,
      "UnicornJin": 27,
      "Zhang-Yunjie": 19
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        assert !trimmedArgs.isEmpty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new FindCommand(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "UnicornJin": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 17
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (trimmedArgs.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        assert !trimmedArgs.equals(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        int weekNumber \u003d ParserUtil.parseWeekNumber(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!WeekNumber.isValidWeekNumber(Integer.toString(weekNumber))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(ParserUtil.MESSAGE_INVALID_WEEKNUMBER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return new ListCommand(new WeekNumber(Integer.toString(weekNumber)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 19,
      "Zhang-Yunjie": 7,
      "onglijin": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    T parse(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEKNUMBER \u003d \"Invalid week number. Week number cannot be empty, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"and can only take integer value in range [1,13].\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Please try again!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE \u003d \"Invalid deadline format. A deadline should be in \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"the form of YYYY-MM-DD.\\nNote boundary for year, month and days.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"E.g. 2020-15-0 is an invalid deadline. \\nPlease try again!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"Invalid category format. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"There are only 4 categories for CS2103/T tasks: \\n Ip / Tp / Topic / Admin\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"Note the capitalisation. \\nPlease try again!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"Invalid type. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"\\nPlease try again!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_MISSING_WEEKNUMBER \u003d \"Week number is missing in your command. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"\\nPlease try again!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static String parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        requireNonNull(oneBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_WEEKNUMBER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return trimmedIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses a week number."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param weekNumber"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static int parseWeekNumber(String weekNumber) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(weekNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        String trimmedWN \u003d weekNumber.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (trimmedWN.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_WEEKNUMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            Integer.parseInt(trimmedWN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_WEEKNUMBER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!WeekNumber.isValidWeekNumber(trimmedWN)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_WEEKNUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return Integer.parseInt(trimmedWN);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses a description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static String parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String trimmedDes \u003d description.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return trimmedDes;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses official deadline."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param officialDeadline"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static LocalDate parseOfficialDeadline(String officialDeadline) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(officialDeadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        String trimmedDeadline \u003d officialDeadline.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        LocalDate result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            result \u003d LocalDate.parse(trimmedDeadline);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DEADLINE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses a customized deadline."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param customizedDeadline"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static LocalDate parseCustomizedDeadline(String customizedDeadline) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(customizedDeadline);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        String trimmedDeadline \u003d customizedDeadline.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        LocalDate result;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            result \u003d LocalDate.parse(trimmedDeadline);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DEADLINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses remark."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static String parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String trimmedDes \u003d remark.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return trimmedDes;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses a type."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static String parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (trimmedType.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return trimmedType;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Parses a category."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public static TaskCategory parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case \"Admin\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return TaskCategory.ADMIN;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case \"Topic\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return TaskCategory.TOPIC;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case \"Ip\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return TaskCategory.IP;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case \"Tp\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return TaskCategory.TP;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 40,
      "UnicornJin": 55,
      "Zhang-Yunjie": 35,
      "onglijin": 14,
      "-": 17
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (otherPrefix.getPrefix() \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            if (getPrefix() \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "UnicornJin": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/TaskListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class TaskListParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case UndoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new UndoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 18,
      "UnicornJin": 22,
      "Zhang-Yunjie": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/UndoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class UndoneCommandParser implements Parser\u003cUndoneCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoneCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * and returns an UndoneCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "     * @throws ParseException if the user input is not in correct format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public UndoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            String indexParsed \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            Index index \u003d new Index(indexParsed);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return new UndoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UndoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 21,
      "Zhang-Yunjie": 1
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.ModelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Returns the user prefs\u0027 task list file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the user prefs\u0027 task list file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void setTaskListFilePath(Path taskListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Replaces task list data with the data in {@code taskList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void setTaskList(TaskList taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /** Returns the TaskList */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    TaskList getTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * {@code target} must exist in the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing task in the task list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Adds task into task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task is customized."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    boolean isCustomizedTask(Index index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Deletes one task out of task list with given index."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void deleteTask(Index index) throws ModelException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark one task out of task list with given index as done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void markTaskAsDone(Index index) throws ModelException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark one task out of task list with given index as pending."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void markTaskAsPending(Index index) throws ModelException;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Finds tasks based on given keyword."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void findTasks(String keyword);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Lists tasks in certain week."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void listTasks(WeekNumber weekNumber);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Lists tasks in certain week."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void filterTasks(boolean isDone, boolean byOfficialDeadline, WeekNumber weekNumber);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets a customized deadline to a certain."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param index is the index of task we want to set a deadline to."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param deadline is a customized deadline."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void deadlineTask(Index index, CustomizedDeadline deadline)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throws ModelException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets  a ui task list for displaying."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    UiTaskList getUiTaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    ObservableList\u003cTask\u003e getAdminList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    ObservableList\u003cTask\u003e getTopicList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    ObservableList\u003cTask\u003e getIpList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    ObservableList\u003cTask\u003e getTpList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 44,
      "Zhang-Yunjie": 35,
      "-": 58
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.ModelException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final UiTaskList uiTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a ModelManager with the given taskList and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ModelManager(TaskList taskList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        CollectionUtil.requireAllNonNull(taskList, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        logger.fine(\"Initializing with task list: \" + taskList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.uiTaskList \u003d new UiTaskList(this.taskList.getUiTaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        logger.info(\"The size of uitasklist is: \" + this.uiTaskList.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a ModelManager."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        logger.info(\"The size of tasklist is: \" + taskList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.uiTaskList \u003d new UiTaskList(taskList.getUiTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return userPrefs.getTaskListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        userPrefs.setTaskListFilePath(taskListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskList.resetData(taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        boolean result \u003d taskList.hasTask(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        uiTaskList.addAll(taskList.add(task));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean isCustomizedTask(Index index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return taskList.isCustomizedTask(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void deleteTask(Index index) throws ModelException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            uiTaskList.addAll(taskList.delete(index));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskListOperationException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ModelException(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void markTaskAsDone(Index index) throws ModelException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        uiTaskList.addAll(taskList.done(index));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void markTaskAsPending(Index index) throws ModelException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        uiTaskList.addAll(taskList.undone(index));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void filterTasks(boolean isDone, boolean byOfficialDeadline, WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        uiTaskList.addAll(taskList.filter(isDone, byOfficialDeadline, weekNumber));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void findTasks(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        uiTaskList.addAll(taskList.find(keyword));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    };"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void listTasks(WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        uiTaskList.addAll(taskList.list(weekNumber));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    };"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void deadlineTask(Index index, CustomizedDeadline deadline) throws"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            ModelException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            uiTaskList.addAll(taskList.deadline(index, deadline));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskListOperationException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new ModelException(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        uiTaskList.addAll(taskList.resetTask(target, editedTask));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    };"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UiTaskList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public UiTaskList getUiTaskList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return uiTaskList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getAdminList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return uiTaskList.getAdminList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getTopicList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return uiTaskList.getTopicList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getIpList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return uiTaskList.getIpList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getTpList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return uiTaskList.getTpList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (!(other instanceof ModelManager)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return userPrefs.equals(((ModelManager) other).userPrefs)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    \u0026\u0026 taskList.equals(((ModelManager) other).taskList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 68,
      "Zhang-Yunjie": 54,
      "onglijin": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.AppUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskOperationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private WeekNumber timeRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a {@code TaskList} with given task list and time range."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskList is given task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param timeRange is given time range."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList, WeekNumber timeRange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a {@code TaskList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.timeRange \u003d AppUtil.getCurrentWeekNumber();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a {@code TaskList} with a given task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        resetData(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Resets the task list with given new data."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param newData is a {@code TaskList}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void resetData(TaskList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList \u003d newData.getTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        timeRange \u003d newData.getTimeRange();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets a array list consisting of all tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return an ArrayList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets time range."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a int of time range."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public WeekNumber getTimeRange() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return timeRange;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets a time range for task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param weekNumber is new time range."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void setTimeRange(WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        timeRange \u003d weekNumber;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task is already inside list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param task is what we want we check."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return true if it is already inside task and false if not."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        for (Task i : taskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (i.isSameTask(task)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Finds a certain task based on index."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @return a task with the required index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Task getTask(Index index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            //index is stored as String in task object,// so a conversion from string to int is needed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            if (task.getIndex().equals(index)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Finds tasks based on existing timeRange."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a ArrayList consisting of all satisfied tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e find() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.isWeekX(timeRange)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                newList.add(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Finds tasks based on new keyWord."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param keyWord is new keyword given by user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new ArrayList to display."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyWord) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.contains(keyWord)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                newList.add(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Filter the task list based on criteria given."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param isDone is the boolean value to describe if filter criteria is to display done tasks only"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param byOfficialDeadline is the boolean value to describe"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *                           if filter criteria is to display pending tasks by official deadline"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param weekNumber is the int value to describe the week number of the tasks to be displayed(optional)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @return a new ArrayList to display."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(boolean isDone, boolean byOfficialDeadline, WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ArrayList\u003cTask\u003e additionalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (weekNumber !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            newList \u003d list(weekNumber);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        for (Task task : newList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (task.isDone() \u003d\u003d isDone) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                additionalList.add(task);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (byOfficialDeadline) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                Collections.sort(additionalList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                Collections.sort(additionalList, (o1, o2) -\u003e {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    Deadline ddl1 \u003d (o1.getCustomizedDeadline() !\u003d null)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                            ? o1.getCustomizedDeadline() : o1.getOfficialDeadline();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    Deadline ddl2 \u003d (o2.getCustomizedDeadline() !\u003d null)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                            ? o2.getCustomizedDeadline() : o2.getOfficialDeadline();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    int result \u003d ddl1.compareTo(ddl2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return additionalList;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Finds all of tasks in certain week."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param weekNumber A valid week number."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a array list consisting of all satisfied tasks."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public ArrayList\u003cTask\u003e list(WeekNumber weekNumber) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        timeRange \u003d weekNumber;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.isWeekX(weekNumber)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                newList.add(task);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes a task list by adding a task."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param task A valid task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e initialize(Task task) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Adds a task to task list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e add(Task task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        timeRange \u003d task.getWeekNumber();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the certain task is customized."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskIndex A valid task index,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean isCustomizedTask(Index taskIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.hasIndex(taskIndex)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return task.isCustomized();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Deletes a certain task."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskIndex A valid task index."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public ArrayList\u003cTask\u003e delete(Index taskIndex) throws InvalidTaskListOperationException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.hasIndex(taskIndex)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (i \u003d\u003d taskList.size()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new InvalidTaskListOperationException("
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    \"The task that you want to delete does not exist in the task list.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (task.isCustomized()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            taskList.remove(i);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return find();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        throw new InvalidTaskListOperationException(\"The task is default task which can not be deleted.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param taskIndex A valid task index."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e done(Index taskIndex) throws InvalidTaskListOperationException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (task.hasIndex(taskIndex)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!task.isDone()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            timeRange \u003d task.getWeekNumber();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return find();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        throw new InvalidTaskListOperationException(\"The task is already marked as done.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark a task as pending."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param taskIndex A valid task index."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e undone(Index taskIndex) throws InvalidTaskListOperationException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            if (task.hasIndex(taskIndex)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            task.markAsPending();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return find();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        throw new InvalidTaskListOperationException(\"The task is already marked as done.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets a deadline to a certain task."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskIndex A valid task index."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e deadline(Index taskIndex, CustomizedDeadline deadline)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throws InvalidTaskListOperationException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        boolean foundTask \u003d false;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            for (Task task: taskList) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                if (task.hasIndex(taskIndex)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    task.setDeadline(deadline);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    foundTask \u003d true;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new InvalidTaskListOperationException(e.getMessage());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!foundTask) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            throw new InvalidTaskListOperationException("
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    \"The task that you want to set deadline to is not found in the task list.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Edits a certain task."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param target Target task."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param newTask New task."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new array list after find()."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e resetTask(Task target, Task newTask) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        requireNonNull(newTask);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        timeRange \u003d newTask.getWeekNumber();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        int index \u003d taskList.indexOf(target);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        taskList.set(index, newTask);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Fetches a task list with current key word and time range."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @return a new array list."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cTask\u003e getUiTaskList() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return find();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the size of task list."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 taskList.equals(((TaskList) other).taskList));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 240,
      "UnicornJin": 8,
      "Zhang-Yunjie": 127,
      "onglijin": 13
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/UiTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class UiTaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ObservableList\u003cTask\u003e adminList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ObservableList\u003cTask\u003e topicList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ObservableList\u003cTask\u003e ipList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ObservableList\u003cTask\u003e tpList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private ArrayList\u003cTask\u003e combinedTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code UiTaskList} with given source."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param source A array list consisting of tasks which need to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public UiTaskList(ArrayList\u003cTask\u003e source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        addAll(source);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Clears four sub lists first and dds all tasks of {@code taskList} into sub lists based on category of each task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskList A array list consisting of tasks which need to be added to {@code UiTaskList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void addAll(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        combinedTaskList \u003d taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        adminList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        topicList.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ipList.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        tpList.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (TaskCategory.isAdmin(task.getCategory())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                adminList.add((Admin) task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } else if (TaskCategory.isTopic(task.getCategory())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                topicList.add((Topic) task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } else if (TaskCategory.isIP(task.getCategory())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ipList.add((IP) task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } else if (TaskCategory.isTP(task.getCategory())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                tpList.add((TP) task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Gets a list consisting of all tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public ArrayList\u003cTask\u003e getCombinedTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return combinedTaskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets a list consisting of all admin tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getAdminList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return adminList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets a list consisting of all ip tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getIpList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return ipList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets a list consisting of all tp tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getTpList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return tpList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets a list consisting of all topic tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ObservableList\u003cTask\u003e getTopicList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return topicList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the number of tasks which need to be displayed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return adminList.size() + ipList.size() + tpList.size() + topicList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAdminWeekRange() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (adminList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMinWeekNumber(adminList));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMaxWeekNumber(adminList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cInteger\u003e getTopicWeekRange() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (topicList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMinWeekNumber(topicList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMaxWeekNumber(topicList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cInteger\u003e getTpWeekRange() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (tpList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMinWeekNumber(tpList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMaxWeekNumber(tpList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ArrayList\u003cInteger\u003e getIpWeekRange() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (ipList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMinWeekNumber(ipList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        res.add(getMaxWeekNumber(ipList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Gets the largest week number of all tasks to be displayed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public int getMaxWeekNumber(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        int weekNumber \u003d -1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            if (task.getWeekNumber().getWeekValueInt() \u003e weekNumber) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                weekNumber \u003d task.getWeekNumber().getWeekValueInt();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        assert weekNumber !\u003d -1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        return weekNumber;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Gets the smallest week number of all tasks to be displayed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public int getMinWeekNumber(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        int weekNumber \u003d 10000;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            if (task.getWeekNumber().getWeekValueInt() \u003c weekNumber) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                weekNumber \u003d task.getWeekNumber().getWeekValueInt();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        assert weekNumber !\u003d 10000;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        return weekNumber;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 122,
      "Zhang-Yunjie": 12,
      "onglijin": 4,
      "Perpetual09": 22
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\" , \"tasklist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        setTaskListFilePath(newUserPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 taskListFilePath.equals(o.taskListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return Objects.hash(guiSettings, taskListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/exceptions/InvalidTaskListOperationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents an exception for invalid task list operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class InvalidTaskListOperationException extends ModelException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String ERR_MSG \u003d \"Sorry! Your command operation is not valid.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public InvalidTaskListOperationException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(ERR_MSG);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public InvalidTaskListOperationException(String errMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(ERR_MSG + \" \" + errMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 16
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/exceptions/InvalidTaskOperationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class InvalidTaskOperationException extends ModelException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String ERR_MSG \u003d \"Sorry! Your command operation is not valid.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public InvalidTaskOperationException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(ERR_MSG);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public InvalidTaskOperationException(String errMsg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(ERR_MSG + \" \" + errMsg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 13
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/exceptions/ModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a general model exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class ModelException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String ERR_MSG \u003d \"There is something wrong with model.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ModelException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(ERR_MSG);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public ModelException(String errMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 16
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Admin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a Admin task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class Admin extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code Admin} task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Admin(Index index, WeekNumber weekNumber, Description description,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                 OfficialDeadline officialDeadline,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                 CustomizedDeadline customizedDeadline, Remark remark, boolean isCustomized, boolean doneStatus) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(index, weekNumber, description, officialDeadline, customizedDeadline, remark, isCustomized, doneStatus);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskCategory getCategory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return TaskCategory.ADMIN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 17,
      "Zhang-Yunjie": 2,
      "onglijin": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/CustomizedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents a Task\u0027s official deadline in the task manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class CustomizedDeadline extends Deadline {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Constructs an {@code OfficialDeadline}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param customizedDeadline A valid customized deadline in String form."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param timeInfo A valid customized deadline in LocalTime form."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public CustomizedDeadline(String customizedDeadline, LocalDate timeInfo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(customizedDeadline, timeInfo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof CustomizedDeadline)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.value.equals(((CustomizedDeadline) other).value)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 this.timeInfo.equals(((CustomizedDeadline) other).timeInfo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 10,
      "Zhang-Yunjie": 9,
      "onglijin": 11
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.AppParameters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \"Deadlines should be of the format of \u0027YYYY-MM-DD\u0027 and be consists of only numbers and \u0027-\u0027s. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    + \"Range of dates is allowed from \u00272000-01-01\u0027 to \u00272099-12-31\u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^19|20\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public final LocalDate timeInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Constructs an {@code OfficialDeadline}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Deadline(String deadline, LocalDate timeInfo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            requireNonNull(deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.value \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.timeInfo \u003d timeInfo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns true if a given string is a valid official deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return value.contains(keyword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public LocalDate getTimeInfo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return timeInfo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public int compareTo(Deadline deadline) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this.timeInfo.compareTo(deadline.getTimeInfo());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 10,
      "Zhang-Yunjie": 49
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents a Task\u0027s description in the task manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    // TODO: Message Constraints?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return value.contains(keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof Description)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.value.equals(other.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 7,
      "Zhang-Yunjie": 1,
      "onglijin": 32
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/IP.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a IP task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class IP extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code IP} task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public IP(Index index, WeekNumber weekNumber,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "          Description description, OfficialDeadline officialDeadline,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "          CustomizedDeadline customizedDeadline, Remark remark, boolean isCustomized, boolean doneStatus) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(index, weekNumber, description, officialDeadline, customizedDeadline, remark, isCustomized, doneStatus);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskCategory getCategory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return TaskCategory.IP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 16,
      "Zhang-Yunjie": 2,
      "onglijin": 3
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents a Task\u0027s name in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIndex(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            \"Your index format is wrong. Indexes should always start with 0, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + \"only contain numbers, be at least 4 digits long and should not be blank.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + \"E.g. 0101: first task of week 1\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + \"01314: 14th task of week 13\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *  The first character of the index must be a \u00270\u0027,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     *  followed by a number from \u00271\u0027 to \u00279\u0027 and a number from \u00270\u0027 to \u00279\u0027,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *  with any number of \u00270\u0027 to \u00279\u0027 padded behind."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\A[0][1-9][0-9][0-9]+\\\\z\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs a {@code Index}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param index A valid index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Index(String index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        checkArgument(isValidIndex(index), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        value \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Returns true if a given string is a valid index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static boolean isValidIndex(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                || (other instanceof Index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                \u0026\u0026 value.equals(((Index) other).value));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 6,
      "onglijin": 50
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/OfficialDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents a Task\u0027s official deadline in the task manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class OfficialDeadline extends Deadline {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs an {@code OfficialDeadline}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param officialDeadline A valid official deadline in String form."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * @param timeInfo A valid official deadline in LocalTime form."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public OfficialDeadline(String officialDeadline, LocalDate timeInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(officialDeadline, timeInfo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof OfficialDeadline)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.value.equals(((OfficialDeadline) other).value)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 this.timeInfo.equals(((OfficialDeadline) other).timeInfo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 11,
      "Zhang-Yunjie": 7,
      "onglijin": 18
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents a Task\u0027s description in the task manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Guarantees: immutable;}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param remark A valid description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return value.contains(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof Remark)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.value.equals(((Remark) other).value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 6,
      "Zhang-Yunjie": 7,
      "onglijin": 25
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/TP.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a TP task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TP extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public TP(Index index, WeekNumber weekNumber,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "              Description description, OfficialDeadline officialDeadline,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "              CustomizedDeadline customizedDeadline, Remark remark, boolean isCustomized, boolean doneStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(index, weekNumber, description, officialDeadline, customizedDeadline, remark, isCustomized, doneStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskCategory getCategory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return TaskCategory.TP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 13,
      "Zhang-Yunjie": 2,
      "onglijin": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a general task in Ace CS2103/T."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Task.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private WeekNumber weekNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private OfficialDeadline officialDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private CustomizedDeadline customizedDeadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private TaskCategory category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private boolean customized;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private boolean doneStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code Task} with given details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Task(Index index, WeekNumber weekNumber,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                Description description, OfficialDeadline officialDeadline,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                CustomizedDeadline customizedDeadline, Remark remark, boolean customized,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                boolean doneStatus) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, weekNumber, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.officialDeadline \u003d officialDeadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.customizedDeadline \u003d customizedDeadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.category \u003d TaskCategory.TASK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.customized \u003d customized;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.doneStatus \u003d doneStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the task index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Gets the week number implied by the task index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public WeekNumber getWeekNumberFromIndex() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String i \u003d index.value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String weekNumber \u003d i.length() \u003d\u003d 4 ? i.substring(1, 2) : i.substring(1, 3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new WeekNumber(weekNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the week number."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public WeekNumber getWeekNumber() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return weekNumber;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the official deadline of task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public OfficialDeadline getOfficialDeadline() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return officialDeadline;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the customized deadline of task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public CustomizedDeadline getCustomizedDeadline() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return customizedDeadline;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the remark of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets the category of the task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskCategory getCategory() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (this instanceof IP) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return TaskCategory.IP;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (this instanceof TP) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return TaskCategory.TP;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (this instanceof Topic) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return TaskCategory.TOPIC;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return TaskCategory.ADMIN;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task is customized."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean isCustomized() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return customized;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Checks whether the task is done"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return doneStatus;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task has index {@code taskIndex}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public boolean hasIndex(Index taskIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        return this.index.equals(taskIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task has customized deadline."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean hasDeadline() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return customizedDeadline !\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark the task as done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert !doneStatus;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        doneStatus \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Mark the task as pending (i.e. not done yet)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void markAsPending() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert doneStatus;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        doneStatus \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets a deadline to the task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param deadline A valid LocalDate."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setDeadline(CustomizedDeadline deadline) throws InvalidTaskOperationException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (!this.isOverdue() \u0026\u0026 deadline.compareTo(this.officialDeadline) \u003e 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new InvalidTaskOperationException(\"Customised deadline should not be later than official deadline. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + \"Please set the customised deadline to a date before or on: \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                    + this.officialDeadline);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        customizedDeadline \u003d deadline;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Check whether the task a valid task, aka if all three requirements below are met:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * 1. the official deadline is correctly set to null for a customised task;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * 2. a customised deadline is set"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * 3. index number format is consistent with the week number, eg. 01205 for a week 12 task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return (isCustomized() \u003d\u003d (officialDeadline \u003d\u003d null))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 isCustomized() \u003d\u003d (customizedDeadline !\u003d null)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                \u0026\u0026 getWeekNumber().equals(getWeekNumberFromIndex());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Check whether the task is in week {@code weekIndex}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public boolean isWeekX(WeekNumber weekIndex) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return weekNumber.equals(weekIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the description and remark of task contains certain key word."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (description !\u003d null \u0026\u0026 remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return description.value.toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return description.value.toLowerCase().contains(keyword)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                || remark.value.toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether the task is same task as {@code task}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public boolean isSameTask(Task task) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return index.equals(task.getIndex());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Checks is a task if overdue (i.e. passed ddl but have not done yet )"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (getOfficialDeadline() !\u003d null \u0026\u0026 getOfficialDeadline().getTimeInfo() !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return getOfficialDeadline().getTimeInfo().compareTo(LocalDate.now()) \u003c 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else if (getCustomizedDeadline() !\u003d null \u0026\u0026 getCustomizedDeadline().getTimeInfo() !\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return getCustomizedDeadline().getTimeInfo().compareTo(LocalDate.now()) \u003c 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public int compareTo(Task o) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Deadline ddl1 \u003d getOfficialDeadline() \u003d\u003d null ? getCustomizedDeadline() : getOfficialDeadline();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert ddl1 !\u003d null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Deadline ddl2 \u003d o.getOfficialDeadline() \u003d\u003d null ? o.getCustomizedDeadline() : o.getOfficialDeadline();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert ddl1 !\u003d null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assert ddl2 !\u003d null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return ddl1.compareTo(ddl2);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String returnString \u003d \"[Week \" + this.getWeekNumber().value + \"] \" + this.getCategory() + \" Task \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                              + this.getIndex().value + \" with description: \" + this.getDescription().value;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (officialDeadline !\u003d null) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            returnString +\u003d \"\\nOfficial deadline: \" + officialDeadline.value;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (customizedDeadline !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            returnString +\u003d \"\\nCustomized deadline: \" + customizedDeadline.value;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (remark !\u003d null) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            returnString +\u003d \"\\nRemark: \" + remark.value;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                || (other instanceof Task // instanceof handles nulls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 index.equals(((Task) other).index)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 weekNumber.equals(((Task) other).weekNumber)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u0026\u0026 description.equals(((Task) other).description));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 119,
      "UnicornJin": 11,
      "Zhang-Yunjie": 110,
      "onglijin": 17
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/TaskCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public enum TaskCategory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    ADMIN, IP, TP, TOPIC, TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Gets string based on {@code category}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static String categoryToString(TaskCategory category) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return \"Admin\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        case TOPIC:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return \"Topic\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        case IP:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return \"Ip\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        case TP:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return \"Tp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to Admin."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code TaskCategory}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isAdmin(TaskCategory category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category \u003d\u003d ADMIN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to Admin."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code String}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isStringAdmin(String category) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category.equals(\"Admin\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to Topic."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code TaskCategory}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isTopic(TaskCategory category) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category \u003d\u003d TOPIC;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to Topic."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code String}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isStringTopic(String category) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category.equals(\"Topic\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to IP."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code TaskCategory}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isIP(TaskCategory category) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category \u003d\u003d IP;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to IP."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code String}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isStringIP(String category) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category.equals(\"Ip\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to TP."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code TaskCategory}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isTP(TaskCategory category) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category \u003d\u003d TP;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Checks whether a category belongs to TP."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param category A valid {@code String}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static boolean isStringTP(String category) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return category.equals(\"Tp\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 81,
      "Zhang-Yunjie": 6
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/Topic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class Topic extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public Topic(Index index, WeekNumber weekNumber,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                 Description description, OfficialDeadline officialDeadline,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                 CustomizedDeadline customizedDeadline, Remark remark, boolean isCustomized, boolean doneStatus) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        super(index, weekNumber, description, officialDeadline, customizedDeadline, remark, isCustomized, doneStatus);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskCategory getCategory() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return TaskCategory.TOPIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 10,
      "Zhang-Yunjie": 2,
      "onglijin": 2
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/task/WeekNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Represents which week a Task falls under in the task manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Guarantees: immutable; is valid as declaredi n {@link #isValidWeekNumber(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * TODO: Check parser and all for parsing of string and integers"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class WeekNumber {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            \"Week number can only be integer in range [1,13].\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs a {@code WeekNumber}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param weekNumber A valid week number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public WeekNumber(String weekNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        requireNonNull(weekNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        checkArgument(isValidWeekNumber(weekNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        value \u003d weekNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Check if week number is valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @param test WeekNumber in String form."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @return boolean true if within 1 and 13, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public static boolean isValidWeekNumber(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        int weekNumberInteger \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return weekNumberInteger \u003e\u003d 1 \u0026\u0026 weekNumberInteger \u003c\u003d 13;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Get the int value from the WeekNumber String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * @return int value of String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public int getWeekValueInt() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (other \u003d\u003d null || !(other instanceof WeekNumber)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            return this.value.equals(other.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 4,
      "Zhang-Yunjie": 4,
      "onglijin": 56
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.OfficialDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Contains utility methods for populating {@code TaskList} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Submit pre-lecture quiz\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-17\", LocalDate.of(2020, 8, 17)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0102\"), new WeekNumber(\"1\"), new Description(\"OOP: Classes \u0026 Objects\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0103\"), new WeekNumber(\"1\"), new Description(\"Submit the pre-module survey\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0104\"), new WeekNumber(\"1\"), new Description(\"OOP Inheritance\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0105\"), new WeekNumber(\"1\"), new Description(\"OOP: Polymorphism\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0106\"), new WeekNumber(\"1\"), new Description(\"Java: Collections\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0107\"), new WeekNumber(\"1\"), new Description(\"Exception Handling\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0108\"), new WeekNumber(\"1\"), new Description(\"Set up the tools\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-14\", LocalDate.of(2020, 8, 14)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0201\"), new WeekNumber(\"2\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0202\"), new WeekNumber(\"2\"), new Description(\"SE: Intro\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Learn about the project\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0204\"), new WeekNumber(\"2\"), new Description(\"Set up prerequisites\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"0205\"), new WeekNumber(\"2\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Get connected to our communication channels\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-21\", LocalDate.of(2020, 8, 21)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0206\"), new WeekNumber(\"2\"), new Description(\"SDLC Process Models: Basics\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0207\"), new WeekNumber(\"2\"), new Description(\" Set up the project in your computer\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0208\"), new WeekNumber(\"2\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Add Increments while committing frequently\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-20\", LocalDate.of(2020, 8, 20)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0301\"), new WeekNumber(\"3\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0302\"), new WeekNumber(\"3\"), new Description(\"RCS: Branching\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0303\"), new WeekNumber(\"3\"), new Description(\"Create a PR to the upstream repo\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0304\"), new WeekNumber(\"3\"), new Description(\"Get familiar with AB3 features\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"0305\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"[CS2103 students only] Form teams during the tutorial\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0306\"), new WeekNumber(\"3\"), new Description(\"RCS: Creating Pull Requests \"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0307\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Add Increments as parallel branches: Level-7, Level-8\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0308\"), new WeekNumber(\"3\"), new Description(\"Set up a project meeting time\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0309\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Add Increments: A-MoreOOP, A-Packages, A-JUnit, A-Jar\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0310\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Add Increments as parallel branches: A-JavaDoc, A-CodingStandard, Level-9\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-08-27\", LocalDate.of(2020, 8, 27)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"0401\"), new WeekNumber(\"4\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Accept GitHub invitation from the module organization\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0402\"), new WeekNumber(\"4\"), new Description(\"Design: Models\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0403\"), new WeekNumber(\"4\"), new Description(\"Review some peer PRs\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"0404\"), new WeekNumber(\"4\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Start a collaborative doc to take project notes\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0405\"), new WeekNumber(\"4\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0406\"), new WeekNumber(\"4\"), new Description(\"Class/Object Diagrams: Basics\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0407\"), new WeekNumber(\"4\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Add Increments as branches: A-Gradle, A-CheckStyle, Level-10, A-Varargs\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0408\"), new WeekNumber(\"4\"), new Description(\"Start weekly project meetings\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0409\"), new WeekNumber(\"4\"), new Description(\"Decide on an overall project direction\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0410\"), new WeekNumber(\"4\"), new Description(\"Class Diagrams: Intermediate-Level\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0411\"), new WeekNumber(\"4\"), new Description(\"Java: JavaFX\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0412\"), new WeekNumber(\"4\"), new Description(\"Java: varargs\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0413\"), new WeekNumber(\"4\"), new Description(\"Code Quality: Naming\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0414\"), new WeekNumber(\"4\"), new Description(\"Static Analysis\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0415\"), new WeekNumber(\"4\"), new Description(\"Code reviews\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0416\"), new WeekNumber(\"4\"), new Description(\"RCS: Managing Pull Requests\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0417\"), new WeekNumber(\"4\"), new Description(\"Automating the Build Process\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-03\", LocalDate.of(2020, 9, 3)),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0501\"), new WeekNumber(\"5\"), new Description(\"Submit post-lecture quiz \"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0502\"), new WeekNumber(\"5\"), new Description(\"Requirements: Intro \"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0503\"), new WeekNumber(\"5\"), new Description(\"Generate a new jar file\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0504\"), new WeekNumber(\"5\"), new Description(\"Choose user stories for v1.2\"),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0505\"), new WeekNumber(\"5\"), new Description(\"Practice peer evaluation on TEAMMATES\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0506\"), new WeekNumber(\"5\"), new Description(\"Requirements: Gathering\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new IP(new Index(\"0507\"), new WeekNumber(\"5\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"Add Increments as PRs: A-Assertions, A-CodeQuality, A-Lambdas, A-Streams\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0508\"), new WeekNumber(\"5\"), new Description(\"Brainstorm user stories\"),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0509\"), new WeekNumber(\"5\"), new Description(\"Requirements: Specifying\"),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0510\"), new WeekNumber(\"5\"), new Description(\"Code Quality\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0511\"), new WeekNumber(\"5\"), new Description(\"Refactoring\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0512\"), new WeekNumber(\"5\"), new Description(\"Assertions\"),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0513\"), new WeekNumber(\"5\"), new Description(\"Java: streams\"),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0514\"), new WeekNumber(\"5\"), new Description(\"RCS: Managing Pull Requests\"),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0515\"), new WeekNumber(\"5\"), new Description(\"Add Increment: A-CI\"),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0516\"), new WeekNumber(\"5\"), new Description(\"Add an extension\"),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0601\"), new WeekNumber(\"6\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0602\"), new WeekNumber(\"6\"), new Description(\"Architecture Diagrams\"),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0603\"), new WeekNumber(\"6\"), new Description(\"Add Increment: A-BetterGui\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0604\"), new WeekNumber(\"6\"), new Description(\"Conceptualize v1.2\"),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"0605\"), new WeekNumber(\"6\"),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new Description(\"[optional] Submit mid-term feedback for the module\"),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0606\"), new WeekNumber(\"6\"), new Description(\"Modeling: Sequence Diagram\"),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0607\"), new WeekNumber(\"6\"), new Description(\"Finalize the features\"),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0608\"), new WeekNumber(\"6\"), new Description(\"Draft the UG\"),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0609\"), new WeekNumber(\"6\"), new Description(\"Refine the product design\"),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0610\"), new WeekNumber(\"6\"), new Description(\" Set up the project repo\"),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0611\"), new WeekNumber(\"6\"), new Description(\"Get familiar with the code base\"),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0612\"), new WeekNumber(\"6\"), new Description(\"IDEs: Intermediate Features\"),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0613\"), new WeekNumber(\"6\"), new Description(\"Logging\"),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-17\", LocalDate.of(2020, 9, 17)),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0701\"), new WeekNumber(\"7\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0702\"), new WeekNumber(\"7\"), new Description(\"Requirements: Use Cases\"),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0703\"), new WeekNumber(\"7\"), new Description(\"[Optional] Get more out of the iP\"),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-28\", LocalDate.of(2020, 9, 28)),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0704\"), new WeekNumber(\"7\"), new Description(\"Do a practice iteration\"),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"0705\"), new WeekNumber(\"7\"),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Update the DG: user stories, glossary, NFRs, use cases\"),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0706\"), new WeekNumber(\"7\"), new Description(\"Design: High-Level View\"),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0707\"), new WeekNumber(\"7\"), new Description(\"Update the UG\"),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-28\", LocalDate.of(2020, 9, 28)),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0708\"), new WeekNumber(\"7\"), new Description(\"Update project website: AboutUs, README\"),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0709\"), new WeekNumber(\"7\"), new Description(\"Plan the next iteration\"),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-28\", LocalDate.of(2020, 9, 28)),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0710\"), new WeekNumber(\"7\"), new Description(\"Start implementing the next version\"),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0711\"), new WeekNumber(\"7\"), new Description(\"Design: Fundamentals \"),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0712\"), new WeekNumber(\"7\"), new Description(\"IDEs: Advanced Features : OPTIONAL\"),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0713\"), new WeekNumber(\"7\"), new Description(\"Integration Approaches\"),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0714\"), new WeekNumber(\"7\"), new Description(\"Project Mgt: Scheduling and Tracking\"),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0715\"), new WeekNumber(\"7\"), new Description(\"Project Mgt: Workflows\"),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-01\", LocalDate.of(2020, 10, 1)),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0801\"), new WeekNumber(\"8\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Topic(new Index(\"0802\"), new WeekNumber(\"8\"),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"[Revisiting] Drawing Class/Object Diagrams - Basics\"),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new IP(new Index(\"0803\"), new WeekNumber(\"8\"), new Description(\"Evaluate two peer iPs \"),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-10\", LocalDate.of(2020, 10, 10)),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0804\"), new WeekNumber(\"8\"), new Description(\"Ensure you know tP expectations\"),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"0805\"), new WeekNumber(\"8\"),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Submit Midterm Peer Evaluations on TEAMMATES\"),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-11\", LocalDate.of(2020, 10, 11)),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Topic(new Index(\"0806\"), new WeekNumber(\"8\"),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"[Revisiting] Drawing Class/Object Diagrams - Intermediate\"),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0807\"), new WeekNumber(\"8\"), new Description(\"Start proper milestone management\"),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-10\", LocalDate.of(2020, 10, 10)),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0808\"), new WeekNumber(\"8\"), new Description(\"Add the first functionality increment\"),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Topic(new Index(\"0809\"), new WeekNumber(\"8\"),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"[Revisiting] Drawing Class/Object Diagrams - Intermediate\"),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0810\"), new WeekNumber(\"8\"), new Description(\"Testing: Types\"),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-10\", LocalDate.of(2020, 10, 10)),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0811\"), new WeekNumber(\"8\"), new Description(\"Testing: Intermediate Concepts\"),"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-09\", LocalDate.of(2020, 10, 9)),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"0901\"), new WeekNumber(\"9\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0902\"), new WeekNumber(\"9\"), new Description(\"OO Domain Models\"),"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0903\"), new WeekNumber(\"9\"), new Description(\"Conceptualizing a Design\"),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0904\"), new WeekNumber(\"9\"), new Description(\"Deliver v1.2\"),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0905\"), new WeekNumber(\"9\"), new Description(\"Wrap up v1.2\"),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0906\"), new WeekNumber(\"9\"), new Description(\"Activity Diagrams\"),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0907\"), new WeekNumber(\"9\"), new Description(\"Architecture Diagrams: Drawing\"),"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"0908\"), new WeekNumber(\"9\"), new Description(\"Do an informal demo of v1.2\"),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0909\"), new WeekNumber(\"9\"), new Description(\"Design Principles\"),"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0910\"), new WeekNumber(\"9\"), new Description(\"[Revisiting] SDLC Process Models\"),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0911\"), new WeekNumber(\"9\"), new Description(\"SDLC Process Models (continued) \"),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"0912\"), new WeekNumber(\"9\"), new Description(\"Writing Developer Documents\"),"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-15\", LocalDate.of(2020, 10, 15)),"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"01001\"), new WeekNumber(\"10\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"01002\"), new WeekNumber(\"10\"), new Description(\"Design Patterns\"),"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"01003\"), new WeekNumber(\"10\"), new Description(\"Test Cases: Intro\"),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"01004\"), new WeekNumber(\"10\"),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Do a postmortem of the previous iteration\"),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01005\"), new WeekNumber(\"10\"), new Description(\"Adjust process rigor if necessary\"),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"01006\"), new WeekNumber(\"10\"), new Description(\"Defensive Programming\"),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01007\"), new WeekNumber(\"10\"), new Description(\"Start the next iteration\"),"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01008\"), new WeekNumber(\"10\"), new Description(\"Update the DG with design details\"),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01009\"), new WeekNumber(\"10\"), new Description(\"Smoke-test CATcher [COMPULSORY]\"),"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01010\"), new WeekNumber(\"10\"), new Description(\"Do a trial JAR release\"),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-22\", LocalDate.of(2020, 10, 22)),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Admin(new Index(\"01101\"), new WeekNumber(\"11\"), new Description(\"Submit post-lecture quiz\"),"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"01102\"), new WeekNumber(\"11\"), new Description(\"More Design Patterns\"),"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01103\"), new WeekNumber(\"11\"), new Description(\"Deliver v1.3\"),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01104\"), new WeekNumber(\"11\"), new Description(\"Update user docs\"),"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Topic(new Index(\"01105\"), new WeekNumber(\"11\"), new Description(\"Architectural Styles\"),"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Topic(new Index(\"01106\"), new WeekNumber(\"11\"),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Test Cases: Combining Multiple Inputs\"),"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01107\"), new WeekNumber(\"11\"), new Description(\"Release as a jar file\"),"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01108\"), new WeekNumber(\"11\"), new Description(\"Ensure the code RepoSense-compatible\"),"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01109\"), new WeekNumber(\"11\"), new Description(\"Wrap up v1.3\"),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01110\"), new WeekNumber(\"11\"), new Description(\"Demo v1.3\"),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01111\"), new WeekNumber(\"11\"), new Description(\"Other QA Techniques\"),"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"01112\"), new WeekNumber(\"11\"), new Description(\"Reuse\"),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"01113\"), new WeekNumber(\"11\"), new Description(\"Cloud Computing\"),"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"01114\"), new WeekNumber(\"11\"), new Description(\"Other UML Models\"),"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-29\", LocalDate.of(2020, 10, 29)),"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01201\"), new WeekNumber(\"12\"), new Description(\"Double-check RepoSense compatibility\"),"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-06\", LocalDate.of(2020, 11, 6)),"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01202\"), new WeekNumber(\"12\"), new Description(\"Draft the PPP\"),"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-06\", LocalDate.of(2020, 11, 6)),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new TP(new Index(\"01203\"), new WeekNumber(\"12\"),"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Tweak the product as per peer-testing results\"),"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-06\", LocalDate.of(2020, 11, 6)),"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01204\"), new WeekNumber(\"12\"), new Description(\"Attend the practical exam dry run\"),"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-10-30\", LocalDate.of(2020, 10, 30)),"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Admin(new Index(\"01301\"), new WeekNumber(\"13\"),"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Description(\"Submit Final Peer Evaluation on TEAMMATES\"),"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-12\", LocalDate.of(2020, 11, 12)),"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01302\"), new WeekNumber(\"13\"), new Description(\"Attend the practical exam\"),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-13\", LocalDate.of(2020, 11, 13)),"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01303\"), new WeekNumber(\"13\"), new Description(\"Submit deliverables\"),"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-09\", LocalDate.of(2020, 11, 9)),"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01304\"), new WeekNumber(\"13\"), new Description(\"Wrap up the milestone\"),"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-11\", LocalDate.of(2020, 11, 11)),"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01305\"), new WeekNumber(\"13\"), new Description(\"Do final tweaks to the feature\"),"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-10\", LocalDate.of(2020, 11, 10)),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark (\"Nothing here\"), false, false),"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new TP(new Index(\"01306\"), new WeekNumber(\"13\"), new Description(\"Submit the demo video\"),"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-11-11\", LocalDate.of(2020, 11, 11)),"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"Nothing here\"), false, false)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static TaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList sampleTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            sampleTaskList.add(sampleTask);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return sampleTaskList;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 348,
      "UnicornJin": 1,
      "Zhang-Yunjie": 122,
      "onglijin": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.OfficialDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedTask.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String weekNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String officialDeadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String customizedDeadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private boolean isCustomized;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given person details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"index\") String index,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"weekNumber\") String weekNumber,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"officialDeadline\") String officialDeadline,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"customizedDeadline\") String customizedDeadline,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"customized\") boolean isCustomized,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                           @JsonProperty(\"doneStatus\") boolean isDone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.officialDeadline \u003d officialDeadline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.customizedDeadline \u003d customizedDeadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.isCustomized \u003d isCustomized;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public JsonAdaptedTask(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        index \u003d task.getIndex().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        weekNumber \u003d task.getWeekNumber().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        description \u003d task.getDescription().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (task.getOfficialDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            officialDeadline \u003d task.getOfficialDeadline().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            officialDeadline \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (task.getCustomizedDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            customizedDeadline \u003d task.getCustomizedDeadline().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            customizedDeadline \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (task.getRemark() !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            remark \u003d task.getRemark().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            remark \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        category \u003d TaskCategory.categoryToString(task.getCategory());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isCustomized \u003d task.isCustomized();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isDone \u003d task.isDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"index\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!Index.isValidIndex(index)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new IllegalValueException(Index.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Index modelIndex \u003d new Index(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (weekNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"weekNumber\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!WeekNumber.isValidWeekNumber(weekNumber)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new IllegalValueException(WeekNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        WeekNumber modelWeekNumber \u003d new WeekNumber(weekNumber);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        OfficialDeadline modelOfficialDeadline;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (officialDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelOfficialDeadline \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (!Deadline.isValidDeadline(officialDeadline)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelOfficialDeadline \u003d new OfficialDeadline(officialDeadline, LocalDate.parse(officialDeadline));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        CustomizedDeadline modelCustomizedDeadline;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        if (customizedDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelCustomizedDeadline \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (!Deadline.isValidDeadline(customizedDeadline)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelCustomizedDeadline \u003d new CustomizedDeadline(customizedDeadline, LocalDate.parse(customizedDeadline));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (TaskCategory.isStringAdmin(category)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new Admin(modelIndex, modelWeekNumber, modelDescription,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelOfficialDeadline, modelCustomizedDeadline,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelRemark, isCustomized, isDone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (TaskCategory.isStringTopic(category)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new Topic(modelIndex, modelWeekNumber, modelDescription,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelOfficialDeadline, modelCustomizedDeadline,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelRemark, isCustomized, isDone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (TaskCategory.isStringIP(category)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new IP(modelIndex, modelWeekNumber, modelDescription,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelOfficialDeadline, modelCustomizedDeadline,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelRemark, isCustomized, isDone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (TaskCategory.isStringTP(category)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return new TP(modelIndex, modelWeekNumber, modelDescription,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelOfficialDeadline, modelCustomizedDeadline,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    modelRemark, isCustomized, isDone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new Task(modelIndex, modelWeekNumber, modelDescription,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                modelOfficialDeadline, modelCustomizedDeadline,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                modelRemark, isCustomized, isDone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 162,
      "UnicornJin": 9,
      "onglijin": 7
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * An Immutable TaskList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskList} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Converts a given {@code TaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public JsonSerializableTaskList(TaskList source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Converts this task list into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                logger.info(\"The index of duplicate task is: \" + task.getIndex().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            taskList.initialize(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 64
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/JsonTaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Optional\u003cTaskList\u003e readTaskList() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Similar to {@link #readTaskList()}}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Optional\u003cTaskList\u003e readTaskList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveTaskList(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveTaskList(TaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 71
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public interface Storage extends TaskListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Optional\u003cTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void saveTaskList(TaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * Manages storage of TaskList data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TaskListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public StorageManager(TaskListStorage taskListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskListStorage.getTaskListFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Optional\u003cTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Optional\u003cTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveTaskList(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveTaskList(TaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 19,
      "onglijin": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/TaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Returns TaskList data as a {@link tp.acecs2103.model.TaskList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Optional\u003cTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @see #getTaskListFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    Optional\u003cTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Saves the given {@link TaskList} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void saveTaskList(TaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @see #saveTaskList(TaskList)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    void saveTaskList(TaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 40
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/CategoryBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " * Encapsulates a box which displays the category for a panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "public class CategoryBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final String FXML \u003d \"CategoryBox.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Creates a CategoryBox object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * @param description is a category."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public CategoryBox(TaskCategory description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        category.setText(description.categoryToString(description));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Perpetual09": 28
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/CategoryPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " * Encapsulates a panel containing the list of tasks for a specific category."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "public class CategoryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final String FXML \u003d \"CategoryPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CategoryPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private ListView\u003cTask\u003e categoryView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label categoryLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Creates a {@code CategoryPanel} with the given {@code ObservableList} and {@code categoryString}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public CategoryPanel(ObservableList\u003cTask\u003e taskList, String categoryString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        category \u003d categoryString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        categoryLabel.setText(categoryString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        categoryLabel.textAlignmentProperty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        setStyle(categoryString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        categoryView.setItems(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        categoryView.setCellFactory(listView -\u003e new CategoryCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setText(ArrayList\u003cInteger\u003e weekRange) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (weekRange !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            String startWeek \u003d String.valueOf(weekRange.get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            String endWeek \u003d String.valueOf(weekRange.get(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            String res \u003d category + \" (Week \" + startWeek + \" to Week \" + endWeek + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            categoryLabel.setText(res);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            categoryLabel.setText(category);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Custom {@code CategoryCell} that displays the graphics of a {@code Task} using a {@code TaskBox}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    class CategoryCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                switch (task.getCategory().toString()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                case \"ADMIN\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFF0F5\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                case \"TOPIC\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    setStyle(\"-fx-background-color: #E1FFFF\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                case \"IP\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFFFE0\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                case \"TP\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    setStyle(\"-fx-background-color: #F0FFF0\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    assert(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                setGraphic(new TaskBox(task).getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Set different background color for different category panel."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * @param categoryString a string represents the category."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void setStyle(String categoryString) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        switch (categoryString) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        case \"Admin\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            categoryView.getStyleClass().add(\"color1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        case \"Topic\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            categoryView.getStyleClass().add(\"color2\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        case \"Ip\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            categoryView.getStyleClass().add(\"color3\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        case \"Tp\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            categoryView.getStyleClass().add(\"color4\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            categoryView.getStyleClass().add(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 22,
      "onglijin": 1,
      "Perpetual09": 91
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException | ParseException | InvalidTaskListOperationException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult execute(String commandText) throws"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                CommandException, ParseException, InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "Zhang-Yunjie": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/FeedbackBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " * A ui for the feedback after axecuting a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "public class FeedbackBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final String FXML \u003d \"FeedbackBox.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private TextArea feedbackDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Creates a feedback box component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public FeedbackBox() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        feedbackDisplay.setText(\"Welcome!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Updates the content in the feedback box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * @param feedbackToUser is a string message which indicates the result after executing a command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        feedbackDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Perpetual09": 33
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.AppUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskListOperationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private CategoryPanel adminPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private CategoryPanel topicPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private CategoryPanel ipPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private CategoryPanel tpPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private WeekDisplay weekDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private FeedbackBox feedbackBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private StackPane weekDisplayPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private HBox progressBarContainer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private HBox categoryPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private StackPane feedbackBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        // TODO: change the method to get each category panel"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        adminPanel \u003d new CategoryPanel(logic.getUiTaskList().getAdminList(), \"Admin\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        categoryPanelPlaceholder.getChildren().add(adminPanel.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        topicPanel \u003d new CategoryPanel(logic.getUiTaskList().getTopicList(), \"Topic\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        categoryPanelPlaceholder.getChildren().add(topicPanel.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ipPanel \u003d new CategoryPanel(logic.getUiTaskList().getIpList(), \"Ip\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        categoryPanelPlaceholder.getChildren().add(ipPanel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        tpPanel \u003d new CategoryPanel(logic.getUiTaskList().getTpList(), \"Tp\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        categoryPanelPlaceholder.getChildren().add(tpPanel.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        refreshTitle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int currentWeekNumber \u003d AppUtil.getCurrentWeekNumber().getWeekValueInt();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Double num \u003d (double) currentWeekNumber / (double) 13;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        progressBar.setProgress(num);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekDisplay \u003d new WeekDisplay(currentWeekNumber);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        weekDisplayPlaceholder.getChildren().add(weekDisplay.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        feedbackBox \u003d new FeedbackBox();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        feedbackBoxPlaceholder.getChildren().add(feedbackBox.getRoot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand); // bottom of Ace CS2103/T"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        // System.out.println(guiSettings.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Refreshes the title of category panel."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void refreshTitle() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        adminPanel.setText(logic.getUiTaskList().getAdminWeekRange());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        topicPanel.setText(logic.getUiTaskList().getTopicWeekRange());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ipPanel.setText(logic.getUiTaskList().getIpWeekRange());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        tpPanel.setText(logic.getUiTaskList().getTpWeekRange());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            ParseException, InvalidTaskListOperationException, IllegalArgumentException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            feedbackBox.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            refreshTitle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            // categoryPanel.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException | ParseException | InvalidTaskListOperationException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            feedbackBox.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 43,
      "Zhang-Yunjie": 7,
      "onglijin": 10,
      "-": 98,
      "Perpetual09": 11
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/TaskBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " * Encapsulate a task box to display information for a particular task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "public class TaskBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private static final String FXML \u003d \"TaskBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskBox.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private VBox box;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label weekNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label officialDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label customizedDeadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * Creates a TaskBox object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     * @param task is a task object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public TaskBox(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        if (!Objects.isNull(task.getIndex())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            index.setText(\"Index: \" + task.getIndex());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        if (!Objects.isNull(task.getWeekNumber())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            weekNumber.setText(\"Week number: \" + task.getWeekNumber().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        if (!Objects.isNull(task.getDescription())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            description.setText(\"Description: \" + task.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        if (!Objects.isNull(task.getOfficialDeadline())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            officialDeadline.setText(\"Official Deadline: \" + task.getOfficialDeadline().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        if (!Objects.isNull(task.getCustomizedDeadline())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            customizedDeadline.setText(\"Customized Deadline: \" + task.getCustomizedDeadline().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (!Objects.isNull(task.getRemark())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            remark.setText(\"Remark: \" + task.getRemark());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            logger.info(\"done\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            box.getStyleClass().add(\"done-task\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            if (task.isOverdue()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                logger.info(\"overdue\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                box.getStyleClass().add(\"overdue-task\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                logger.info(\"pending\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                box.getStyleClass().add(\"pending-task\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 22,
      "onglijin": 1,
      "Perpetual09": 57
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ace_cs2103.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "onglijin": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/tp/acecs2103/ui/WeekDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": " * A ui for the week display that is displayed at the top of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class WeekDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    private static final String FXML \u003d \"WeekDisplay.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Label projectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Label weekNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     * Creates a {@code WeekDisplay} with the given {@code Path}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    // TODO: Connect method to weekToDisplay"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public WeekDisplay(int weekToDisplay) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        projectName.setText(\"Welcome to Ace CS2103/T!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        int remainWeek \u003d 13 - weekToDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (remainWeek \u003c 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            weekNumber.setText(\"The end is near!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else if (remainWeek \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            weekNumber.setText(\"The end is near!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else if (remainWeek \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            weekNumber.setText(\"Now is Week \" + weekToDisplay + \". There is \" + remainWeek + \" week left.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            weekNumber.setText(\"Now is Week \" + weekToDisplay + \". There are \" + remainWeek + \" weeks left.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 14,
      "Zhang-Yunjie": 2,
      "onglijin": 23
    }
  },
  {
    "path": "src/main/resources/view/CategoryBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"42.0\" prefWidth\u003d\"158.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "      \u003cLabel fx:id\u003d\"category\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 2,
      "Perpetual09": 9
    }
  },
  {
    "path": "src/main/resources/view/CategoryPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" spacing\u003d\"5\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"460\" prefWidth\u003d\"270.0\" style\u003d\"-fx-text-align: center; -fx-border-insets: 10, 10, 10, 10; -fx-border-insets: 20; -fx-background-radius: 10; -fx-border-radius: 10; -fx-padding: 20, 20, 20, 20;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003cLabel fx:id\u003d\"categoryLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"270.0\" style\u003d\"-fx-background-radius: 10; -fx-label-padding: 10, 10, 10, 10; -fx-background-color: #AFEEEE; -fx-border-radius: 10;\" styleClass\u003d\"category-box\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"#3cc4a9\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            \u003cFont name\u003d\"MS Outlook\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003cListView fx:id\u003d\"categoryView\" prefHeight\u003d\"370.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 2,
      "Zhang-Yunjie": 1,
      "Perpetual09": 13
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".progress-bar .bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-color:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        -fx-box-border,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        linear-gradient(to bottom, derive(-fx-accent,95%), derive(-fx-accent,10%)),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        red; /* this line is the background color of the bar */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-insets: 0, 1, 2;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-padding: 0.416667em; /* 5 */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-pref-width: 300px"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 10,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/FeedbackBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003cTextArea fx:id\u003d\"feedbackDisplay\" editable\u003d\"false\" styleClass\u003d\"feedback-box\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "         \u003c/font\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Perpetual09": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"650.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Ace CS2103/T\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    \u003cImage url\u003d\"@/images/ace_cs2103.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003cVBox prefHeight\u003d\"498.0\" prefWidth\u003d\"520.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003cStackPane fx:id\u003d\"weekDisplayPlaceholder\" maxHeight\u003d\"60.0\" minHeight\u003d\"60.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"550.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003cHBox fx:id\u003d\"progressBarContainer\" minWidth\u003d\"340\" minHeight\u003d\"29.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"550.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003cLabel fx:id\u003d\"weekDisplay\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressBar\" styleClass\u003d\"progress-bar\"\u003e\u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003cHBox fx:id\u003d\"categoryPanel\" minWidth\u003d\"340\" prefHeight\u003d\"385.0\" prefWidth\u003d\"520.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "               \u003cStackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cHBox fx:id\u003d\"categoryPanelPlaceholder\" prefHeight\u003d\"363.0\" prefWidth\u003d\"501.0\" HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "               \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"33.0\" prefWidth\u003d\"520.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003cStackPane fx:id\u003d\"feedbackBoxPlaceholder\" prefHeight\u003d\"98.0\" prefWidth\u003d\"520.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "onglijin": 7,
      "-": 32,
      "Perpetual09": 13
    }
  },
  {
    "path": "src/main/resources/view/Style.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".HBox {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".progress-bar .bar {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-accent: #87CEFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-pref-width: 300px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-pref-height: 50px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".progress-bar .track {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".bar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    fx-background-radius: 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".GridPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".VBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".pending-task {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color:  #D5DBDB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".done-task {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color:  #58D68D;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".overdue-task {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color:  #EC7063;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".Label {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #d06651 !important;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".feedback-box .label {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: #6495ED #B0C4DE #6495ED #B0C4DE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "#feedbackDisplay .content {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color1 {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #FFF0F5;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color2 {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #E1FFFF;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color3 {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #FFFFE0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color4 {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #F0FFF0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".category-box {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-alignment: \"CENTER\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-background-radius: 10;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-label-padding: 10, 10, 10, 10;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-background-color: #AFEEEE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-border-radius: 10;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-text-alignment: \"CENTER\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-text-fill: #3cc4a9"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-label-padding: 20 0 20 10;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 20 0 20 10;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #3c3e3f"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #515658"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #424d5f"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     -fx-background-color: derive(#FBF6FF, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     -fx-background-color: derive(#FBF6FF, 10%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     -fx-border-color: derive(#FBF6FF, 10%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: derive(#767676, 50%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 1 4 1 4;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Perpetual09": 313
    }
  },
  {
    "path": "src/main/resources/view/TaskBox.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".HBox {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".progress-bar .bar {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-accent: #87CEFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-radius: 100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-pref-width: 300px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-pref-height: 50px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".progress-bar .track {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-radius: 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".bar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    fx-background-radius: 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".GridPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".VBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".pending-task {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color:  #D3D3D3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".done-task {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-color:  #32cd32;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ".overdue-task {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    -fx-background-color:  #ff4500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".Label {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: #d06651 !important;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".feedback-box .label {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: #6495ED #B0C4DE #6495ED #B0C4DE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "#feedbackDisplay .content {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color1 {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #FFF0F5;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color2 {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #E1FFFF;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color3 {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #FFFFE0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".color4 {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #F0FFF0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".category-box {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "      -fx-alignment: \"CENTER\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-background-radius: 10;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-label-padding: 10, 10, 10, 10;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-background-color: #AFEEEE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      -fx-border-radius: 10;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "      -fx-text-alignment: \"CENTER\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "      -fx-text-fill: #3cc4a9"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-label-padding: 10 0 10 10;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-padding: 10 0 10 10;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #3c3e3f"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #515658"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background-color: #424d5f"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-border-width: 1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-text-fill: black"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 27,
      "Perpetual09": 97
    }
  },
  {
    "path": "src/main/resources/view/TaskBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"164.0\" prefWidth\u003d\"210.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"400.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"GridPane\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            \u003cVBox fx:id\u003d\"box\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" maxWidth\u003d\"250\" styleClass\u003d\"VBox\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"index\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Index: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"weekNumber\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Week Number: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Description: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"officialDeadline\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Official Deadline: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"customizedDeadline\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Customized Deadline: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                  \u003cLabel fx:id\u003d\"remark\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" styleClass\u003d\"Label\" text\u003d\"Remark: None\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 1,
      "Perpetual09": 33
    }
  },
  {
    "path": "src/main/resources/view/WeekDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cGridPane prefHeight\u003d\"60.0\" prefWidth\u003d\"332.0\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \u003cVBox prefHeight\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003cLabel fx:id\u003d\"projectName\" prefHeight\u003d\"18.0\" style\u003d\"-fx-padding: 8px;\" text\u003d\"\\$projectName\" textFill\u003d\"#929fe3\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    \u003cFont name\u003d\"Bookshelf Symbol 7\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003cLabel fx:id\u003d\"weekNumber\" prefHeight\u003d\"18.0\" text\u003d\"\\$weekNumber\" textFill\u003d\"#929fe3\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    \u003cFont name\u003d\"Bookshelf Symbol 7\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "onglijin"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 16,
      "UnicornJin": 2,
      "onglijin": 4,
      "-": 11,
      "Perpetual09": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/duplicateTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0101\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Admin One\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0101\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"1\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Admin Two\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 23
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/invalidTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"1010\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Admin One\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/typicalTasksTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"_comment\": \"TaskList save file which contains the same Tasks values as in TypicalTasks#getTypicalTaskList()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0101\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Admin One\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0102\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Admin Two\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": \"2020-10-20\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": true,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0201\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"2\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Topic One\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Topic\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0202\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"2\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Topic Two\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": \"2020-10-20\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Topic\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": true,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0301\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"3\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Ip One\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Ip\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0302\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"3\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Ip Two\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": \"2020-10-20\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Ip\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": true,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0401\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"4\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Tp One\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Tp\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0402\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"4\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Tp Two\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": null,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": \"2020-10-20\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Tp\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": true,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 84
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/invalidAndValidTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0501\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"5\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Valid Admin Task\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0501\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"15\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Invalid Admin Task\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 23
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/invalidTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"index\": \"0501\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"weekNumber\": \"15\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"description\": \"Invalid Admin Task\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"officialDeadline\": \"2020-10-10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"customizedDeadline\": null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"category\": \"Admin\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"remark\": \"No remark\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isCustomized\": false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    \"isDone\": false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 13
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"taskListFilePath\" : \"tasklist.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "  \"taskListFilePath\" : \"tasklist.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 42
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.OfficialDeadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_newIpTask_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0210\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d addCommand.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.addTask(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_newTpTask_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new TP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d addCommand.execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.addTask(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_newAdminTask_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new Admin(new Index(\"0210\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d addCommand.execute(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.addTask(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_newTopicTask_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new Topic(new Index(\"0210\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d addCommand.execute(model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.addTask(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_inconsistentIndex_fail() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddCommand(task).execute(model));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_existingTask_fail() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddCommand(task).execute(model));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_missingDeadline_fail() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task2 \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new CustomizedDeadline(\"2020-09-10\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.of(2020, 9, 10)), new Remark(\"no remark\"),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddCommand(task).execute(model));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddCommand(task2).execute(model));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_extraDeadline_fail() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new CustomizedDeadline(\"2020-09-10\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                        LocalDate.of(2020, 9, 10)), new Remark(\"no remark\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddCommand(task).execute(model));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_null_returnTrue() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new Admin(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand1 \u003d null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand1 \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(addCommand.equals(addCommand1));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_null_returnFalse() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task1 \u003d new TP(new Index(\"0204\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task2 \u003d new Admin(new Index(\"0205\"), new WeekNumber(\"2\"), new Description(\"Test Task\"),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand1 \u003d null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand2 \u003d null;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand1 \u003d new AddCommand(task1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand2 \u003d new AddCommand(task2);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(addCommand.equals(addCommand1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(addCommand.equals(addCommand2));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void get_nullTask() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            assertTrue(task.equals(addCommand.getTaskToAdd()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 215,
      "onglijin": 27
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        clearCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(clearCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 4,
      "Zhang-Yunjie": 21
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getFeedback_null_string() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d new ClearCommand().execute(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String messageSuccess \u003d \"Task List has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertTrue(messageSuccess.equals(commandResult.getFeedbackToUser()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(\"random\".equals(commandResult.getFeedbackToUser()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "Zhang-Yunjie": 16
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UiTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_WEEK_1 \u003d \"1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_WEEK_2 \u003d \"2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"Description1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"Description2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_REMARK_1 \u003d \"Remark 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_REMARK_2 \u003d \"Remark 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_DDL_1 \u003d \"2020-10-02\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final String VALID_DDL_2 \u003d \"2020-11-07\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final EditTaskDescriptorBuilder DESC_A;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final EditTaskDescriptorBuilder DESC_B;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DESC_A \u003d new EditTaskDescriptorBuilder().withWeekNumber(VALID_WEEK_1)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1).withRemark(VALID_REMARK_1).withCustomizedDeadline(VALID_DDL_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DESC_B \u003d new EditTaskDescriptorBuilder().withWeekNumber(VALID_WEEK_2)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_2).withRemark(VALID_REMARK_2).withCustomizedDeadline(VALID_DDL_2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult result \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * - the address book, filtered Task list and selected Task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList(actualModel.getTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UiTaskList expectedUiTaskList \u003d new UiTaskList(actualModel.getUiTaskList().getCombinedTaskList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedTaskList, actualModel.getTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedUiTaskList, actualModel.getUiTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "Zhang-Yunjie": 78
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/DeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "onglijin"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskOperationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "onglijin"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_beforeOfficialOverDue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2020-10-01\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-10-01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            deadlineCommand.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            taskToEdit.setDeadline(customizedDeadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(DeadlineCommand.MESSAGE_SUCCESS, index.value) + customizedDeadline.value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(deadlineCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_beforeOfficialNotOverDue_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0401\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2021-10-01\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2021-10-01\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            deadlineCommand.execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            taskToEdit.setDeadline(customizedDeadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(DeadlineCommand.MESSAGE_SUCCESS, index.value) + customizedDeadline.value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(deadlineCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_afterOfficialOverDue_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2021-10-01\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2021-10-01\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            deadlineCommand.execute(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            taskToEdit.setDeadline(customizedDeadline);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(DeadlineCommand.MESSAGE_SUCCESS, index.value) + customizedDeadline.value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(deadlineCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_afterOfficialNotOverDue_fail() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0401\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2021-11-01\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2021-11-01\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deadlineCommand.execute(model));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_nonExistantTask_fail() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0501\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2020-11-01\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-11-01\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deadlineCommand.execute(model));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_null_returnTrue() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2020-11-01\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-11-01\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand1 \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(deadlineCommand.equals(deadlineCommand1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_null_returnFalse() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index1 \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2020-11-01\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-11-01\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline1 \u003d new CustomizedDeadline(\"2020-11-02\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-11-02\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand1 \u003d new DeadlineCommand(index1, customizedDeadline);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand2 \u003d new DeadlineCommand(index, customizedDeadline1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deadlineCommand.equals(deadlineCommand1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deadlineCommand.equals(deadlineCommand2));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deadlineCommand.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deadlineCommand.equals(\"deadlineCommand1\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void gets_null_returnTrue() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CustomizedDeadline customizedDeadline \u003d new CustomizedDeadline(\"2020-11-01\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(\"2020-11-01\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(index, customizedDeadline);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(deadlineCommand.getNewDeadline().equals(customizedDeadline));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(deadlineCommand.getTargetIndex().equals(index));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "onglijin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 7,
      "Zhang-Yunjie": 149,
      "onglijin": 10
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d new IP(new Index(\"0203\"), new WeekNumber(\"2\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new CustomizedDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                 new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        AddCommand addCommand \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            addCommand.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0203\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d deleteCommand.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexNonExistent_fail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0203\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexDefaultTask_fail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand1 \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(deleteCommand.equals(deleteCommand1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index1 \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DeleteCommand deleteCommand1 \u003d new DeleteCommand(index1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deleteCommand.equals(deleteCommand1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deleteCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(deleteCommand.equals(\"0101\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 17,
      "Zhang-Yunjie": 81
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0302\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d model.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d doneCommand.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_DONE_TASK_SUCCESS, task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexNonExistent_fail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0203\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexDoneTask_fail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d model.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand1 \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(doneCommand.equals(doneCommand1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index1 \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        DoneCommand doneCommand1 \u003d new DoneCommand(index1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(doneCommand1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(\"0101\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "Zhang-Yunjie": 73
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.VALID_REMARK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_allFieldsSpecifiedCustomisedAdminTask_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0102\"), descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0102\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_allFieldsSpecifiedCustomisedTopicTask_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Topic reference \u003d new TaskBuilder().withIndex(\"0201\").withWeekNumber(\"2\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(\"Topic One\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withOfficialDeadline(\"2020-10-10\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withCustomizedDeadline(\"2020-10-01\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withRemark(\"New remark\").withIsCustomized(true).withIsDone(false).buildTopic();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0202\"), descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0202\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_allFieldsSpecifiedCustomisedIpTask_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        IP reference \u003d new TaskBuilder().withIndex(\"0301\").withWeekNumber(\"3\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(\"Admin One\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withOfficialDeadline(\"2020-10-10\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withCustomizedDeadline(\"2020-10-01\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withRemark(\"New remark\").withIsCustomized(true).withIsDone(false).buildIp();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0302\"), descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0302\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void execute_allFieldsSpecifiedCustomisedTpTask_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TP reference \u003d new TaskBuilder().withIndex(\"0401\").withWeekNumber(\"4\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(\"Tp One\").withOfficialDeadline(\"2020-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withRemark(\"No remark\").withIsCustomized(true).withIsDone(false).buildTp();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0402\"), descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0402\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_allFieldsSpecifiedDefaultTask_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().withIndex(\"0101\").withWeekNumber(\"1\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withDescription(\"Admin One\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withOfficialDeadline(\"2020-10-10\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withCustomizedDeadline(\"2020-10-01\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withRemark(\"New remark\").withIsCustomized(false).withIsDone(false).buildAdmin();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0101\"), descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0101\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_allFieldsSpecifiedDefaultTask_fail() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0101\"), descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e editCommand.execute(model));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_someFieldsSpecifiedDefault_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                .withRemark(VALID_REMARK_1).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0101\"), descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d expectedModel.getTaskList().getTask(new Index(\"0101\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task editedTask \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editedTask \u003d EditCommand.createEditedTask(taskToEdit, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Index(\"0101\"), descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task taskToEdit \u003d model.getTaskList().getTask(new Index(\"0101\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor1 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor2 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(new Index(\"0102\"), descriptor1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand2 \u003d new EditCommand(new Index(\"0102\"), descriptor2);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(editCommand1.equals(editCommand2));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor1 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor2 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(new Index(\"0101\"), descriptor1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditCommand editCommand2 \u003d new EditCommand(new Index(\"0102\"), descriptor2);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(editCommand1.equals(null));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(editCommand1.equals(\"1\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(editCommand1.equals(editCommand2));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equalDescriptor_null_returnTrue() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor1 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor2 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(descriptor1.equals(descriptor2));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equalDescriptor_null_returnFalse() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        IP ref2 \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor1 \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor2 \u003d new EditTaskDescriptorBuilder(ref2).build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(descriptor1.equals(descriptor2));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(descriptor1.equals(null));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(descriptor1.equals(\"1\"));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isAnyFieldEdited_null_returnTrue() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Admin reference \u003d new TaskBuilder().buildAdmin();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(reference).build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isAnyFieldEdited_null_returnFalse() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 284,
      "onglijin": 15
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        assertEquals(new ExitCommand().execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 2,
      "Perpetual09": 16
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/FilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class FilterCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_done_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"done\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(true, false, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: done\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_pendingByOfficial_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"official\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(false, true, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: pending\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + (\"\\nBy: official deadline\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_pendingByCustomized_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(false, false, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: pending\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + (\"\\nBy: customised deadline\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_pendingByCustomizedWeek1_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(false, false, weekNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: pending\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + (\"\\nBy: customised deadline\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\nDuration: week 1\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_pendingByCustomizedWeek5_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"5\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(false, false, weekNumber);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: pending\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + (\"\\nBy: customised deadline\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\nDuration: week 5\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_pendingByCustomizedWeek13_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getExtraTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        filterCommand.execute(model);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.filterTasks(false, false, weekNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d FilterCommand.MESSAGE_SUCCESS + \"\\nStatus: pending\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + (\"\\nBy: customised deadline\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\nDuration: week 13\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n--\u003e\" + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(filterCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber1 \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand1 \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand1 \u003d new FilterCommand(\"pending\", \"customised\", weekNumber1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(filterCommand1.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(filterCommand1.equals(\"1\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(filterCommand1.equals(filterCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand \u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FilterCommand filterCommand1 \u003d null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            filterCommand1 \u003d new FilterCommand(\"pending\", \"customised\", weekNumber);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(filterCommand1.equals(filterCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "Zhang-Yunjie": 158
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_keywordBigOne_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"One\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        findCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.findTasks(\"One\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d \"Search for tasks with keyword: \" + \"One\" + \" in description / remark.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_keywordSmallOne_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"one\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        findCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.findTasks(\"one\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d \"Search for tasks with keyword: \" + \"one\" + \" in description / remark.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_keywordRemark_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"Remark\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        findCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.findTasks(\"Remark\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d \"Search for tasks with keyword: \" + \"Remark\" + \" in description / remark.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand1 \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(findCommand.equals(findCommand1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String keyword1 \u003d \"keyword1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        FindCommand findCommand1 \u003d new FindCommand(keyword1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(findCommand.equals(findCommand1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(findCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(findCommand.equals(\"keyword\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 7,
      "Zhang-Yunjie": 72
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_null_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(new HelpCommand().execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 16
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/HomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.util.AppUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class HomeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_null_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber currentWeek \u003d AppUtil.getCurrentWeekNumber();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.listTasks(currentWeek);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        HomeCommand homeCommand \u003d new HomeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        homeCommand.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_WEEKLY_TASKS_LISTED, currentWeek.value)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\n --\u003e\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(homeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_null_returnFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        HomeCommand homeCommand \u003d new HomeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(homeCommand.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(homeCommand.equals(\"home\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "Zhang-Yunjie": 36
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_validWeekLower_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        listCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.listTasks(weekNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS + weekNumber.value + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(listCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_validWeekMiddle_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"7\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        listCommand.execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.listTasks(weekNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS + weekNumber.value + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(listCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_validWeekUpper_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        listCommand.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        expectedModel.listTasks(weekNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS + weekNumber.value + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getUiTaskList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertCommandSuccess(listCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber1 \u003d new WeekNumber(\"11\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand1 \u003d new ListCommand(weekNumber1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(listCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(listCommand.equals(\"1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(listCommand1.equals(listCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        WeekNumber weekNumber \u003d new WeekNumber(\"13\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        ListCommand listCommand1 \u003d new ListCommand(weekNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(listCommand.equals(listCommand1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "Zhang-Yunjie": 77
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/commands/UndoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class UndoneCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0402\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d model.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            commandResult \u003d undoneCommand.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String expectedMessage \u003d String.format(UndoneCommand.MESSAGE_DONE_TASK_SUCCESS, task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(!task.isDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexNonExistent_fail() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0203\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand doneCommand \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void execute_invalidIndexUndoneTask_fail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTasks.getTypicalTaskList(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task task \u003d model.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e undoneCommand.execute(model));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand doneCommand \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand doneCommand1 \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(doneCommand.equals(doneCommand1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equal_null_returnFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Index index1 \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand doneCommand \u003d new UndoneCommand(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        UndoneCommand doneCommand1 \u003d new UndoneCommand(index1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(doneCommand1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(doneCommand.equals(\"0101\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 11,
      "Zhang-Yunjie": 74
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validAddCommandWithRemark_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 r/release a/Ip\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"CyberPunk2077\"), null,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new CustomizedDeadline(\"2020-12-10\", LocalDate.parse(\"2020-12-10\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Remark(\"release\"), true, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommand expected;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                assertEquals(expected, addCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validAddCommandWithoutRemark_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"CyberPunk2077\"), null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new CustomizedDeadline(\"2020-12-10\", LocalDate.parse(\"2020-12-10\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Remark(\"\"), true, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommand expected;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                assertEquals(expected, addCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandArgumentInsufficient2_fail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 d/CyberPunk2077 c/2020-12-10 a/Ip\"; //no WeekNumber"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandEmptyCommand_fail() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandExtraArguments_fail() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 a/Ip x/fail\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandArgumentInsufficient1_fail() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add w/1 d/CyberPunk2077 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandArgumentInsufficient3_fail() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandArgumentInsufficient4_fail() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 a/Ip\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandArgumentInsufficient5_fail() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validAddCommandUnorderedArguments_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add a/Ip c/2020-12-10 w/1 i/0101 d/CyberPunk2077\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"CyberPunk2077\"), null,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new CustomizedDeadline(\"2020-12-10\", LocalDate.parse(\"2020-12-10\")),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Remark(\"\"), true, false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommand expected;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            expected \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                assertEquals(expected, addCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandInvalidDate_fail() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-99 a/Ip\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandInvalidWeek_fail() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/16 d/CyberPunk2077 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    // TODO: WARNING!!! SHOULD BE FAILED"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandInvalidIndex_fail() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/01401 w/1 d/CyberPunk2077 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandInvalidCategory_fail() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 a/Undefined\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidAddCommandInvalidDescription_fail() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        AddCommandParser addCommandParser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/ c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            addCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 60,
      "UnicornJin": 60,
      "Zhang-Yunjie": 3,
      "Perpetual09": 123
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/ArgumentMultimapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class ArgumentMultimapTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 4
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 4
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/DeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class DeadlineCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validDeadlineCommand_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/2020-08-17\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        DeadlineCommand expected \u003d new DeadlineCommand("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new Index(\"0101\"), new CustomizedDeadline(\"2020-08-17\", LocalDate.parse(\"2020-08-17\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, deadlineCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidDateDeadlineCommand_fail() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/2020-08-32\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            deadlineCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidMonthDeadlineCommand_fail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/2020-13-17\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            deadlineCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidYearDeadlineCommand_fail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/0000-08-17\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            deadlineCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_validLeapYearDateDeadlineCommand_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/2020-02-29\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommand expected \u003d new DeadlineCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                new Index(\"0101\"), new CustomizedDeadline(\"2020-02-29\", LocalDate.parse(\"2020-02-29\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assertEquals(expected, deadlineCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidCommonYearDateDeadlineCommand_fail() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeadlineCommandParser deadlineCommandParser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \" i/0101 c/2019-02-29\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            deadlineCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 9,
      "UnicornJin": 18,
      "Zhang-Yunjie": 2,
      "Perpetual09": 57
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validDeleteCommand_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeleteCommandParser deleteCommandParser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"0101\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeleteCommand expected \u003d new DeleteCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, deleteCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidDeleteCommandEmptyArguments_fail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeleteCommandParser deleteCommandParser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            deleteCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidDeleteCommandInvalidIndex_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeleteCommandParser deleteCommandParser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"010101\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            deleteCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_validTwoDigitsWeekDeleteCommand_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeleteCommandParser deleteCommandParser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"01301\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeleteCommand expected \u003d new DeleteCommand(new Index(\"01301\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assertEquals(expected, deleteCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidWeekDeleteCommandInvalidIndex_fail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DeleteCommandParser deleteCommandParser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"01401\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            deleteCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "UnicornJin": 39,
      "Perpetual09": 23
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validDoneCommand_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DoneCommandParser doneCommandParser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"0101\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DoneCommand expected \u003d new DoneCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected.getTargetIndex(), doneCommandParser.parse(parametersStub).getTargetIndex());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidDoneCommandEmptyArguments_fail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DoneCommandParser doneCommandParser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            doneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidDoneCommandInvalidIndex1_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DoneCommandParser doneCommandParser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"01401\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            doneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidDoneCommandInvalidIndex2_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DoneCommandParser doneCommandParser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"ABC\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            doneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidDoneCommandInvalidIndex3_fail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        DoneCommandParser doneCommandParser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"0199\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            doneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "UnicornJin": 30,
      "Perpetual09": 31
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_validEditCommandWithoutRemark_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/1 d/CyberPunk2077 c/2020-12-10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-12-10\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setDescription(new Description(\"CyberPunk2077\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand expected \u003d new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert editCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validEditCommandWithRemark_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/1 d/CyberPunk2077 c/2020-12-10 r/release\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-12-10\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setDescription(new Description(\"CyberPunk2077\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setRemark(new Remark(\"release\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommand expected \u003d new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert editCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidDateEditCommandWithRemark_fail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/1 d/CyberPunk2077 c/2020-12-32 r/release\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-12-32\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidMonthEditCommandWithRemark_fail() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/1 d/CyberPunk2077 c/2020-13-10 r/release\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-13-10\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidWeekEditCommandWithRemark_fail() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/14 d/CyberPunk2077 c/2020-12-10 r/release\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editTaskDescriptor.setWeekNumber(new WeekNumber(\"14\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidIndexEditCommandWithRemark_fail() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/01401 w/1 d/CyberPunk2077 c/2020-12-10 r/release\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            Index index \u003d new Index(\"01401\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    //WARNING: SHOULD FAIL"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    public void parse_invalidNotAlignedEditCommandWithRemark_fail() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/2 d/CyberPunk2077 c/2020-12-10 r/release\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"2\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-12-10\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        editTaskDescriptor.setDescription(new Description(\"CyberPunk2077\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            editCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "UnicornJin": 24,
      "Perpetual09": 108
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/FilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validFilterCommandWkl_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" w/4 k/pending l/official\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"pending\", \"official\", new WeekNumber(\"4\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert filterCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validFilterCommandKl_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" k/pending l/official\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"pending\", \"official\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert filterCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validFilterCommandWk_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" w/4 k/done\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"done\", new WeekNumber(\"4\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert filterCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_validFilterCommandK_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" k/done\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"done\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert filterCommandParser.parse(parametersStub).equals(expected);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_invalidFilterCommandK_fail() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" k/pending\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            filterCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_invalidFilterCommandKL_fail() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" k/done l/official\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            filterCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_invalidFilterCommandwkl_fail() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" w/4 k/done l/official\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            filterCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_invalidFilterCommandemptyArgument_fail() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommandParser filterCommandParser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \" \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            filterCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 18,
      "UnicornJin": 105
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validFindCommand_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"testtest\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FindCommand expected \u003d new FindCommand(\"testtest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, findCommandParser.parse(parametersStub));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidFindCommandEmptyKeyword_fail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            findCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 4,
      "UnicornJin": 29
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validListCommand1_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommand expected \u003d new ListCommand(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected.getWeekNumber(), listCommandParser.parse(parametersStub).getWeekNumber());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validListCommand2_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"13\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommand expected \u003d new ListCommand(new WeekNumber(\"13\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected.getWeekNumber(), listCommandParser.parse(parametersStub).getWeekNumber());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidListCommandInvalidWeekNumber1_fail() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            listCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidListCommandInvalidWeekNumber2_fail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"14\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            listCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidListCommandInvalidWeekNumber3_fail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"10000\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            listCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidListCommandNoArgument_fail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            listCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 7,
      "UnicornJin": 62,
      "Perpetual09": 10
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TaskCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseIndexValid1_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert \"1\".equals(ParserUtil.parseIndex(\" 1\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseIndexValid2_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert \"50\".equals(ParserUtil.parseIndex(\"     50   \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseIndexInvalid1_fail() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseIndex(\"     0   \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseIndexInvalid2_fail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseIndex(\"-1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseWeekNumberValid_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(10, ParserUtil.parseWeekNumber(\" 10 \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseWeekNumberInvalid1_fail() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseWeekNumber(\"           \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseWeekNumberInvalid2_fail() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseWeekNumber(\" abababa \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseWeekNumberInvalid3_fail() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseWeekNumber(\" 0 \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseWeekNumberInvalid4_fail() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseWeekNumber(\" 14 \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseDescriptionValid_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(\"a a\", ParserUtil.parseDescription(\"       a a\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineValid1_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(LocalDate.parse(\"2020-10-01\"), ParserUtil.parseCustomizedDeadline(\"   2020-10-01   \"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineValid2_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(LocalDate.parse(\"2020-02-29\"), ParserUtil.parseCustomizedDeadline(\"   2020-02-29   \"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineInvalid1_fail() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseCustomizedDeadline(\"      \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineInvalid2_fail() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseCustomizedDeadline(\"   2020-13-14   \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineInvalid3_fail() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseCustomizedDeadline(\"   2020-02-30   \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCustomizedDeadlineInvalid4_fail() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseCustomizedDeadline(\"   2019-02-29   \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseRemarkValid_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(\"a a\", ParserUtil.parseRemark(\"       a a\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseTypeValid_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert \"a\".equals(ParserUtil.parseType(\"a\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseTypeInvalid_fail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseType(\"       \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCategoryValid_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert ParserUtil.parseCategory(\"Admin\") \u003d\u003d TaskCategory.ADMIN"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 ParserUtil.parseCategory(\"Topic\") \u003d\u003d TaskCategory.TOPIC"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 ParserUtil.parseCategory(\"Ip\") \u003d\u003d TaskCategory.IP"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                    \u0026\u0026 ParserUtil.parseCategory(\"Tp\") \u003d\u003d TaskCategory.TP;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parserUtil_parseCategoryInvalid_fail() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            ParserUtil.parseCategory(\"dummy\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 26,
      "UnicornJin": 180
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/PrefixTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class PrefixTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void prefix_getPrefix_success() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefix \u003d new Prefix(\"1234567890abcdefg\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        assert prefix.getPrefix().equals(\"1234567890abcdefg\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void prefix_hashCode_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefix \u003d new Prefix(\"1234567890abcdefg\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix nullPrefix \u003d new Prefix(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        assert prefix.hashCode() \u003d\u003d \"1234567890abcdefg\".hashCode() \u0026\u0026 nullPrefix.hashCode() \u003d\u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void prefix_equals_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefixA \u003d new Prefix(\"123\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefixB \u003d new Prefix(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefixC \u003d new Prefix(\"abc\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Prefix prefixD \u003d new Prefix(\"123\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        assert !prefixA.equals(prefixB) \u0026\u0026 prefixA.equals(prefixD) \u0026\u0026 !prefixA.equals(prefixC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "UnicornJin": 24
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/TaskListParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class TaskListParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandAddValid1_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 r/release a/Ip\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"CyberPunk2077\"), null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                new CustomizedDeadline(\"2020-12-10\", LocalDate.parse(\"2020-12-10\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                new Remark(\"release\"), true, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommand expected;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandAddValid2_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"add i/0101 w/1 d/CyberPunk2077 c/2020-12-10 a/Ip\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Task task \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"CyberPunk2077\"), null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                new CustomizedDeadline(\"2020-12-10\", LocalDate.parse(\"2020-12-10\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                new Remark(\"\"), true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        AddCommand expected;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandEditValid_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"edit i/0101 w/1 d/CyberPunk2077 c/2020-12-10 r/release\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        Index index \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setWeekNumber(new WeekNumber(\"1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            LocalDate customizedDeadlineParsed \u003d ParserUtil.parseCustomizedDeadline(\"2020-12-10\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "onglijin"
        },
        "content": "            editTaskDescriptor.setCustomizedDeadline("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                    new CustomizedDeadline(customizedDeadlineParsed.toString(), customizedDeadlineParsed));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setDescription(new Description(\"CyberPunk2077\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        editTaskDescriptor.setRemark(new Remark(\"release\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        EditCommand expected \u003d new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandDeleteValid_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"delete 0101\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DeleteCommand expected \u003d new DeleteCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandFindValid_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"find testtest\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FindCommand expected \u003d new FindCommand(\"testtest\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandExitValid_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"exit\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ExitCommand expected \u003d new ExitCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandDeadlineValid_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"deadline i/0101 c/2020-08-17\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "onglijin"
        },
        "content": "        DeadlineCommand expected \u003d new DeadlineCommand(new Index(\"0101\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "onglijin"
        },
        "content": "                new CustomizedDeadline(\"2020-08-17\", LocalDate.parse(\"2020-08-17\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandHelpValid_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"help\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        HelpCommand expected \u003d new HelpCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandListValid_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"list 5\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        ListCommand expected \u003d new ListCommand(new WeekNumber(\"5\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandDoneValid_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"done 0101\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        DoneCommand expected \u003d new DoneCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandUndoneValid_success() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"undone 0101\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommand expected \u003d new UndoneCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandFilterValid1_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"filter w/4 k/pending l/official\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"pending\", \"official\", new WeekNumber(\"4\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandFilterValid2_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"filter k/pending l/official\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"pending\", \"official\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandFilterValid3_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"filter w/4 k/done\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"done\", new WeekNumber(\"4\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandFilterValid4_success() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"filter k/done\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        FilterCommand expected \u003d null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            expected \u003d new FilterCommand(\"done\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "onglijin"
        },
        "content": "    public void taskListParser_parseCommandHomeValid_success() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"home\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        HomeCommand expected \u003d new HomeCommand();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected, parser.parseCommand(parametersStub));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UnicornJin": 233,
      "onglijin": 45
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/logic/parser/UndoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "package tp.acecs2103.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "public class UndoneCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    public void parse_validUndoneCommand_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommandParser undoneCommandParser \u003d new UndoneCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"0101\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommand expected \u003d new UndoneCommand(new Index(\"0101\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assertEquals(expected.getTargetIndex(), undoneCommandParser.parse(parametersStub).getTargetIndex());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidUndoneCommandEmptyArguments_fail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommandParser undoneCommandParser \u003d new UndoneCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            undoneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    //TODO: WARNING!!!SHOULD BE FAILED"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidUndoneCommandInvalidIndex1_fail() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommandParser undoneCommandParser \u003d new UndoneCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"01401\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            undoneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void parse_invalidUndoneCommandInvalidIndex2_fail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        UndoneCommandParser undoneCommandParser \u003d new UndoneCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        String parametersStub \u003d \"ABC\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            undoneCommandParser.parse(parametersStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "            assert true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UnicornJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 7,
      "UnicornJin": 50
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.ADMIN_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.ModelException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(new TaskList(), new TaskList(modelManager.getTaskList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"tasklist/file/path\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"new/tasklist/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setTaskListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setTaskListFilePath_validPath_setsTaskListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Path path \u003d Paths.get(\"tasklist/file/path\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        modelManager.setTaskListFilePath(path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(path, modelManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void hasTask_taskNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertFalse(modelManager.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void hasTask_taskInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        modelManager.addTask(ADMIN_ONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertTrue(modelManager.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void deleteTask_taskInTaskList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelManager.addTask(ADMIN_ONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            assertTrue(modelManager.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            modelManager.deleteTask(ADMIN_ONE.getIndex());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            assertFalse(modelManager.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void deleteTask_taskNotInTaskList_throwsModelException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(ModelException.class, () -\u003e modelManager.deleteTask(ADMIN_ONE.getIndex()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 100
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.ADMIN_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), taskList.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.resetData(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void resetData_withValidReadOnlyTaskList_replacesData() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList newData \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList.resetData(newData);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(newData, taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void hasTask_taskNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertFalse(taskList.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void hasTask_taskInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList.add(ADMIN_ONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertTrue(taskList.hasTask(ADMIN_ONE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        taskList.add(ADMIN_ONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task editedAdminOne \u003d new TaskBuilder(ADMIN_ONE).buildAdmin();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertTrue(taskList.hasTask(editedAdminOne));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 56
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/UiTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "onglijin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "onglijin"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class UiTaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private TaskList taskList \u003d TypicalTasks.getTypicalTaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private UiTaskList uiTaskList \u003d new UiTaskList(taskList.getTaskList());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getCombinedTaskList_withValidTaskList_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(taskList.getTaskList().equals(uiTaskList.getCombinedTaskList()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void size_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(uiTaskList.size() \u003d\u003d taskList.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getAdminWeekRange_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e weekRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(uiTaskList.getAdminWeekRange().equals(weekRange));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getTopicWeekRange_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e weekRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(uiTaskList.getTopicWeekRange().equals(weekRange));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getIpWeekRange_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e weekRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(uiTaskList.getIpWeekRange().equals(weekRange));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getTpWeekRange_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        ArrayList\u003cInteger\u003e weekRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekRange.add(4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(uiTaskList.getTpWeekRange().equals(weekRange));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 52,
      "onglijin": 3
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/AdminTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class AdminTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Admin task1 \u003d new Admin(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void getCategory_null_correctTaskCategory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(TaskCategory.ADMIN, task1.getCategory());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 16
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/IpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "class IpTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private IP task1 \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void getCategory_null_correctTaskCategory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(TaskCategory.IP, task1.getCategory());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 5,
      "Zhang-Yunjie": 13
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Remark remark1 \u003d new Remark(\"remark\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Remark remark2 \u003d new Remark(\"remark\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Remark remark3 \u003d new Remark(\"ABC\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void contains_keyword_returnTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(remark1.contains(\"remark\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void contains_keyword_returnFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(remark1.contains(\"ABC\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_objectToCompare_returnTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(remark1.equals(remark2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void equals_objectToCompare_returnFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(remark1.equals(remark3));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(remark1.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(remark1.equals(\"remark\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "Zhang-Yunjie": 28
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.exceptions.InvalidTaskOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Task defaultTaskOne \u003d new Task(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task defaultTaskTwo \u003d new Task(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2021-01-01\", LocalDate.of(2021, 1, 1)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task defaultTaskThree \u003d new Task(new Index(\"0102\"), new WeekNumber(\"1\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new OfficialDeadline(\"2021-01-01\", LocalDate.of(2021, 1, 1)),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Task customizedTaskOne \u003d new Task(new Index(\"0302\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Description(\"Test Task Three\"), null,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new CustomizedDeadline(\"2020-09-20\", LocalDate.of(2020, 9, 20)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task ip \u003d new IP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"IP task\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task tp \u003d new TP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"TP task\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task topic \u003d new Topic(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Topic task\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task admin \u003d new Admin(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Admin task\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new CustomizedDeadline(\"2020-09-01\", LocalDate.of(2020, 9, 1)), new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private Task taskWithoutRemark \u003d new Task(new Index(\"0302\"), new WeekNumber(\"3\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new Description(\"no description\"), null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new CustomizedDeadline(\"2020-09-20\", LocalDate.of(2020, 9, 20)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, true, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void hasIndex_indexToCheck_returnTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // same indexes -\u003e true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.hasIndex(new Index(\"0101\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void hasIndex_indexToCheck_returnFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // difference indexes -\u003e false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.hasIndex(new Index(\"0102\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void hasDeadline_deadlineToCheck_returnTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(customizedTaskOne.hasDeadline());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void hasDeadline_deadlineToCheck_returnFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.hasDeadline());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void statusChangeTest_null_returnTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        defaultTaskOne.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.isDone());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void statusChangeTest_null_returnFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        defaultTaskOne.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        defaultTaskOne.markAsPending();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.isDone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void setDeadlineTest() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            defaultTaskOne.setDeadline("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new CustomizedDeadline(\"2020-10-10\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                            LocalDate.of(2020, 10, 10)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            Assertions.assertFalse(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            defaultTaskTwo.setDeadline("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new CustomizedDeadline(\"2020-10-10\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                            LocalDate.of(2020, 10, 10)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            Assertions.assertFalse(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        boolean test \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            defaultTaskTwo.setDeadline("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    new CustomizedDeadline(\"2021-01-02\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                            LocalDate.of(2021, 1, 2)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (InvalidTaskOperationException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            test \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        CustomizedDeadline newDeadline \u003d new CustomizedDeadline(\"2020-10-10\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.getCustomizedDeadline().equals(newDeadline));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isValidTest_null_returnTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.isValid());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(defaultTaskTwo.isValid());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(defaultTaskThree.isValid());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(customizedTaskOne.isValid());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Task invalidTask \u003d new Task(new Index(\"0202\"), new WeekNumber(\"2\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                null, new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task invalidTaskTwo \u003d new Task(new Index(\"0202\"), new WeekNumber(\"4\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new CustomizedDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                 new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task invalidTaskThree \u003d new Task(new Index(\"0202\"), new WeekNumber(\"2\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, null,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(invalidTask.isValid());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(invalidTaskTwo.isValid());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(invalidTaskThree.isValid());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isValidTest_null_returnFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task invalidTask \u003d new Task(new Index(\"0202\"), new WeekNumber(\"2\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task invalidTaskTwo \u003d new Task(new Index(\"0202\"), new WeekNumber(\"4\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new CustomizedDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task invalidTaskThree \u003d new Task(new Index(\"0202\"), new WeekNumber(\"2\"), new Description(\"Test Task Two\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, null,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(invalidTask.isValid());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(invalidTaskTwo.isValid());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(invalidTaskThree.isValid());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isWeekXTest_weekNumber_returnTrue() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.isWeekX(new WeekNumber(\"1\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(customizedTaskOne.isWeekX(new WeekNumber(\"3\")));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.isWeekX(new WeekNumber(\"2\")));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(customizedTaskOne.isWeekX(new WeekNumber(\"2\")));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isWeekXTest_weekNumber_returnFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.isWeekX(new WeekNumber(\"2\")));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(customizedTaskOne.isWeekX(new WeekNumber(\"2\")));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void containsTest_keyword_returnTrue() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.contains(\"Test\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.contains(\"test\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.contains(\"remark\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(taskWithoutRemark.contains(\"no\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void containsTest_keyword_returnFalse() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.contains(\"no meaning\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void isSameTaskTest_taskToCompare_returnTrue() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.isSameTask(defaultTaskTwo));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void isSameTaskTest_taskToCompare_returnFalse() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.isSameTask(customizedTaskOne));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskTwo.isSameTask(defaultTaskThree));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isOverDueTest_null_returnTrue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.isOverdue());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void isOverDueTest_null_returnFalse() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertFalse(defaultTaskTwo.isOverdue());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void compareToTest_taskToCompare_returnTrue() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskOne.compareTo(defaultTaskTwo) \u003c 0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(defaultTaskTwo.compareTo(defaultTaskOne) \u003e 0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void compareToTest_taskToCompare_returnFalse() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskOne.compareTo(defaultTaskTwo) \u003e 0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(defaultTaskTwo.compareTo(defaultTaskOne) \u003c 0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void toString_null_stringOutput() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String str1 \u003d \"[Week 1] IP Task 0101 with description: IP task\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"Official deadline: 2020-09-10\\nRemark: no remark\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        String str2 \u003d \"[Week 1] ADMIN Task 0101 with description: Admin task\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"\\nOfficial deadline: 2020-09-10\\nCustomized deadline: 2020-09-01\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                + \"Remark: no remark\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(str1, ip.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(str2, admin.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getCategory_null_category() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(TaskCategory.TOPIC, topic.getCategory());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(TaskCategory.IP, ip.getCategory());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(TaskCategory.TP, tp.getCategory());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertEquals(TaskCategory.ADMIN, admin.getCategory());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void getRemark_null_remark() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void equals_objectToCompare_returnTrue() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertTrue(ip.equals(ip));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void equals_objectToCompare_returnFalse() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(ip.equals(tp));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Task ip1 \u003d new IP(new Index(\"0102\"), new WeekNumber(\"1\"), new Description(\"IP task\"),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        Assertions.assertFalse(ip.equals(ip1));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 112,
      "Zhang-Yunjie": 132
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/TopicTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class TopicTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Topic task1 \u003d new Topic(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void getCategory_null_correctTaskCategory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(TaskCategory.TOPIC, task1.getCategory());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 16
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/TpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "class TpTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private TP task1 \u003d new TP(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Test Task One\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            new OfficialDeadline(\"2020-09-10\", LocalDate.of(2020, 9, 10)),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            null, new Remark(\"no remark\"), false, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    void getCategory_null_correctTaskCategory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(TaskCategory.TP, task1.getCategory());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 4,
      "Zhang-Yunjie": 14
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/model/task/WeekNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "class WeekNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private WeekNumber wk \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private WeekNumber wk1 \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private WeekNumber wk2 \u003d new WeekNumber(\"2\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new WeekNumber(\"0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new WeekNumber(\"14\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void isValidWeekNumber_stringInput_returnTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(WeekNumber.isValidWeekNumber(\"1\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(WeekNumber.isValidWeekNumber(\"5\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(WeekNumber.isValidWeekNumber(\"13\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void isValidWeekNumber_stringInput_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(WeekNumber.isValidWeekNumber(\"-2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(WeekNumber.isValidWeekNumber(\"0\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(WeekNumber.isValidWeekNumber(\"14\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(WeekNumber.isValidWeekNumber(\"20\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void getWeekValueInt_null_weekNumberInt() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(1, wk1.getWeekValueInt());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public void testToString_null_weekNumberString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertEquals(\"1\", wk1.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void testEquals_objectToCompare_returnTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertTrue(wk.equals(wk1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void testEquals_objectToCompare_returnFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(wk1.equals(wk2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(wk1.equals(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        assertFalse(wk1.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 12,
      "Zhang-Yunjie": 46
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Perpetual09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.OfficialDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"1110\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String INVALID_WEEKNUMBER \u003d \"14\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"2020-1-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static Admin task \u003d new Admin(new Index(\"0101\"), new WeekNumber(\"1\"), new Description(\"Description\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new OfficialDeadline(\"2020-01-01\", LocalDate.of(2020, 1, 1)),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new CustomizedDeadline(\"2020-01-01\", LocalDate.of(2020, 1, 1)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new Remark(\"no remark\"), true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String VALID_INDEX \u003d task.getIndex().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String VALID_WEEKNUMBER \u003d task.getWeekNumber().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String VALID_OFFCIALDEADLINE \u003d task.getOfficialDeadline().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String VALID_CUSTOMIZEDDEADLINE \u003d task.getCustomizedDeadline().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String DESCRIPTION \u003d \"Test Task\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String REMARK \u003d \"no remark\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final boolean ISCUSTOMIZED \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final boolean ISDONE \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final String CATEGORY \u003d \"Admin\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d new JsonAdaptedTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Assertions.assertTrue(task.isSameTask(testTask.toModelType()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_invalidIndex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(INVALID_INDEX, VALID_WEEKNUMBER, DESCRIPTION,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d Index.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_nullIndex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(null, VALID_WEEKNUMBER, DESCRIPTION,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"index\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_invalidWeekNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(VALID_INDEX, INVALID_WEEKNUMBER, DESCRIPTION,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d WeekNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_nullWeekNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(VALID_INDEX, null, DESCRIPTION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"weekNumber\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(VALID_INDEX, VALID_WEEKNUMBER, null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_invalidOfficialDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(VALID_INDEX, VALID_WEEKNUMBER, DESCRIPTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        INVALID_DEADLINE, VALID_CUSTOMIZEDDEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_invalidCustomizedDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonAdaptedTask testTask \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                new JsonAdaptedTask(VALID_INDEX, VALID_WEEKNUMBER, DESCRIPTION,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                        VALID_OFFCIALDEADLINE, INVALID_DEADLINE, REMARK, CATEGORY, ISCUSTOMIZED, ISDONE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testTask::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 109,
      "Perpetual09": 1
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTaskList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTaskList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTaskList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList taskListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList typicalTasksTaskList \u003d TypicalTasks.getTypicalTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(taskListFromFile, typicalTasksTaskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTaskList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 49
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/storage/JsonTaskListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.ADMIN_EXTRA_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.ADMIN_EXTRA_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class JsonTaskListStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskListStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void readTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskList(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private java.util.Optional\u003cTaskList\u003e readTaskList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new JsonTaskListStorage(Paths.get(filePath)).readTaskList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertFalse(readTaskList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"notJsonFormatTaskList.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void readTaskList_invalidTaskTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"invalidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void readTaskList_invalidAndValidTaskTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"invalidAndValidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void readAndSaveTaskList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonTaskListStorage jsonAddressBookStorage \u003d new JsonTaskListStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        jsonAddressBookStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList readBack \u003d jsonAddressBookStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        original.add(ADMIN_EXTRA_ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        jsonAddressBookStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        original.add(ADMIN_EXTRA_TWO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        jsonAddressBookStorage.saveTaskList(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readTaskList().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveAddressBook_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Saves {@code taskList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private void saveTaskList(TaskList taskList, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                    .saveTaskList(taskList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void saveTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(new TaskList(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 108
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"tasklist.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 6,
      "-": 116
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import static tp.acecs2103.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"taskList\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        storageManager \u003d new StorageManager(taskListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void taskListReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "         * {@link JsonTaskListStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskListStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        storageManager.saveTaskList(original);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList retrieved \u003d storageManager.readTaskList().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertEquals(original, new TaskList(retrieved));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public void getTaskListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        assertNotNull(storageManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 16,
      "-": 51
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code Task}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setRemark(task.getRemark());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setCustomizedDeadline(task.getCustomizedDeadline());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        if (task.isCustomized()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            descriptor.setWeekNumber(task.getWeekNumber());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Sets the {@code WeekNumber} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder withWeekNumber(String weekNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setWeekNumber(new WeekNumber(weekNumber));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Sets the {@code CustomizedDeadline} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder withCustomizedDeadline(String customizedDeadline) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setCustomizedDeadline(new CustomizedDeadline(customizedDeadline,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                LocalDate.parse(customizedDeadline)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 3,
      "Zhang-Yunjie": 72
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.CustomizedDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.OfficialDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.WeekNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final WeekNumber DEFAULT_WEEKNUMBER \u003d new WeekNumber(\"1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Description DEFAULT_DESCRIPTION \u003d new Description(\"Description\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final OfficialDeadline DEFAULT_OFFICIALDEADLINE \u003d new OfficialDeadline(\"2020-10-10\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final CustomizedDeadline DEFAULT_CUSTOMIZEDDEADLINE \u003d new CustomizedDeadline(\"2020-10-10\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Remark DEFAULT_REMARK \u003d new Remark(\"remark\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final boolean DEFAULT_ISCUSTOMIZED \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final boolean DEFAULT_ISDONE \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private WeekNumber weekNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private OfficialDeadline officialDeadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private CustomizedDeadline customizedDeadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private boolean isCustomized;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        index \u003d DEFAULT_INDEX;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekNumber \u003d DEFAULT_WEEKNUMBER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        officialDeadline \u003d DEFAULT_OFFICIALDEADLINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        customizedDeadline \u003d DEFAULT_CUSTOMIZEDDEADLINE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        remark \u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isCustomized \u003d DEFAULT_ISCUSTOMIZED;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isDone \u003d DEFAULT_ISDONE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        index \u003d taskToCopy.getIndex();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        weekNumber \u003d taskToCopy.getWeekNumber();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        officialDeadline \u003d taskToCopy.getOfficialDeadline();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        customizedDeadline \u003d taskToCopy.getCustomizedDeadline();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        remark \u003d taskToCopy.getRemark();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isCustomized \u003d taskToCopy.isCustomized();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        isDone \u003d taskToCopy.isDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code Index} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withIndex(String index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.index \u003d new Index(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code weekNumber} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withWeekNumber(String weekNumber) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.weekNumber \u003d new WeekNumber(weekNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code remark} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code officialDeadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withOfficialDeadline(String officialDeadline) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (officialDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            this.officialDeadline \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            this.officialDeadline \u003d new OfficialDeadline(officialDeadline, LocalDate.parse(officialDeadline));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code customizedDeadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withCustomizedDeadline(String customizedDeadline) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        if (customizedDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            this.customizedDeadline \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            this.customizedDeadline \u003d new CustomizedDeadline(customizedDeadline, LocalDate.parse(customizedDeadline));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code isCustomized} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withIsCustomized(boolean isCustomized) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.isCustomized \u003d isCustomized;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Sets the {@code isDone} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TaskBuilder withIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Builds a {@code Admin} task."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Admin buildAdmin() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new Admin(index, weekNumber, description,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                officialDeadline, customizedDeadline, remark, isCustomized, isDone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Builds a {@code Topic} task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public Topic buildTopic() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new Topic(index, weekNumber, description,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                officialDeadline, customizedDeadline, remark, isCustomized, isDone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Builds a {@code Ip} task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public IP buildIp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new IP(index, weekNumber, description,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                officialDeadline, customizedDeadline, remark, isCustomized, isDone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Builds a {@code Tp} task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public TP buildTp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new TP(index, weekNumber, description,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                officialDeadline, customizedDeadline, remark, isCustomized, isDone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Builds a {@code Default IP} task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public IP build() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return new IP(index, weekNumber, description,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "                officialDeadline, customizedDeadline, remark, !isCustomized, isDone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 178,
      "Zhang-Yunjie": 8
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 30
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/TypicalIndex.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "import tp.acecs2103.model.task.Index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class TypicalIndex {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d new Index(\"0101\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d new Index(\"0102\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d new Index(\"0103\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang-Yunjie": 8
    }
  },
  {
    "path": "src/test/java/tp/acecs2103/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "package tp.acecs2103.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Admin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.IP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.TP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "import tp.acecs2103.model.task.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "public class TypicalTasks\u003ctaskList\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Admin ADMIN_ONE \u003d new TaskBuilder().withIndex(\"0101\").withWeekNumber(\"1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Admin One\").withOfficialDeadline(\"2020-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(false).buildAdmin();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Admin ADMIN_TWO \u003d new TaskBuilder().withIndex(\"0102\").withWeekNumber(\"1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Admin Two\").withOfficialDeadline(null).withCustomizedDeadline(\"2020-10-20\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(true).withIsDone(false).buildAdmin();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Topic TOPIC_ONE \u003d new TaskBuilder().withIndex(\"0201\").withWeekNumber(\"2\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Topic One\").withOfficialDeadline(\"2020-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(false).buildTopic();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Topic TOPIC_TWO \u003d new TaskBuilder().withIndex(\"0202\").withWeekNumber(\"2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Topic Two\").withOfficialDeadline(null).withCustomizedDeadline(\"2020-10-20\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(true).withIsDone(false).buildTopic();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final IP IP_ONE \u003d new TaskBuilder().withIndex(\"0301\").withWeekNumber(\"3\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Ip One\").withOfficialDeadline(\"2020-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(true).buildIp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final IP IP_TWO \u003d new TaskBuilder().withIndex(\"0302\").withWeekNumber(\"3\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Ip Two\").withOfficialDeadline(null).withCustomizedDeadline(\"2020-10-20\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(true).withIsDone(false).buildIp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final TP TP_ONE \u003d new TaskBuilder().withIndex(\"0401\").withWeekNumber(\"4\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            .withDescription(\"Tp One\").withOfficialDeadline(\"2021-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(false).buildTp();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final TP TP_TWO \u003d new TaskBuilder().withIndex(\"0402\").withWeekNumber(\"4\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withDescription(\"Tp Two\").withOfficialDeadline(null).withCustomizedDeadline(\"2020-10-20\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(true).withIsDone(false).buildTp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Admin ADMIN_EXTRA_ONE \u003d new TaskBuilder().withIndex(\"0103\").withWeekNumber(\"1\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            .withDescription(\"Admin Extra One\").withOfficialDeadline(\"2021-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(true).buildAdmin();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static final Admin ADMIN_EXTRA_TWO \u003d new TaskBuilder().withIndex(\"0104\").withWeekNumber(\"1\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "            .withDescription(\"Admin Extra Two\").withOfficialDeadline(\"2021-10-10\").withCustomizedDeadline(null)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            .withRemark(\"No remark\").withIsCustomized(false).withIsDone(false).buildAdmin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     * Returns an {@code TaskList} with all the typical tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static TaskList getTypicalTaskList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        for (Task task: getTypicalTasks()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     * Returns an {@code TaskList} with all the extra tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    public static TaskList getExtraTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        taskList.add(ADMIN_EXTRA_ONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        taskList.add(ADMIN_EXTRA_TWO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ADMIN_ONE, ADMIN_TWO, TOPIC_ONE, TOPIC_TWO,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "                IP_ONE, IP_TWO, TP_ONE, TP_TWO));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang-Yunjie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 63,
      "Zhang-Yunjie": 17
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003c?import tp.acecs2103.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XIA-LIYI"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XIA-LIYI": 1,
      "-": 5
    }
  }
]
